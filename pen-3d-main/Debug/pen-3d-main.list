
pen-3d-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003254  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080033e4  080033e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003470  08003470  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003478  08003478  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  080034f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080034f0  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a34b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a7  00000000  00000000  0002a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019566  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3d6  00000000  00000000  00046186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb7b  00000000  00000000  0005055c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef0d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c4  00000000  00000000  000ef128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033cc 	.word	0x080033cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080033cc 	.word	0x080033cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fa2d 	bl	80009d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f80a 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f87a 	bl	8000678 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000584:	f000 f84c 	bl	8000620 <MX_LPUART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_3);
	//HAL_Delay(1000);
	myprintf("hello world!");
 8000588:	4801      	ldr	r0, [pc, #4]	; (8000590 <main+0x1c>)
 800058a:	f000 f8b3 	bl	80006f4 <myprintf>
  {
 800058e:	e7fb      	b.n	8000588 <main+0x14>
 8000590:	080033e4 	.word	0x080033e4

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b096      	sub	sp, #88	; 0x58
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2244      	movs	r2, #68	; 0x44
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fa82 	bl	8002aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ba:	f000 fcff 	bl	8000fbc <HAL_PWREx_ControlVoltageScaling>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c4:	f000 f8cc 	bl	8000760 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c8:	2310      	movs	r3, #16
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d4:	2360      	movs	r3, #96	; 0x60
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fd41 	bl	8001068 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005ec:	f000 f8b8 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f98f 	bl	800192c <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000614:	f000 f8a4 	bl	8000760 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3758      	adds	r7, #88	; 0x58
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 800062c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000630:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_LPUART1_UART_Init+0x50>)
 800065e:	f001 fd0f 	bl	8002080 <HAL_UART_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f87a 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000008c 	.word	0x2000008c
 8000674:	40008000 	.word	0x40008000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_GPIO_Init+0x78>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_GPIO_Init+0x78>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0x78>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_GPIO_Init+0x78>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <MX_GPIO_Init+0x78>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_GPIO_Init+0x78>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2108      	movs	r1, #8
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f000 fc53 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ca:	2308      	movs	r3, #8
 80006cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f000 fad2 	bl	8000c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000

080006f4 <myprintf>:

/* USER CODE BEGIN 4 */
void myprintf (const char *fmt, ...)
{
 80006f4:	b40f      	push	{r0, r1, r2, r3}
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b0c2      	sub	sp, #264	; 0x108
 80006fa:	af00      	add	r7, sp, #0
   va_list arglist;
   int nby;
   unsigned char st[256];

   if (!fmt) return;
 80006fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000700:	2b00      	cmp	r3, #0
 8000702:	d022      	beq.n	800074a <myprintf+0x56>
   va_start(arglist,fmt);
 8000704:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000708:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   nby = vsnprintf((char *)st,sizeof(st),fmt,arglist);
 800070c:	4638      	mov	r0, r7
 800070e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000712:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	f002 f9fb 	bl	8002b14 <vsniprintf>
 800071e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   va_end(arglist);
   if (nby < 0) { nby = sizeof(st)-1; } //print truncated string in case too long
 8000722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000726:	2b00      	cmp	r3, #0
 8000728:	da02      	bge.n	8000730 <myprintf+0x3c>
 800072a:	23ff      	movs	r3, #255	; 0xff
 800072c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   if (nby) HAL_UART_Transmit(&hlpuart1,st,nby,10);
 8000730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000734:	2b00      	cmp	r3, #0
 8000736:	d009      	beq.n	800074c <myprintf+0x58>
 8000738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800073c:	b29a      	uxth	r2, r3
 800073e:	4639      	mov	r1, r7
 8000740:	230a      	movs	r3, #10
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <myprintf+0x68>)
 8000744:	f001 fcea 	bl	800211c <HAL_UART_Transmit>
 8000748:	e000      	b.n	800074c <myprintf+0x58>
   if (!fmt) return;
 800074a:	bf00      	nop
}
 800074c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000750:	46bd      	mov	sp, r7
 8000752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000756:	b004      	add	sp, #16
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	2000008c 	.word	0x2000008c

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6613      	str	r3, [r2, #96]	; 0x60
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x44>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x44>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6593      	str	r3, [r2, #88]	; 0x58
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x44>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b098      	sub	sp, #96	; 0x60
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007cc:	f107 0318 	add.w	r3, r7, #24
 80007d0:	2234      	movs	r2, #52	; 0x34
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f969 	bl	8002aac <memset>
  if(huart->Instance==LPUART1)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <HAL_UART_MspInit+0xe0>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d153      	bne.n	800088c <HAL_UART_MspInit+0xd8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007e4:	2320      	movs	r3, #32
 80007e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fabf 	bl	8001d74 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007fc:	f7ff ffb0 	bl	8000760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <HAL_UART_MspInit+0xe4>)
 8000802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000804:	4a24      	ldr	r2, [pc, #144]	; (8000898 <HAL_UART_MspInit+0xe4>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <HAL_UART_MspInit+0xe4>)
 800080e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <HAL_UART_MspInit+0xe4>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <HAL_UART_MspInit+0xe4>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_UART_MspInit+0xe4>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <HAL_UART_MspInit+0xe4>)
 8000832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000834:	4a18      	ldr	r2, [pc, #96]	; (8000898 <HAL_UART_MspInit+0xe4>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <HAL_UART_MspInit+0xe4>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PB10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000848:	2304      	movs	r3, #4
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000858:	2308      	movs	r3, #8
 800085a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f000 fa11 	bl	8000c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800086a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800087c:	2308      	movs	r3, #8
 800087e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <HAL_UART_MspInit+0xe8>)
 8000888:	f000 fa00 	bl	8000c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800088c:	bf00      	nop
 800088e:	3760      	adds	r7, #96	; 0x60
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40008000 	.word	0x40008000
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f8c8 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f002 f898 	bl	8002a58 <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000a000 	.word	0x2000a000
 8000954:	00000400 	.word	0x00000400
 8000958:	20000110 	.word	0x20000110
 800095c:	20000128 	.word	0x20000128

08000960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000988:	f7ff ffea 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	; (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f002 f857 	bl	8002a64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b6:	f7ff fddd 	bl	8000574 <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009c8:	08003480 	.word	0x08003480
  ldr r2, =_sbss
 80009cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009d0:	20000128 	.word	0x20000128

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>

080009d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f91f 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f80e 	bl	8000a08 <HAL_InitTick>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e001      	b.n	80009fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f8:	f7ff feb8 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d023      	beq.n	8000a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_InitTick+0x70>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f91d 	bl	8000c72 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10f      	bne.n	8000a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d809      	bhi.n	8000a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a4c:	f000 f8f5 	bl	8000c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0x74>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e007      	b.n	8000a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e001      	b.n	8000a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000114 	.word	0x20000114

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000114 	.word	0x20000114

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff47 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff5c 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffb0 	bl	8000be0 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e14e      	b.n	8000f3a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8140 	beq.w	8000f34 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d005      	beq.n	8000ccc <HAL_GPIO_Init+0x40>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d130      	bne.n	8000d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d02:	2201      	movs	r2, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	f003 0201 	and.w	r2, r3, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d017      	beq.n	8000d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d123      	bne.n	8000dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	6939      	ldr	r1, [r7, #16]
 8000dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0203 	and.w	r2, r3, #3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 809a 	beq.w	8000f34 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e00:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <HAL_GPIO_Init+0x2cc>)
 8000e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e04:	4a54      	ldr	r2, [pc, #336]	; (8000f58 <HAL_GPIO_Init+0x2cc>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0c:	4b52      	ldr	r3, [pc, #328]	; (8000f58 <HAL_GPIO_Init+0x2cc>)
 8000e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e18:	4a50      	ldr	r2, [pc, #320]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e42:	d013      	beq.n	8000e6c <HAL_GPIO_Init+0x1e0>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a46      	ldr	r2, [pc, #280]	; (8000f60 <HAL_GPIO_Init+0x2d4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d00d      	beq.n	8000e68 <HAL_GPIO_Init+0x1dc>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a45      	ldr	r2, [pc, #276]	; (8000f64 <HAL_GPIO_Init+0x2d8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d007      	beq.n	8000e64 <HAL_GPIO_Init+0x1d8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <HAL_GPIO_Init+0x2dc>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d101      	bne.n	8000e60 <HAL_GPIO_Init+0x1d4>
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e006      	b.n	8000e6e <HAL_GPIO_Init+0x1e2>
 8000e60:	2307      	movs	r3, #7
 8000e62:	e004      	b.n	8000e6e <HAL_GPIO_Init+0x1e2>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e002      	b.n	8000e6e <HAL_GPIO_Init+0x1e2>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <HAL_GPIO_Init+0x1e2>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	f002 0203 	and.w	r2, r2, #3
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	4093      	lsls	r3, r2
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e7e:	4937      	ldr	r1, [pc, #220]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e8c:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eb0:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eda:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa22 f303 	lsr.w	r3, r2, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f47f aea9 	bne.w	8000c9c <HAL_GPIO_Init+0x10>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	371c      	adds	r7, #28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	48000400 	.word	0x48000400
 8000f64:	48000800 	.word	0x48000800
 8000f68:	48000c00 	.word	0x48000c00
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40007000 	.word	0x40007000

08000fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fca:	d130      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fd8:	d038      	beq.n	800104c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2232      	movs	r2, #50	; 0x32
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9b      	lsrs	r3, r3, #18
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001000:	e002      	b.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3b01      	subs	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001014:	d102      	bne.n	800101c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f2      	bne.n	8001002 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001028:	d110      	bne.n	800104c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e00f      	b.n	800104e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103a:	d007      	beq.n	800104c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40007000 	.word	0x40007000
 8001060:	20000000 	.word	0x20000000
 8001064:	431bde83 	.word	0x431bde83

08001068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d102      	bne.n	800107c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	f000 bc4f 	b.w	800191a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800107c:	4b97      	ldr	r3, [pc, #604]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001086:	4b95      	ldr	r3, [pc, #596]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80e6 	beq.w	800126a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <HAL_RCC_OscConfig+0x4c>
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	2b0c      	cmp	r3, #12
 80010a8:	f040 808d 	bne.w	80011c6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	f040 8089 	bne.w	80011c6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010b4:	4b89      	ldr	r3, [pc, #548]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_RCC_OscConfig+0x66>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f000 bc26 	b.w	800191a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d2:	4b82      	ldr	r3, [pc, #520]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <HAL_RCC_OscConfig+0x80>
 80010de:	4b7f      	ldr	r3, [pc, #508]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010e6:	e005      	b.n	80010f4 <HAL_RCC_OscConfig+0x8c>
 80010e8:	4b7c      	ldr	r3, [pc, #496]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80010ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d224      	bcs.n	8001142 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fdd9 	bl	8001cb4 <RCC_SetFlashLatencyFromMSIRange>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	f000 bc06 	b.w	800191a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800110e:	4b73      	ldr	r3, [pc, #460]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a72      	ldr	r2, [pc, #456]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b70      	ldr	r3, [pc, #448]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	496d      	ldr	r1, [pc, #436]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112c:	4b6b      	ldr	r3, [pc, #428]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	4968      	ldr	r1, [pc, #416]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
 8001140:	e025      	b.n	800118e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001142:	4b66      	ldr	r3, [pc, #408]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a65      	ldr	r2, [pc, #404]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	4960      	ldr	r1, [pc, #384]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001160:	4b5e      	ldr	r3, [pc, #376]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	495b      	ldr	r1, [pc, #364]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fd98 	bl	8001cb4 <RCC_SetFlashLatencyFromMSIRange>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e3c5      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800118e:	f000 fccd 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001192:	4602      	mov	r2, r0
 8001194:	4b51      	ldr	r3, [pc, #324]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	4950      	ldr	r1, [pc, #320]	; (80012e0 <HAL_RCC_OscConfig+0x278>)
 80011a0:	5ccb      	ldrb	r3, [r1, r3]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	4a4e      	ldr	r2, [pc, #312]	; (80012e4 <HAL_RCC_OscConfig+0x27c>)
 80011ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <HAL_RCC_OscConfig+0x280>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fc28 	bl	8000a08 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d052      	beq.n	8001268 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	e3a9      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d032      	beq.n	8001234 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011ce:	4b43      	ldr	r3, [pc, #268]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a42      	ldr	r2, [pc, #264]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011da:	f7ff fc65 	bl	8000aa8 <HAL_GetTick>
 80011de:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc61 	bl	8000aa8 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e392      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a35      	ldr	r2, [pc, #212]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b33      	ldr	r3, [pc, #204]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	4930      	ldr	r1, [pc, #192]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	492b      	ldr	r1, [pc, #172]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
 8001232:	e01a      	b.n	800126a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a28      	ldr	r2, [pc, #160]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001240:	f7ff fc32 	bl	8000aa8 <HAL_GetTick>
 8001244:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001248:	f7ff fc2e 	bl	8000aa8 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e35f      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1e0>
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d073      	beq.n	800135e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d005      	beq.n	8001288 <HAL_RCC_OscConfig+0x220>
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	d10e      	bne.n	80012a0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d063      	beq.n	800135c <HAL_RCC_OscConfig+0x2f4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d15f      	bne.n	800135c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e33c      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x250>
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e025      	b.n	8001304 <HAL_RCC_OscConfig+0x29c>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c0:	d114      	bne.n	80012ec <HAL_RCC_OscConfig+0x284>
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a02      	ldr	r2, [pc, #8]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e013      	b.n	8001304 <HAL_RCC_OscConfig+0x29c>
 80012dc:	40021000 	.word	0x40021000
 80012e0:	080033f4 	.word	0x080033f4
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004
 80012ec:	4b8f      	ldr	r3, [pc, #572]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a8e      	ldr	r2, [pc, #568]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b8c      	ldr	r3, [pc, #560]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a8b      	ldr	r2, [pc, #556]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fbcc 	bl	8000aa8 <HAL_GetTick>
 8001310:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fbc8 	bl	8000aa8 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e2f9      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001326:	4b81      	ldr	r3, [pc, #516]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x2ac>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fbb8 	bl	8000aa8 <HAL_GetTick>
 8001338:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fbb4 	bl	8000aa8 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e2e5      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800134e:	4b77      	ldr	r3, [pc, #476]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x2d4>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d060      	beq.n	800142c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x314>
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	2b0c      	cmp	r3, #12
 8001374:	d119      	bne.n	80013aa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d116      	bne.n	80013aa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137c:	4b6b      	ldr	r3, [pc, #428]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_OscConfig+0x32c>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e2c2      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001394:	4b65      	ldr	r3, [pc, #404]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	4962      	ldr	r1, [pc, #392]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a8:	e040      	b.n	800142c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d023      	beq.n	80013fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b2:	4b5e      	ldr	r3, [pc, #376]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a5d      	ldr	r2, [pc, #372]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fb73 	bl	8000aa8 <HAL_GetTick>
 80013c2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fb6f 	bl	8000aa8 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e2a0      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d8:	4b54      	ldr	r3, [pc, #336]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b51      	ldr	r3, [pc, #324]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	494e      	ldr	r1, [pc, #312]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
 80013f8:	e018      	b.n	800142c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b4c      	ldr	r3, [pc, #304]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a4b      	ldr	r2, [pc, #300]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff fb4f 	bl	8000aa8 <HAL_GetTick>
 800140a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fb4b 	bl	8000aa8 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e27c      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001420:	4b42      	ldr	r3, [pc, #264]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 8082 	beq.w	800153e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d05f      	beq.n	8001502 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001448:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	429a      	cmp	r2, r3
 8001456:	d037      	beq.n	80014c8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e254      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 800147c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001480:	4a2a      	ldr	r2, [pc, #168]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800148a:	f7ff fb0d 	bl	8000aa8 <HAL_GetTick>
 800148e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff fb09 	bl	8000aa8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b11      	cmp	r3, #17
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e23a      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ef      	bne.n	8001492 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b8:	f023 0210 	bic.w	r2, r3, #16
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	491a      	ldr	r1, [pc, #104]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fae6 	bl	8000aa8 <HAL_GetTick>
 80014dc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fae2 	bl	8000aa8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b11      	cmp	r3, #17
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e213      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ef      	beq.n	80014e0 <HAL_RCC_OscConfig+0x478>
 8001500:	e01d      	b.n	800153e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001508:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001512:	f7ff fac9 	bl	8000aa8 <HAL_GetTick>
 8001516:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fac5 	bl	8000aa8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b11      	cmp	r3, #17
 8001526:	d903      	bls.n	8001530 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1f6      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
 800152c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001530:	4ba9      	ldr	r3, [pc, #676]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1ed      	bne.n	800151a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80bd 	beq.w	80016c6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001552:	4ba1      	ldr	r3, [pc, #644]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10e      	bne.n	800157c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b9e      	ldr	r3, [pc, #632]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	4a9d      	ldr	r2, [pc, #628]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6593      	str	r3, [r2, #88]	; 0x58
 800156a:	4b9b      	ldr	r3, [pc, #620]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157c:	4b97      	ldr	r3, [pc, #604]	; (80017dc <HAL_RCC_OscConfig+0x774>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d118      	bne.n	80015ba <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001588:	4b94      	ldr	r3, [pc, #592]	; (80017dc <HAL_RCC_OscConfig+0x774>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a93      	ldr	r2, [pc, #588]	; (80017dc <HAL_RCC_OscConfig+0x774>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001594:	f7ff fa88 	bl	8000aa8 <HAL_GetTick>
 8001598:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159c:	f7ff fa84 	bl	8000aa8 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1b5      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ae:	4b8b      	ldr	r3, [pc, #556]	; (80017dc <HAL_RCC_OscConfig+0x774>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d02c      	beq.n	8001620 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80015c6:	4b84      	ldr	r3, [pc, #528]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80015c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d8:	497f      	ldr	r1, [pc, #508]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d010      	beq.n	800160e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015ec:	4b7a      	ldr	r3, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f2:	4a79      	ldr	r2, [pc, #484]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015fc:	4b76      	ldr	r3, [pc, #472]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	4a75      	ldr	r2, [pc, #468]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160c:	e018      	b.n	8001640 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800160e:	4b72      	ldr	r3, [pc, #456]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001614:	4a70      	ldr	r2, [pc, #448]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800161e:	e00f      	b.n	8001640 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001620:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001626:	4a6c      	ldr	r2, [pc, #432]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001630:	4b69      	ldr	r3, [pc, #420]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001636:	4a68      	ldr	r2, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d016      	beq.n	8001676 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fa2e 	bl	8000aa8 <HAL_GetTick>
 800164c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800164e:	e00a      	b.n	8001666 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fa2a 	bl	8000aa8 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e159      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001666:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ed      	beq.n	8001650 <HAL_RCC_OscConfig+0x5e8>
 8001674:	e01d      	b.n	80016b2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fa17 	bl	8000aa8 <HAL_GetTick>
 800167a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff fa13 	bl	8000aa8 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e142      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ed      	bne.n	800167e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80016a2:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80016a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a8:	4a4b      	ldr	r2, [pc, #300]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80016aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d105      	bne.n	80016c6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80016c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d03c      	beq.n	800174c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d01c      	beq.n	8001714 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80016dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e0:	4a3d      	ldr	r2, [pc, #244]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff f9dd 	bl	8000aa8 <HAL_GetTick>
 80016ee:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f2:	f7ff f9d9 	bl	8000aa8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e10a      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0ef      	beq.n	80016f2 <HAL_RCC_OscConfig+0x68a>
 8001712:	e01b      	b.n	800174c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800171a:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff f9c0 	bl	8000aa8 <HAL_GetTick>
 8001728:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800172c:	f7ff f9bc 	bl	8000aa8 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0ed      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ef      	bne.n	800172c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80e1 	beq.w	8001918 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	2b02      	cmp	r3, #2
 800175c:	f040 80b5 	bne.w	80018ca <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0203 	and.w	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	429a      	cmp	r2, r3
 8001772:	d124      	bne.n	80017be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177e:	3b01      	subs	r3, #1
 8001780:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d11b      	bne.n	80017be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d113      	bne.n	80017be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	3b01      	subs	r3, #1
 80017a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d109      	bne.n	80017be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d05f      	beq.n	800187e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d05a      	beq.n	800187a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <HAL_RCC_OscConfig+0x770>)
 80017ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017d0:	f7ff f96a 	bl	8000aa8 <HAL_GetTick>
 80017d4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d6:	e00c      	b.n	80017f2 <HAL_RCC_OscConfig+0x78a>
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff f962 	bl	8000aa8 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e093      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	4b49      	ldr	r3, [pc, #292]	; (8001928 <HAL_RCC_OscConfig+0x8c0>)
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800180e:	3a01      	subs	r2, #1
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001818:	0212      	lsls	r2, r2, #8
 800181a:	4311      	orrs	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001820:	0852      	lsrs	r2, r2, #1
 8001822:	3a01      	subs	r2, #1
 8001824:	0552      	lsls	r2, r2, #21
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800182c:	0852      	lsrs	r2, r2, #1
 800182e:	3a01      	subs	r2, #1
 8001830:	0652      	lsls	r2, r2, #25
 8001832:	430a      	orrs	r2, r1
 8001834:	493b      	ldr	r1, [pc, #236]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800183a:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a39      	ldr	r2, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 8001840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001844:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	4a36      	ldr	r2, [pc, #216]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 800184c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001850:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001852:	f7ff f929 	bl	8000aa8 <HAL_GetTick>
 8001856:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff f925 	bl	8000aa8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e056      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001878:	e04e      	b.n	8001918 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e04d      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d146      	bne.n	8001918 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a25      	ldr	r2, [pc, #148]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 8001890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001894:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 800189c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a2:	f7ff f901 	bl	8000aa8 <HAL_GetTick>
 80018a6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff f8fd 	bl	8000aa8 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e02e      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x842>
 80018c8:	e026      	b.n	8001918 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	2b0c      	cmp	r3, #12
 80018ce:	d021      	beq.n	8001914 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a13      	ldr	r2, [pc, #76]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 80018d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f8e4 	bl	8000aa8 <HAL_GetTick>
 80018e0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff f8e0 	bl	8000aa8 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e011      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_RCC_OscConfig+0x8bc>)
 8001908:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800190c:	f023 0303 	bic.w	r3, r3, #3
 8001910:	60d3      	str	r3, [r2, #12]
 8001912:	e001      	b.n	8001918 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	f99f808c 	.word	0xf99f808c

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0e7      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b72      	ldr	r3, [pc, #456]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4970      	ldr	r1, [pc, #448]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b6e      	ldr	r3, [pc, #440]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0cf      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d010      	beq.n	800199e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001988:	429a      	cmp	r2, r3
 800198a:	d908      	bls.n	800199e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4960      	ldr	r1, [pc, #384]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d04c      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d121      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0a6      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ca:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e09a      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e08e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e086      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4943      	ldr	r1, [pc, #268]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a14:	f7ff f848 	bl	8000aa8 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff f844 	bl	8000aa8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e06e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d010      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d208      	bcs.n	8001a72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	492b      	ldr	r1, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d210      	bcs.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 0207 	bic.w	r2, r3, #7
 8001a88:	4923      	ldr	r1, [pc, #140]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e036      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4918      	ldr	r1, [pc, #96]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4910      	ldr	r1, [pc, #64]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae0:	f000 f824 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	490b      	ldr	r1, [pc, #44]	; (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1fc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe ff7f 	bl	8000a08 <HAL_InitTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	080033f4 	.word	0x080033f4
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d121      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d11e      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e005      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b88:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e004      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d134      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d003      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001bd0:	e005      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd4:	617b      	str	r3, [r7, #20]
      break;
 8001bd6:	e005      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bda:	617b      	str	r3, [r7, #20]
      break;
 8001bdc:	e002      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	617b      	str	r3, [r7, #20]
      break;
 8001be2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	3301      	adds	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0e5b      	lsrs	r3, r3, #25
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	3301      	adds	r3, #1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c24:	69bb      	ldr	r3, [r7, #24]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	0800340c 	.word	0x0800340c
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	007a1200 	.word	0x007a1200

08001c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000000 	.word	0x20000000

08001c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c60:	f7ff fff0 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4904      	ldr	r1, [pc, #16]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08003404 	.word	0x08003404

08001c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c8c:	f7ff ffda 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0adb      	lsrs	r3, r3, #11
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08003404 	.word	0x08003404

08001cb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ccc:	f7ff f968 	bl	8000fa0 <HAL_PWREx_GetVoltageRange>
 8001cd0:	6178      	str	r0, [r7, #20]
 8001cd2:	e014      	b.n	8001cfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cec:	f7ff f958 	bl	8000fa0 <HAL_PWREx_GetVoltageRange>
 8001cf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d04:	d10b      	bne.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b80      	cmp	r3, #128	; 0x80
 8001d0a:	d919      	bls.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d10:	d902      	bls.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d12:	2302      	movs	r3, #2
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	e013      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d18:	2301      	movs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e010      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d902      	bls.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d24:	2303      	movs	r3, #3
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e00a      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d102      	bne.n	8001d36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e004      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b70      	cmp	r3, #112	; 0x70
 8001d3a:	d101      	bne.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0207 	bic.w	r2, r3, #7
 8001d48:	4909      	ldr	r1, [pc, #36]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40022000 	.word	0x40022000

08001d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d80:	2300      	movs	r3, #0
 8001d82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 809e 	beq.w	8001ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001da6:	2300      	movs	r3, #0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	4a3f      	ldr	r2, [pc, #252]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db6:	6593      	str	r3, [r2, #88]	; 0x58
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc8:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a39      	ldr	r2, [pc, #228]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dd4:	f7fe fe68 	bl	8000aa8 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dda:	e009      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ddc:	f7fe fe64 	bl	8000aa8 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d902      	bls.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	74fb      	strb	r3, [r7, #19]
        break;
 8001dee:	e005      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001df0:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ef      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001dfc:	7cfb      	ldrb	r3, [r7, #19]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d15a      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01e      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e30:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e4a:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d016      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fe24 	bl	8000aa8 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e62:	e00b      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e64:	f7fe fe20 	bl	8000aa8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d902      	bls.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	74fb      	strb	r3, [r7, #19]
            break;
 8001e7a:	e006      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ec      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001e8a:	7cfb      	ldrb	r3, [r7, #19]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4904      	ldr	r1, [pc, #16]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ea6:	e009      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	74bb      	strb	r3, [r7, #18]
 8001eac:	e006      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ebc:	7c7b      	ldrb	r3, [r7, #17]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b6e      	ldr	r3, [pc, #440]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4a6d      	ldr	r2, [pc, #436]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eda:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	f023 0203 	bic.w	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4964      	ldr	r1, [pc, #400]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001efc:	4b5f      	ldr	r3, [pc, #380]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f023 020c 	bic.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	495c      	ldr	r1, [pc, #368]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f1e:	4b57      	ldr	r3, [pc, #348]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4953      	ldr	r1, [pc, #332]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f40:	4b4e      	ldr	r3, [pc, #312]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	494b      	ldr	r1, [pc, #300]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f62:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4942      	ldr	r1, [pc, #264]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f84:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	493a      	ldr	r1, [pc, #232]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fa6:	4b35      	ldr	r3, [pc, #212]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	4931      	ldr	r1, [pc, #196]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	4929      	ldr	r1, [pc, #164]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	4920      	ldr	r1, [pc, #128]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d015      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	4918      	ldr	r1, [pc, #96]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800202a:	d105      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002036:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	490a      	ldr	r1, [pc, #40]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002062:	d105      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800206a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002070:	7cbb      	ldrb	r3, [r7, #18]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e040      	b.n	8002114 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fb86 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2224      	movs	r2, #36	; 0x24
 80020ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8c0 	bl	8002244 <UART_SetConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e022      	b.n	8002114 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fb0e 	bl	80026f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fb95 	bl	800283c <UART_CheckIdleState>
 8002112:	4603      	mov	r3, r0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002130:	2b20      	cmp	r3, #32
 8002132:	f040 8082 	bne.w	800223a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_UART_Transmit+0x26>
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e07a      	b.n	800223c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_UART_Transmit+0x38>
 8002150:	2302      	movs	r3, #2
 8002152:	e073      	b.n	800223c <HAL_UART_Transmit+0x120>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2221      	movs	r2, #33	; 0x21
 8002168:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800216a:	f7fe fc9d 	bl	8000aa8 <HAL_GetTick>
 800216e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002188:	d108      	bne.n	800219c <HAL_UART_Transmit+0x80>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d104      	bne.n	800219c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	e003      	b.n	80021a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80021ac:	e02d      	b.n	800220a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fb88 	bl	80028ce <UART_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e039      	b.n	800223c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10b      	bne.n	80021e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021da:	b292      	uxth	r2, r2
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	3302      	adds	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	e008      	b.n	80021f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b292      	uxth	r2, r2
 80021f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1cb      	bne.n	80021ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2200      	movs	r2, #0
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fb54 	bl	80028ce <UART_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e005      	b.n	800223c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800223a:	2302      	movs	r3, #2
  }
}
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002248:	b08a      	sub	sp, #40	; 0x28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	431a      	orrs	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4313      	orrs	r3, r2
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b9e      	ldr	r3, [pc, #632]	; (80024ec <UART_SetConfig+0x2a8>)
 8002274:	4013      	ands	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227c:	430b      	orrs	r3, r1
 800227e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a93      	ldr	r2, [pc, #588]	; (80024f0 <UART_SetConfig+0x2ac>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d004      	beq.n	80022b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	4313      	orrs	r3, r2
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a8a      	ldr	r2, [pc, #552]	; (80024f4 <UART_SetConfig+0x2b0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d126      	bne.n	800231c <UART_SetConfig+0xd8>
 80022ce:	4b8a      	ldr	r3, [pc, #552]	; (80024f8 <UART_SetConfig+0x2b4>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d81b      	bhi.n	8002314 <UART_SetConfig+0xd0>
 80022dc:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <UART_SetConfig+0xa0>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	08002305 	.word	0x08002305
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	0800230d 	.word	0x0800230d
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022fa:	e0ab      	b.n	8002454 <UART_SetConfig+0x210>
 80022fc:	2302      	movs	r3, #2
 80022fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002302:	e0a7      	b.n	8002454 <UART_SetConfig+0x210>
 8002304:	2304      	movs	r3, #4
 8002306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800230a:	e0a3      	b.n	8002454 <UART_SetConfig+0x210>
 800230c:	2308      	movs	r3, #8
 800230e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002312:	e09f      	b.n	8002454 <UART_SetConfig+0x210>
 8002314:	2310      	movs	r3, #16
 8002316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800231a:	e09b      	b.n	8002454 <UART_SetConfig+0x210>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a76      	ldr	r2, [pc, #472]	; (80024fc <UART_SetConfig+0x2b8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d138      	bne.n	8002398 <UART_SetConfig+0x154>
 8002326:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <UART_SetConfig+0x2b4>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d82d      	bhi.n	8002390 <UART_SetConfig+0x14c>
 8002334:	a201      	add	r2, pc, #4	; (adr r2, 800233c <UART_SetConfig+0xf8>)
 8002336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233a:	bf00      	nop
 800233c:	08002371 	.word	0x08002371
 8002340:	08002391 	.word	0x08002391
 8002344:	08002391 	.word	0x08002391
 8002348:	08002391 	.word	0x08002391
 800234c:	08002381 	.word	0x08002381
 8002350:	08002391 	.word	0x08002391
 8002354:	08002391 	.word	0x08002391
 8002358:	08002391 	.word	0x08002391
 800235c:	08002379 	.word	0x08002379
 8002360:	08002391 	.word	0x08002391
 8002364:	08002391 	.word	0x08002391
 8002368:	08002391 	.word	0x08002391
 800236c:	08002389 	.word	0x08002389
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002376:	e06d      	b.n	8002454 <UART_SetConfig+0x210>
 8002378:	2302      	movs	r3, #2
 800237a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800237e:	e069      	b.n	8002454 <UART_SetConfig+0x210>
 8002380:	2304      	movs	r3, #4
 8002382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002386:	e065      	b.n	8002454 <UART_SetConfig+0x210>
 8002388:	2308      	movs	r3, #8
 800238a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800238e:	e061      	b.n	8002454 <UART_SetConfig+0x210>
 8002390:	2310      	movs	r3, #16
 8002392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002396:	e05d      	b.n	8002454 <UART_SetConfig+0x210>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <UART_SetConfig+0x2bc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d125      	bne.n	80023ee <UART_SetConfig+0x1aa>
 80023a2:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <UART_SetConfig+0x2b4>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023ac:	2b30      	cmp	r3, #48	; 0x30
 80023ae:	d016      	beq.n	80023de <UART_SetConfig+0x19a>
 80023b0:	2b30      	cmp	r3, #48	; 0x30
 80023b2:	d818      	bhi.n	80023e6 <UART_SetConfig+0x1a2>
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d00a      	beq.n	80023ce <UART_SetConfig+0x18a>
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d814      	bhi.n	80023e6 <UART_SetConfig+0x1a2>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <UART_SetConfig+0x182>
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d008      	beq.n	80023d6 <UART_SetConfig+0x192>
 80023c4:	e00f      	b.n	80023e6 <UART_SetConfig+0x1a2>
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023cc:	e042      	b.n	8002454 <UART_SetConfig+0x210>
 80023ce:	2302      	movs	r3, #2
 80023d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023d4:	e03e      	b.n	8002454 <UART_SetConfig+0x210>
 80023d6:	2304      	movs	r3, #4
 80023d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023dc:	e03a      	b.n	8002454 <UART_SetConfig+0x210>
 80023de:	2308      	movs	r3, #8
 80023e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023e4:	e036      	b.n	8002454 <UART_SetConfig+0x210>
 80023e6:	2310      	movs	r3, #16
 80023e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023ec:	e032      	b.n	8002454 <UART_SetConfig+0x210>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a3f      	ldr	r2, [pc, #252]	; (80024f0 <UART_SetConfig+0x2ac>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d12a      	bne.n	800244e <UART_SetConfig+0x20a>
 80023f8:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <UART_SetConfig+0x2b4>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002402:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002406:	d01a      	beq.n	800243e <UART_SetConfig+0x1fa>
 8002408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800240c:	d81b      	bhi.n	8002446 <UART_SetConfig+0x202>
 800240e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002412:	d00c      	beq.n	800242e <UART_SetConfig+0x1ea>
 8002414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002418:	d815      	bhi.n	8002446 <UART_SetConfig+0x202>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <UART_SetConfig+0x1e2>
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002422:	d008      	beq.n	8002436 <UART_SetConfig+0x1f2>
 8002424:	e00f      	b.n	8002446 <UART_SetConfig+0x202>
 8002426:	2300      	movs	r3, #0
 8002428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800242c:	e012      	b.n	8002454 <UART_SetConfig+0x210>
 800242e:	2302      	movs	r3, #2
 8002430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002434:	e00e      	b.n	8002454 <UART_SetConfig+0x210>
 8002436:	2304      	movs	r3, #4
 8002438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800243c:	e00a      	b.n	8002454 <UART_SetConfig+0x210>
 800243e:	2308      	movs	r3, #8
 8002440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002444:	e006      	b.n	8002454 <UART_SetConfig+0x210>
 8002446:	2310      	movs	r3, #16
 8002448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800244c:	e002      	b.n	8002454 <UART_SetConfig+0x210>
 800244e:	2310      	movs	r3, #16
 8002450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <UART_SetConfig+0x2ac>)
 800245a:	4293      	cmp	r3, r2
 800245c:	f040 808a 	bne.w	8002574 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002464:	2b08      	cmp	r3, #8
 8002466:	d824      	bhi.n	80024b2 <UART_SetConfig+0x26e>
 8002468:	a201      	add	r2, pc, #4	; (adr r2, 8002470 <UART_SetConfig+0x22c>)
 800246a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246e:	bf00      	nop
 8002470:	08002495 	.word	0x08002495
 8002474:	080024b3 	.word	0x080024b3
 8002478:	0800249d 	.word	0x0800249d
 800247c:	080024b3 	.word	0x080024b3
 8002480:	080024a3 	.word	0x080024a3
 8002484:	080024b3 	.word	0x080024b3
 8002488:	080024b3 	.word	0x080024b3
 800248c:	080024b3 	.word	0x080024b3
 8002490:	080024ab 	.word	0x080024ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002494:	f7ff fbe2 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002498:	61f8      	str	r0, [r7, #28]
        break;
 800249a:	e010      	b.n	80024be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <UART_SetConfig+0x2c0>)
 800249e:	61fb      	str	r3, [r7, #28]
        break;
 80024a0:	e00d      	b.n	80024be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024a2:	f7ff fb43 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 80024a6:	61f8      	str	r0, [r7, #28]
        break;
 80024a8:	e009      	b.n	80024be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ae:	61fb      	str	r3, [r7, #28]
        break;
 80024b0:	e005      	b.n	80024be <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80024bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8109 	beq.w	80026d8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d305      	bcc.n	80024e2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d912      	bls.n	8002508 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80024e8:	e0f6      	b.n	80026d8 <UART_SetConfig+0x494>
 80024ea:	bf00      	nop
 80024ec:	efff69f3 	.word	0xefff69f3
 80024f0:	40008000 	.word	0x40008000
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40004400 	.word	0x40004400
 8002500:	40004800 	.word	0x40004800
 8002504:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2200      	movs	r2, #0
 800250c:	461c      	mov	r4, r3
 800250e:	4615      	mov	r5, r2
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	022b      	lsls	r3, r5, #8
 800251a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800251e:	0222      	lsls	r2, r4, #8
 8002520:	68f9      	ldr	r1, [r7, #12]
 8002522:	6849      	ldr	r1, [r1, #4]
 8002524:	0849      	lsrs	r1, r1, #1
 8002526:	2000      	movs	r0, #0
 8002528:	4688      	mov	r8, r1
 800252a:	4681      	mov	r9, r0
 800252c:	eb12 0a08 	adds.w	sl, r2, r8
 8002530:	eb43 0b09 	adc.w	fp, r3, r9
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002542:	4650      	mov	r0, sl
 8002544:	4659      	mov	r1, fp
 8002546:	f7fd fe93 	bl	8000270 <__aeabi_uldivmod>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4613      	mov	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002558:	d308      	bcc.n	800256c <UART_SetConfig+0x328>
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002560:	d204      	bcs.n	800256c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	e0b5      	b.n	80026d8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002572:	e0b1      	b.n	80026d8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800257c:	d15d      	bne.n	800263a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800257e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002582:	2b08      	cmp	r3, #8
 8002584:	d827      	bhi.n	80025d6 <UART_SetConfig+0x392>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <UART_SetConfig+0x348>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	080025b1 	.word	0x080025b1
 8002590:	080025b9 	.word	0x080025b9
 8002594:	080025c1 	.word	0x080025c1
 8002598:	080025d7 	.word	0x080025d7
 800259c:	080025c7 	.word	0x080025c7
 80025a0:	080025d7 	.word	0x080025d7
 80025a4:	080025d7 	.word	0x080025d7
 80025a8:	080025d7 	.word	0x080025d7
 80025ac:	080025cf 	.word	0x080025cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b0:	f7ff fb54 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 80025b4:	61f8      	str	r0, [r7, #28]
        break;
 80025b6:	e014      	b.n	80025e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025b8:	f7ff fb66 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 80025bc:	61f8      	str	r0, [r7, #28]
        break;
 80025be:	e010      	b.n	80025e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <UART_SetConfig+0x4b0>)
 80025c2:	61fb      	str	r3, [r7, #28]
        break;
 80025c4:	e00d      	b.n	80025e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025c6:	f7ff fab1 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 80025ca:	61f8      	str	r0, [r7, #28]
        break;
 80025cc:	e009      	b.n	80025e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d2:	61fb      	str	r3, [r7, #28]
        break;
 80025d4:	e005      	b.n	80025e2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80025e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d077      	beq.n	80026d8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005a      	lsls	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	441a      	add	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d916      	bls.n	8002632 <UART_SetConfig+0x3ee>
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260a:	d212      	bcs.n	8002632 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	b29b      	uxth	r3, r3
 8002610:	f023 030f 	bic.w	r3, r3, #15
 8002614:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	b29a      	uxth	r2, r3
 8002622:	8afb      	ldrh	r3, [r7, #22]
 8002624:	4313      	orrs	r3, r2
 8002626:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	8afa      	ldrh	r2, [r7, #22]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	e052      	b.n	80026d8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002638:	e04e      	b.n	80026d8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800263a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800263e:	2b08      	cmp	r3, #8
 8002640:	d827      	bhi.n	8002692 <UART_SetConfig+0x44e>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <UART_SetConfig+0x404>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	0800266d 	.word	0x0800266d
 800264c:	08002675 	.word	0x08002675
 8002650:	0800267d 	.word	0x0800267d
 8002654:	08002693 	.word	0x08002693
 8002658:	08002683 	.word	0x08002683
 800265c:	08002693 	.word	0x08002693
 8002660:	08002693 	.word	0x08002693
 8002664:	08002693 	.word	0x08002693
 8002668:	0800268b 	.word	0x0800268b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800266c:	f7ff faf6 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002670:	61f8      	str	r0, [r7, #28]
        break;
 8002672:	e014      	b.n	800269e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002674:	f7ff fb08 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 8002678:	61f8      	str	r0, [r7, #28]
        break;
 800267a:	e010      	b.n	800269e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <UART_SetConfig+0x4b0>)
 800267e:	61fb      	str	r3, [r7, #28]
        break;
 8002680:	e00d      	b.n	800269e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002682:	f7ff fa53 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8002686:	61f8      	str	r0, [r7, #28]
        break;
 8002688:	e009      	b.n	800269e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800268a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268e:	61fb      	str	r3, [r7, #28]
        break;
 8002690:	e005      	b.n	800269e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800269c:	bf00      	nop
    }

    if (pclk != 0U)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d019      	beq.n	80026d8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	085a      	lsrs	r2, r3, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	441a      	add	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	d909      	bls.n	80026d2 <UART_SetConfig+0x48e>
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d205      	bcs.n	80026d2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	e002      	b.n	80026d8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80026e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026f2:	bf00      	nop
 80026f4:	00f42400 	.word	0x00f42400

080026f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01a      	beq.n	800280e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f6:	d10a      	bne.n	800280e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	605a      	str	r2, [r3, #4]
  }
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af02      	add	r7, sp, #8
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800284c:	f7fe f92c 	bl	8000aa8 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b08      	cmp	r3, #8
 800285e:	d10e      	bne.n	800287e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f82d 	bl	80028ce <UART_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e023      	b.n	80028c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b04      	cmp	r3, #4
 800288a:	d10e      	bne.n	80028aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800288c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f817 	bl	80028ce <UART_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e00d      	b.n	80028c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b09c      	sub	sp, #112	; 0x70
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4613      	mov	r3, r2
 80028dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028de:	e0a5      	b.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028e6:	f000 80a1 	beq.w	8002a2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7fe f8dd 	bl	8000aa8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <UART_WaitOnFlagUntilTimeout+0x32>
 80028fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d13e      	bne.n	800297e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800290e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002910:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002914:	667b      	str	r3, [r7, #100]	; 0x64
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800291e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002920:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800292c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e6      	bne.n	8002900 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3308      	adds	r3, #8
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	663b      	str	r3, [r7, #96]	; 0x60
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3308      	adds	r3, #8
 8002950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002952:	64ba      	str	r2, [r7, #72]	; 0x48
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002956:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1e5      	bne.n	8002932 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e067      	b.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d04f      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299a:	d147      	bne.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	e853 3f00 	ldrex	r3, [r3]
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
 80029c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029cc:	e841 2300 	strex	r3, r2, [r1]
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e6      	bne.n	80029a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3308      	adds	r3, #8
 80029de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	613b      	str	r3, [r7, #16]
   return(result);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3308      	adds	r3, #8
 80029f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029f8:	623a      	str	r2, [r7, #32]
 80029fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	69f9      	ldr	r1, [r7, #28]
 80029fe:	6a3a      	ldr	r2, [r7, #32]
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e5      	bne.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e010      	b.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	f43f af4a 	beq.w	80028e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3770      	adds	r7, #112	; 0x70
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <__errno>:
 8002a58:	4b01      	ldr	r3, [pc, #4]	; (8002a60 <__errno+0x8>)
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	2000000c 	.word	0x2000000c

08002a64 <__libc_init_array>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	4d0d      	ldr	r5, [pc, #52]	; (8002a9c <__libc_init_array+0x38>)
 8002a68:	4c0d      	ldr	r4, [pc, #52]	; (8002aa0 <__libc_init_array+0x3c>)
 8002a6a:	1b64      	subs	r4, r4, r5
 8002a6c:	10a4      	asrs	r4, r4, #2
 8002a6e:	2600      	movs	r6, #0
 8002a70:	42a6      	cmp	r6, r4
 8002a72:	d109      	bne.n	8002a88 <__libc_init_array+0x24>
 8002a74:	4d0b      	ldr	r5, [pc, #44]	; (8002aa4 <__libc_init_array+0x40>)
 8002a76:	4c0c      	ldr	r4, [pc, #48]	; (8002aa8 <__libc_init_array+0x44>)
 8002a78:	f000 fca8 	bl	80033cc <_init>
 8002a7c:	1b64      	subs	r4, r4, r5
 8002a7e:	10a4      	asrs	r4, r4, #2
 8002a80:	2600      	movs	r6, #0
 8002a82:	42a6      	cmp	r6, r4
 8002a84:	d105      	bne.n	8002a92 <__libc_init_array+0x2e>
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
 8002a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8c:	4798      	blx	r3
 8002a8e:	3601      	adds	r6, #1
 8002a90:	e7ee      	b.n	8002a70 <__libc_init_array+0xc>
 8002a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a96:	4798      	blx	r3
 8002a98:	3601      	adds	r6, #1
 8002a9a:	e7f2      	b.n	8002a82 <__libc_init_array+0x1e>
 8002a9c:	08003478 	.word	0x08003478
 8002aa0:	08003478 	.word	0x08003478
 8002aa4:	08003478 	.word	0x08003478
 8002aa8:	0800347c 	.word	0x0800347c

08002aac <memset>:
 8002aac:	4402      	add	r2, r0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d100      	bne.n	8002ab6 <memset+0xa>
 8002ab4:	4770      	bx	lr
 8002ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aba:	e7f9      	b.n	8002ab0 <memset+0x4>

08002abc <_vsniprintf_r>:
 8002abc:	b530      	push	{r4, r5, lr}
 8002abe:	4614      	mov	r4, r2
 8002ac0:	2c00      	cmp	r4, #0
 8002ac2:	b09b      	sub	sp, #108	; 0x6c
 8002ac4:	4605      	mov	r5, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	da05      	bge.n	8002ad6 <_vsniprintf_r+0x1a>
 8002aca:	238b      	movs	r3, #139	; 0x8b
 8002acc:	6003      	str	r3, [r0, #0]
 8002ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ad2:	b01b      	add	sp, #108	; 0x6c
 8002ad4:	bd30      	pop	{r4, r5, pc}
 8002ad6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002ada:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002ade:	bf14      	ite	ne
 8002ae0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002ae4:	4623      	moveq	r3, r4
 8002ae6:	9302      	str	r3, [sp, #8]
 8002ae8:	9305      	str	r3, [sp, #20]
 8002aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aee:	9100      	str	r1, [sp, #0]
 8002af0:	9104      	str	r1, [sp, #16]
 8002af2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002af6:	4669      	mov	r1, sp
 8002af8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002afa:	f000 f875 	bl	8002be8 <_svfiprintf_r>
 8002afe:	1c43      	adds	r3, r0, #1
 8002b00:	bfbc      	itt	lt
 8002b02:	238b      	movlt	r3, #139	; 0x8b
 8002b04:	602b      	strlt	r3, [r5, #0]
 8002b06:	2c00      	cmp	r4, #0
 8002b08:	d0e3      	beq.n	8002ad2 <_vsniprintf_r+0x16>
 8002b0a:	9b00      	ldr	r3, [sp, #0]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e7df      	b.n	8002ad2 <_vsniprintf_r+0x16>
	...

08002b14 <vsniprintf>:
 8002b14:	b507      	push	{r0, r1, r2, lr}
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	460a      	mov	r2, r1
 8002b1c:	4601      	mov	r1, r0
 8002b1e:	4803      	ldr	r0, [pc, #12]	; (8002b2c <vsniprintf+0x18>)
 8002b20:	6800      	ldr	r0, [r0, #0]
 8002b22:	f7ff ffcb 	bl	8002abc <_vsniprintf_r>
 8002b26:	b003      	add	sp, #12
 8002b28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b2c:	2000000c 	.word	0x2000000c

08002b30 <__ssputs_r>:
 8002b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b34:	688e      	ldr	r6, [r1, #8]
 8002b36:	429e      	cmp	r6, r3
 8002b38:	4682      	mov	sl, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	4690      	mov	r8, r2
 8002b3e:	461f      	mov	r7, r3
 8002b40:	d838      	bhi.n	8002bb4 <__ssputs_r+0x84>
 8002b42:	898a      	ldrh	r2, [r1, #12]
 8002b44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b48:	d032      	beq.n	8002bb0 <__ssputs_r+0x80>
 8002b4a:	6825      	ldr	r5, [r4, #0]
 8002b4c:	6909      	ldr	r1, [r1, #16]
 8002b4e:	eba5 0901 	sub.w	r9, r5, r1
 8002b52:	6965      	ldr	r5, [r4, #20]
 8002b54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	444b      	add	r3, r9
 8002b60:	106d      	asrs	r5, r5, #1
 8002b62:	429d      	cmp	r5, r3
 8002b64:	bf38      	it	cc
 8002b66:	461d      	movcc	r5, r3
 8002b68:	0553      	lsls	r3, r2, #21
 8002b6a:	d531      	bpl.n	8002bd0 <__ssputs_r+0xa0>
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	f000 fb63 	bl	8003238 <_malloc_r>
 8002b72:	4606      	mov	r6, r0
 8002b74:	b950      	cbnz	r0, 8002b8c <__ssputs_r+0x5c>
 8002b76:	230c      	movs	r3, #12
 8002b78:	f8ca 3000 	str.w	r3, [sl]
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b82:	81a3      	strh	r3, [r4, #12]
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8c:	6921      	ldr	r1, [r4, #16]
 8002b8e:	464a      	mov	r2, r9
 8002b90:	f000 fabe 	bl	8003110 <memcpy>
 8002b94:	89a3      	ldrh	r3, [r4, #12]
 8002b96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9e:	81a3      	strh	r3, [r4, #12]
 8002ba0:	6126      	str	r6, [r4, #16]
 8002ba2:	6165      	str	r5, [r4, #20]
 8002ba4:	444e      	add	r6, r9
 8002ba6:	eba5 0509 	sub.w	r5, r5, r9
 8002baa:	6026      	str	r6, [r4, #0]
 8002bac:	60a5      	str	r5, [r4, #8]
 8002bae:	463e      	mov	r6, r7
 8002bb0:	42be      	cmp	r6, r7
 8002bb2:	d900      	bls.n	8002bb6 <__ssputs_r+0x86>
 8002bb4:	463e      	mov	r6, r7
 8002bb6:	6820      	ldr	r0, [r4, #0]
 8002bb8:	4632      	mov	r2, r6
 8002bba:	4641      	mov	r1, r8
 8002bbc:	f000 fab6 	bl	800312c <memmove>
 8002bc0:	68a3      	ldr	r3, [r4, #8]
 8002bc2:	1b9b      	subs	r3, r3, r6
 8002bc4:	60a3      	str	r3, [r4, #8]
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	4433      	add	r3, r6
 8002bca:	6023      	str	r3, [r4, #0]
 8002bcc:	2000      	movs	r0, #0
 8002bce:	e7db      	b.n	8002b88 <__ssputs_r+0x58>
 8002bd0:	462a      	mov	r2, r5
 8002bd2:	f000 fba5 	bl	8003320 <_realloc_r>
 8002bd6:	4606      	mov	r6, r0
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d1e1      	bne.n	8002ba0 <__ssputs_r+0x70>
 8002bdc:	6921      	ldr	r1, [r4, #16]
 8002bde:	4650      	mov	r0, sl
 8002be0:	f000 fabe 	bl	8003160 <_free_r>
 8002be4:	e7c7      	b.n	8002b76 <__ssputs_r+0x46>
	...

08002be8 <_svfiprintf_r>:
 8002be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bec:	4698      	mov	r8, r3
 8002bee:	898b      	ldrh	r3, [r1, #12]
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	b09d      	sub	sp, #116	; 0x74
 8002bf4:	4607      	mov	r7, r0
 8002bf6:	460d      	mov	r5, r1
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	d50e      	bpl.n	8002c1a <_svfiprintf_r+0x32>
 8002bfc:	690b      	ldr	r3, [r1, #16]
 8002bfe:	b963      	cbnz	r3, 8002c1a <_svfiprintf_r+0x32>
 8002c00:	2140      	movs	r1, #64	; 0x40
 8002c02:	f000 fb19 	bl	8003238 <_malloc_r>
 8002c06:	6028      	str	r0, [r5, #0]
 8002c08:	6128      	str	r0, [r5, #16]
 8002c0a:	b920      	cbnz	r0, 8002c16 <_svfiprintf_r+0x2e>
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c14:	e0d1      	b.n	8002dba <_svfiprintf_r+0x1d2>
 8002c16:	2340      	movs	r3, #64	; 0x40
 8002c18:	616b      	str	r3, [r5, #20]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1e:	2320      	movs	r3, #32
 8002c20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c28:	2330      	movs	r3, #48	; 0x30
 8002c2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002dd4 <_svfiprintf_r+0x1ec>
 8002c2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c32:	f04f 0901 	mov.w	r9, #1
 8002c36:	4623      	mov	r3, r4
 8002c38:	469a      	mov	sl, r3
 8002c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c3e:	b10a      	cbz	r2, 8002c44 <_svfiprintf_r+0x5c>
 8002c40:	2a25      	cmp	r2, #37	; 0x25
 8002c42:	d1f9      	bne.n	8002c38 <_svfiprintf_r+0x50>
 8002c44:	ebba 0b04 	subs.w	fp, sl, r4
 8002c48:	d00b      	beq.n	8002c62 <_svfiprintf_r+0x7a>
 8002c4a:	465b      	mov	r3, fp
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	4638      	mov	r0, r7
 8002c52:	f7ff ff6d 	bl	8002b30 <__ssputs_r>
 8002c56:	3001      	adds	r0, #1
 8002c58:	f000 80aa 	beq.w	8002db0 <_svfiprintf_r+0x1c8>
 8002c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c5e:	445a      	add	r2, fp
 8002c60:	9209      	str	r2, [sp, #36]	; 0x24
 8002c62:	f89a 3000 	ldrb.w	r3, [sl]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80a2 	beq.w	8002db0 <_svfiprintf_r+0x1c8>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c76:	f10a 0a01 	add.w	sl, sl, #1
 8002c7a:	9304      	str	r3, [sp, #16]
 8002c7c:	9307      	str	r3, [sp, #28]
 8002c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c82:	931a      	str	r3, [sp, #104]	; 0x68
 8002c84:	4654      	mov	r4, sl
 8002c86:	2205      	movs	r2, #5
 8002c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c8c:	4851      	ldr	r0, [pc, #324]	; (8002dd4 <_svfiprintf_r+0x1ec>)
 8002c8e:	f7fd fa9f 	bl	80001d0 <memchr>
 8002c92:	9a04      	ldr	r2, [sp, #16]
 8002c94:	b9d8      	cbnz	r0, 8002cce <_svfiprintf_r+0xe6>
 8002c96:	06d0      	lsls	r0, r2, #27
 8002c98:	bf44      	itt	mi
 8002c9a:	2320      	movmi	r3, #32
 8002c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ca0:	0711      	lsls	r1, r2, #28
 8002ca2:	bf44      	itt	mi
 8002ca4:	232b      	movmi	r3, #43	; 0x2b
 8002ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002caa:	f89a 3000 	ldrb.w	r3, [sl]
 8002cae:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb0:	d015      	beq.n	8002cde <_svfiprintf_r+0xf6>
 8002cb2:	9a07      	ldr	r2, [sp, #28]
 8002cb4:	4654      	mov	r4, sl
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f04f 0c0a 	mov.w	ip, #10
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cc2:	3b30      	subs	r3, #48	; 0x30
 8002cc4:	2b09      	cmp	r3, #9
 8002cc6:	d94e      	bls.n	8002d66 <_svfiprintf_r+0x17e>
 8002cc8:	b1b0      	cbz	r0, 8002cf8 <_svfiprintf_r+0x110>
 8002cca:	9207      	str	r2, [sp, #28]
 8002ccc:	e014      	b.n	8002cf8 <_svfiprintf_r+0x110>
 8002cce:	eba0 0308 	sub.w	r3, r0, r8
 8002cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	9304      	str	r3, [sp, #16]
 8002cda:	46a2      	mov	sl, r4
 8002cdc:	e7d2      	b.n	8002c84 <_svfiprintf_r+0x9c>
 8002cde:	9b03      	ldr	r3, [sp, #12]
 8002ce0:	1d19      	adds	r1, r3, #4
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	9103      	str	r1, [sp, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bfbb      	ittet	lt
 8002cea:	425b      	neglt	r3, r3
 8002cec:	f042 0202 	orrlt.w	r2, r2, #2
 8002cf0:	9307      	strge	r3, [sp, #28]
 8002cf2:	9307      	strlt	r3, [sp, #28]
 8002cf4:	bfb8      	it	lt
 8002cf6:	9204      	strlt	r2, [sp, #16]
 8002cf8:	7823      	ldrb	r3, [r4, #0]
 8002cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8002cfc:	d10c      	bne.n	8002d18 <_svfiprintf_r+0x130>
 8002cfe:	7863      	ldrb	r3, [r4, #1]
 8002d00:	2b2a      	cmp	r3, #42	; 0x2a
 8002d02:	d135      	bne.n	8002d70 <_svfiprintf_r+0x188>
 8002d04:	9b03      	ldr	r3, [sp, #12]
 8002d06:	1d1a      	adds	r2, r3, #4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	9203      	str	r2, [sp, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bfb8      	it	lt
 8002d10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d14:	3402      	adds	r4, #2
 8002d16:	9305      	str	r3, [sp, #20]
 8002d18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002de4 <_svfiprintf_r+0x1fc>
 8002d1c:	7821      	ldrb	r1, [r4, #0]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	4650      	mov	r0, sl
 8002d22:	f7fd fa55 	bl	80001d0 <memchr>
 8002d26:	b140      	cbz	r0, 8002d3a <_svfiprintf_r+0x152>
 8002d28:	2340      	movs	r3, #64	; 0x40
 8002d2a:	eba0 000a 	sub.w	r0, r0, sl
 8002d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8002d32:	9b04      	ldr	r3, [sp, #16]
 8002d34:	4303      	orrs	r3, r0
 8002d36:	3401      	adds	r4, #1
 8002d38:	9304      	str	r3, [sp, #16]
 8002d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d3e:	4826      	ldr	r0, [pc, #152]	; (8002dd8 <_svfiprintf_r+0x1f0>)
 8002d40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d44:	2206      	movs	r2, #6
 8002d46:	f7fd fa43 	bl	80001d0 <memchr>
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d038      	beq.n	8002dc0 <_svfiprintf_r+0x1d8>
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <_svfiprintf_r+0x1f4>)
 8002d50:	bb1b      	cbnz	r3, 8002d9a <_svfiprintf_r+0x1b2>
 8002d52:	9b03      	ldr	r3, [sp, #12]
 8002d54:	3307      	adds	r3, #7
 8002d56:	f023 0307 	bic.w	r3, r3, #7
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	9303      	str	r3, [sp, #12]
 8002d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d60:	4433      	add	r3, r6
 8002d62:	9309      	str	r3, [sp, #36]	; 0x24
 8002d64:	e767      	b.n	8002c36 <_svfiprintf_r+0x4e>
 8002d66:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	e7a5      	b.n	8002cbc <_svfiprintf_r+0xd4>
 8002d70:	2300      	movs	r3, #0
 8002d72:	3401      	adds	r4, #1
 8002d74:	9305      	str	r3, [sp, #20]
 8002d76:	4619      	mov	r1, r3
 8002d78:	f04f 0c0a 	mov.w	ip, #10
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d82:	3a30      	subs	r2, #48	; 0x30
 8002d84:	2a09      	cmp	r2, #9
 8002d86:	d903      	bls.n	8002d90 <_svfiprintf_r+0x1a8>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0c5      	beq.n	8002d18 <_svfiprintf_r+0x130>
 8002d8c:	9105      	str	r1, [sp, #20]
 8002d8e:	e7c3      	b.n	8002d18 <_svfiprintf_r+0x130>
 8002d90:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d94:	4604      	mov	r4, r0
 8002d96:	2301      	movs	r3, #1
 8002d98:	e7f0      	b.n	8002d7c <_svfiprintf_r+0x194>
 8002d9a:	ab03      	add	r3, sp, #12
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	462a      	mov	r2, r5
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <_svfiprintf_r+0x1f8>)
 8002da2:	a904      	add	r1, sp, #16
 8002da4:	4638      	mov	r0, r7
 8002da6:	f3af 8000 	nop.w
 8002daa:	1c42      	adds	r2, r0, #1
 8002dac:	4606      	mov	r6, r0
 8002dae:	d1d6      	bne.n	8002d5e <_svfiprintf_r+0x176>
 8002db0:	89ab      	ldrh	r3, [r5, #12]
 8002db2:	065b      	lsls	r3, r3, #25
 8002db4:	f53f af2c 	bmi.w	8002c10 <_svfiprintf_r+0x28>
 8002db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dba:	b01d      	add	sp, #116	; 0x74
 8002dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc0:	ab03      	add	r3, sp, #12
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	462a      	mov	r2, r5
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <_svfiprintf_r+0x1f8>)
 8002dc8:	a904      	add	r1, sp, #16
 8002dca:	4638      	mov	r0, r7
 8002dcc:	f000 f87a 	bl	8002ec4 <_printf_i>
 8002dd0:	e7eb      	b.n	8002daa <_svfiprintf_r+0x1c2>
 8002dd2:	bf00      	nop
 8002dd4:	0800343c 	.word	0x0800343c
 8002dd8:	08003446 	.word	0x08003446
 8002ddc:	00000000 	.word	0x00000000
 8002de0:	08002b31 	.word	0x08002b31
 8002de4:	08003442 	.word	0x08003442

08002de8 <_printf_common>:
 8002de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dec:	4616      	mov	r6, r2
 8002dee:	4699      	mov	r9, r3
 8002df0:	688a      	ldr	r2, [r1, #8]
 8002df2:	690b      	ldr	r3, [r1, #16]
 8002df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	bfb8      	it	lt
 8002dfc:	4613      	movlt	r3, r2
 8002dfe:	6033      	str	r3, [r6, #0]
 8002e00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e04:	4607      	mov	r7, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	b10a      	cbz	r2, 8002e0e <_printf_common+0x26>
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	6033      	str	r3, [r6, #0]
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	0699      	lsls	r1, r3, #26
 8002e12:	bf42      	ittt	mi
 8002e14:	6833      	ldrmi	r3, [r6, #0]
 8002e16:	3302      	addmi	r3, #2
 8002e18:	6033      	strmi	r3, [r6, #0]
 8002e1a:	6825      	ldr	r5, [r4, #0]
 8002e1c:	f015 0506 	ands.w	r5, r5, #6
 8002e20:	d106      	bne.n	8002e30 <_printf_common+0x48>
 8002e22:	f104 0a19 	add.w	sl, r4, #25
 8002e26:	68e3      	ldr	r3, [r4, #12]
 8002e28:	6832      	ldr	r2, [r6, #0]
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	42ab      	cmp	r3, r5
 8002e2e:	dc26      	bgt.n	8002e7e <_printf_common+0x96>
 8002e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e34:	1e13      	subs	r3, r2, #0
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	bf18      	it	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	0692      	lsls	r2, r2, #26
 8002e3e:	d42b      	bmi.n	8002e98 <_printf_common+0xb0>
 8002e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e44:	4649      	mov	r1, r9
 8002e46:	4638      	mov	r0, r7
 8002e48:	47c0      	blx	r8
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	d01e      	beq.n	8002e8c <_printf_common+0xa4>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	68e5      	ldr	r5, [r4, #12]
 8002e52:	6832      	ldr	r2, [r6, #0]
 8002e54:	f003 0306 	and.w	r3, r3, #6
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	bf08      	it	eq
 8002e5c:	1aad      	subeq	r5, r5, r2
 8002e5e:	68a3      	ldr	r3, [r4, #8]
 8002e60:	6922      	ldr	r2, [r4, #16]
 8002e62:	bf0c      	ite	eq
 8002e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e68:	2500      	movne	r5, #0
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	bfc4      	itt	gt
 8002e6e:	1a9b      	subgt	r3, r3, r2
 8002e70:	18ed      	addgt	r5, r5, r3
 8002e72:	2600      	movs	r6, #0
 8002e74:	341a      	adds	r4, #26
 8002e76:	42b5      	cmp	r5, r6
 8002e78:	d11a      	bne.n	8002eb0 <_printf_common+0xc8>
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	e008      	b.n	8002e90 <_printf_common+0xa8>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	4652      	mov	r2, sl
 8002e82:	4649      	mov	r1, r9
 8002e84:	4638      	mov	r0, r7
 8002e86:	47c0      	blx	r8
 8002e88:	3001      	adds	r0, #1
 8002e8a:	d103      	bne.n	8002e94 <_printf_common+0xac>
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e94:	3501      	adds	r5, #1
 8002e96:	e7c6      	b.n	8002e26 <_printf_common+0x3e>
 8002e98:	18e1      	adds	r1, r4, r3
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	2030      	movs	r0, #48	; 0x30
 8002e9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ea2:	4422      	add	r2, r4
 8002ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eac:	3302      	adds	r3, #2
 8002eae:	e7c7      	b.n	8002e40 <_printf_common+0x58>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	4638      	mov	r0, r7
 8002eb8:	47c0      	blx	r8
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d0e6      	beq.n	8002e8c <_printf_common+0xa4>
 8002ebe:	3601      	adds	r6, #1
 8002ec0:	e7d9      	b.n	8002e76 <_printf_common+0x8e>
	...

08002ec4 <_printf_i>:
 8002ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec8:	7e0f      	ldrb	r7, [r1, #24]
 8002eca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ecc:	2f78      	cmp	r7, #120	; 0x78
 8002ece:	4691      	mov	r9, r2
 8002ed0:	4680      	mov	r8, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	469a      	mov	sl, r3
 8002ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002eda:	d807      	bhi.n	8002eec <_printf_i+0x28>
 8002edc:	2f62      	cmp	r7, #98	; 0x62
 8002ede:	d80a      	bhi.n	8002ef6 <_printf_i+0x32>
 8002ee0:	2f00      	cmp	r7, #0
 8002ee2:	f000 80d8 	beq.w	8003096 <_printf_i+0x1d2>
 8002ee6:	2f58      	cmp	r7, #88	; 0x58
 8002ee8:	f000 80a3 	beq.w	8003032 <_printf_i+0x16e>
 8002eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ef4:	e03a      	b.n	8002f6c <_printf_i+0xa8>
 8002ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002efa:	2b15      	cmp	r3, #21
 8002efc:	d8f6      	bhi.n	8002eec <_printf_i+0x28>
 8002efe:	a101      	add	r1, pc, #4	; (adr r1, 8002f04 <_printf_i+0x40>)
 8002f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f04:	08002f5d 	.word	0x08002f5d
 8002f08:	08002f71 	.word	0x08002f71
 8002f0c:	08002eed 	.word	0x08002eed
 8002f10:	08002eed 	.word	0x08002eed
 8002f14:	08002eed 	.word	0x08002eed
 8002f18:	08002eed 	.word	0x08002eed
 8002f1c:	08002f71 	.word	0x08002f71
 8002f20:	08002eed 	.word	0x08002eed
 8002f24:	08002eed 	.word	0x08002eed
 8002f28:	08002eed 	.word	0x08002eed
 8002f2c:	08002eed 	.word	0x08002eed
 8002f30:	0800307d 	.word	0x0800307d
 8002f34:	08002fa1 	.word	0x08002fa1
 8002f38:	0800305f 	.word	0x0800305f
 8002f3c:	08002eed 	.word	0x08002eed
 8002f40:	08002eed 	.word	0x08002eed
 8002f44:	0800309f 	.word	0x0800309f
 8002f48:	08002eed 	.word	0x08002eed
 8002f4c:	08002fa1 	.word	0x08002fa1
 8002f50:	08002eed 	.word	0x08002eed
 8002f54:	08002eed 	.word	0x08002eed
 8002f58:	08003067 	.word	0x08003067
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	1d1a      	adds	r2, r3, #4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	602a      	str	r2, [r5, #0]
 8002f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0a3      	b.n	80030b8 <_printf_i+0x1f4>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	6829      	ldr	r1, [r5, #0]
 8002f74:	0606      	lsls	r6, r0, #24
 8002f76:	f101 0304 	add.w	r3, r1, #4
 8002f7a:	d50a      	bpl.n	8002f92 <_printf_i+0xce>
 8002f7c:	680e      	ldr	r6, [r1, #0]
 8002f7e:	602b      	str	r3, [r5, #0]
 8002f80:	2e00      	cmp	r6, #0
 8002f82:	da03      	bge.n	8002f8c <_printf_i+0xc8>
 8002f84:	232d      	movs	r3, #45	; 0x2d
 8002f86:	4276      	negs	r6, r6
 8002f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f8c:	485e      	ldr	r0, [pc, #376]	; (8003108 <_printf_i+0x244>)
 8002f8e:	230a      	movs	r3, #10
 8002f90:	e019      	b.n	8002fc6 <_printf_i+0x102>
 8002f92:	680e      	ldr	r6, [r1, #0]
 8002f94:	602b      	str	r3, [r5, #0]
 8002f96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f9a:	bf18      	it	ne
 8002f9c:	b236      	sxthne	r6, r6
 8002f9e:	e7ef      	b.n	8002f80 <_printf_i+0xbc>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	6820      	ldr	r0, [r4, #0]
 8002fa4:	1d19      	adds	r1, r3, #4
 8002fa6:	6029      	str	r1, [r5, #0]
 8002fa8:	0601      	lsls	r1, r0, #24
 8002faa:	d501      	bpl.n	8002fb0 <_printf_i+0xec>
 8002fac:	681e      	ldr	r6, [r3, #0]
 8002fae:	e002      	b.n	8002fb6 <_printf_i+0xf2>
 8002fb0:	0646      	lsls	r6, r0, #25
 8002fb2:	d5fb      	bpl.n	8002fac <_printf_i+0xe8>
 8002fb4:	881e      	ldrh	r6, [r3, #0]
 8002fb6:	4854      	ldr	r0, [pc, #336]	; (8003108 <_printf_i+0x244>)
 8002fb8:	2f6f      	cmp	r7, #111	; 0x6f
 8002fba:	bf0c      	ite	eq
 8002fbc:	2308      	moveq	r3, #8
 8002fbe:	230a      	movne	r3, #10
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fc6:	6865      	ldr	r5, [r4, #4]
 8002fc8:	60a5      	str	r5, [r4, #8]
 8002fca:	2d00      	cmp	r5, #0
 8002fcc:	bfa2      	ittt	ge
 8002fce:	6821      	ldrge	r1, [r4, #0]
 8002fd0:	f021 0104 	bicge.w	r1, r1, #4
 8002fd4:	6021      	strge	r1, [r4, #0]
 8002fd6:	b90e      	cbnz	r6, 8002fdc <_printf_i+0x118>
 8002fd8:	2d00      	cmp	r5, #0
 8002fda:	d04d      	beq.n	8003078 <_printf_i+0x1b4>
 8002fdc:	4615      	mov	r5, r2
 8002fde:	fbb6 f1f3 	udiv	r1, r6, r3
 8002fe2:	fb03 6711 	mls	r7, r3, r1, r6
 8002fe6:	5dc7      	ldrb	r7, [r0, r7]
 8002fe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fec:	4637      	mov	r7, r6
 8002fee:	42bb      	cmp	r3, r7
 8002ff0:	460e      	mov	r6, r1
 8002ff2:	d9f4      	bls.n	8002fde <_printf_i+0x11a>
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d10b      	bne.n	8003010 <_printf_i+0x14c>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	07de      	lsls	r6, r3, #31
 8002ffc:	d508      	bpl.n	8003010 <_printf_i+0x14c>
 8002ffe:	6923      	ldr	r3, [r4, #16]
 8003000:	6861      	ldr	r1, [r4, #4]
 8003002:	4299      	cmp	r1, r3
 8003004:	bfde      	ittt	le
 8003006:	2330      	movle	r3, #48	; 0x30
 8003008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800300c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003010:	1b52      	subs	r2, r2, r5
 8003012:	6122      	str	r2, [r4, #16]
 8003014:	f8cd a000 	str.w	sl, [sp]
 8003018:	464b      	mov	r3, r9
 800301a:	aa03      	add	r2, sp, #12
 800301c:	4621      	mov	r1, r4
 800301e:	4640      	mov	r0, r8
 8003020:	f7ff fee2 	bl	8002de8 <_printf_common>
 8003024:	3001      	adds	r0, #1
 8003026:	d14c      	bne.n	80030c2 <_printf_i+0x1fe>
 8003028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800302c:	b004      	add	sp, #16
 800302e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003032:	4835      	ldr	r0, [pc, #212]	; (8003108 <_printf_i+0x244>)
 8003034:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003038:	6829      	ldr	r1, [r5, #0]
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003040:	6029      	str	r1, [r5, #0]
 8003042:	061d      	lsls	r5, r3, #24
 8003044:	d514      	bpl.n	8003070 <_printf_i+0x1ac>
 8003046:	07df      	lsls	r7, r3, #31
 8003048:	bf44      	itt	mi
 800304a:	f043 0320 	orrmi.w	r3, r3, #32
 800304e:	6023      	strmi	r3, [r4, #0]
 8003050:	b91e      	cbnz	r6, 800305a <_printf_i+0x196>
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	f023 0320 	bic.w	r3, r3, #32
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	2310      	movs	r3, #16
 800305c:	e7b0      	b.n	8002fc0 <_printf_i+0xfc>
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	f043 0320 	orr.w	r3, r3, #32
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	2378      	movs	r3, #120	; 0x78
 8003068:	4828      	ldr	r0, [pc, #160]	; (800310c <_printf_i+0x248>)
 800306a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800306e:	e7e3      	b.n	8003038 <_printf_i+0x174>
 8003070:	0659      	lsls	r1, r3, #25
 8003072:	bf48      	it	mi
 8003074:	b2b6      	uxthmi	r6, r6
 8003076:	e7e6      	b.n	8003046 <_printf_i+0x182>
 8003078:	4615      	mov	r5, r2
 800307a:	e7bb      	b.n	8002ff4 <_printf_i+0x130>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	6826      	ldr	r6, [r4, #0]
 8003080:	6961      	ldr	r1, [r4, #20]
 8003082:	1d18      	adds	r0, r3, #4
 8003084:	6028      	str	r0, [r5, #0]
 8003086:	0635      	lsls	r5, r6, #24
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	d501      	bpl.n	8003090 <_printf_i+0x1cc>
 800308c:	6019      	str	r1, [r3, #0]
 800308e:	e002      	b.n	8003096 <_printf_i+0x1d2>
 8003090:	0670      	lsls	r0, r6, #25
 8003092:	d5fb      	bpl.n	800308c <_printf_i+0x1c8>
 8003094:	8019      	strh	r1, [r3, #0]
 8003096:	2300      	movs	r3, #0
 8003098:	6123      	str	r3, [r4, #16]
 800309a:	4615      	mov	r5, r2
 800309c:	e7ba      	b.n	8003014 <_printf_i+0x150>
 800309e:	682b      	ldr	r3, [r5, #0]
 80030a0:	1d1a      	adds	r2, r3, #4
 80030a2:	602a      	str	r2, [r5, #0]
 80030a4:	681d      	ldr	r5, [r3, #0]
 80030a6:	6862      	ldr	r2, [r4, #4]
 80030a8:	2100      	movs	r1, #0
 80030aa:	4628      	mov	r0, r5
 80030ac:	f7fd f890 	bl	80001d0 <memchr>
 80030b0:	b108      	cbz	r0, 80030b6 <_printf_i+0x1f2>
 80030b2:	1b40      	subs	r0, r0, r5
 80030b4:	6060      	str	r0, [r4, #4]
 80030b6:	6863      	ldr	r3, [r4, #4]
 80030b8:	6123      	str	r3, [r4, #16]
 80030ba:	2300      	movs	r3, #0
 80030bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030c0:	e7a8      	b.n	8003014 <_printf_i+0x150>
 80030c2:	6923      	ldr	r3, [r4, #16]
 80030c4:	462a      	mov	r2, r5
 80030c6:	4649      	mov	r1, r9
 80030c8:	4640      	mov	r0, r8
 80030ca:	47d0      	blx	sl
 80030cc:	3001      	adds	r0, #1
 80030ce:	d0ab      	beq.n	8003028 <_printf_i+0x164>
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	079b      	lsls	r3, r3, #30
 80030d4:	d413      	bmi.n	80030fe <_printf_i+0x23a>
 80030d6:	68e0      	ldr	r0, [r4, #12]
 80030d8:	9b03      	ldr	r3, [sp, #12]
 80030da:	4298      	cmp	r0, r3
 80030dc:	bfb8      	it	lt
 80030de:	4618      	movlt	r0, r3
 80030e0:	e7a4      	b.n	800302c <_printf_i+0x168>
 80030e2:	2301      	movs	r3, #1
 80030e4:	4632      	mov	r2, r6
 80030e6:	4649      	mov	r1, r9
 80030e8:	4640      	mov	r0, r8
 80030ea:	47d0      	blx	sl
 80030ec:	3001      	adds	r0, #1
 80030ee:	d09b      	beq.n	8003028 <_printf_i+0x164>
 80030f0:	3501      	adds	r5, #1
 80030f2:	68e3      	ldr	r3, [r4, #12]
 80030f4:	9903      	ldr	r1, [sp, #12]
 80030f6:	1a5b      	subs	r3, r3, r1
 80030f8:	42ab      	cmp	r3, r5
 80030fa:	dcf2      	bgt.n	80030e2 <_printf_i+0x21e>
 80030fc:	e7eb      	b.n	80030d6 <_printf_i+0x212>
 80030fe:	2500      	movs	r5, #0
 8003100:	f104 0619 	add.w	r6, r4, #25
 8003104:	e7f5      	b.n	80030f2 <_printf_i+0x22e>
 8003106:	bf00      	nop
 8003108:	0800344d 	.word	0x0800344d
 800310c:	0800345e 	.word	0x0800345e

08003110 <memcpy>:
 8003110:	440a      	add	r2, r1
 8003112:	4291      	cmp	r1, r2
 8003114:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003118:	d100      	bne.n	800311c <memcpy+0xc>
 800311a:	4770      	bx	lr
 800311c:	b510      	push	{r4, lr}
 800311e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003126:	4291      	cmp	r1, r2
 8003128:	d1f9      	bne.n	800311e <memcpy+0xe>
 800312a:	bd10      	pop	{r4, pc}

0800312c <memmove>:
 800312c:	4288      	cmp	r0, r1
 800312e:	b510      	push	{r4, lr}
 8003130:	eb01 0402 	add.w	r4, r1, r2
 8003134:	d902      	bls.n	800313c <memmove+0x10>
 8003136:	4284      	cmp	r4, r0
 8003138:	4623      	mov	r3, r4
 800313a:	d807      	bhi.n	800314c <memmove+0x20>
 800313c:	1e43      	subs	r3, r0, #1
 800313e:	42a1      	cmp	r1, r4
 8003140:	d008      	beq.n	8003154 <memmove+0x28>
 8003142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800314a:	e7f8      	b.n	800313e <memmove+0x12>
 800314c:	4402      	add	r2, r0
 800314e:	4601      	mov	r1, r0
 8003150:	428a      	cmp	r2, r1
 8003152:	d100      	bne.n	8003156 <memmove+0x2a>
 8003154:	bd10      	pop	{r4, pc}
 8003156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800315a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800315e:	e7f7      	b.n	8003150 <memmove+0x24>

08003160 <_free_r>:
 8003160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003162:	2900      	cmp	r1, #0
 8003164:	d044      	beq.n	80031f0 <_free_r+0x90>
 8003166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800316a:	9001      	str	r0, [sp, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f1a1 0404 	sub.w	r4, r1, #4
 8003172:	bfb8      	it	lt
 8003174:	18e4      	addlt	r4, r4, r3
 8003176:	f000 f913 	bl	80033a0 <__malloc_lock>
 800317a:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <_free_r+0x94>)
 800317c:	9801      	ldr	r0, [sp, #4]
 800317e:	6813      	ldr	r3, [r2, #0]
 8003180:	b933      	cbnz	r3, 8003190 <_free_r+0x30>
 8003182:	6063      	str	r3, [r4, #4]
 8003184:	6014      	str	r4, [r2, #0]
 8003186:	b003      	add	sp, #12
 8003188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800318c:	f000 b90e 	b.w	80033ac <__malloc_unlock>
 8003190:	42a3      	cmp	r3, r4
 8003192:	d908      	bls.n	80031a6 <_free_r+0x46>
 8003194:	6825      	ldr	r5, [r4, #0]
 8003196:	1961      	adds	r1, r4, r5
 8003198:	428b      	cmp	r3, r1
 800319a:	bf01      	itttt	eq
 800319c:	6819      	ldreq	r1, [r3, #0]
 800319e:	685b      	ldreq	r3, [r3, #4]
 80031a0:	1949      	addeq	r1, r1, r5
 80031a2:	6021      	streq	r1, [r4, #0]
 80031a4:	e7ed      	b.n	8003182 <_free_r+0x22>
 80031a6:	461a      	mov	r2, r3
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	b10b      	cbz	r3, 80031b0 <_free_r+0x50>
 80031ac:	42a3      	cmp	r3, r4
 80031ae:	d9fa      	bls.n	80031a6 <_free_r+0x46>
 80031b0:	6811      	ldr	r1, [r2, #0]
 80031b2:	1855      	adds	r5, r2, r1
 80031b4:	42a5      	cmp	r5, r4
 80031b6:	d10b      	bne.n	80031d0 <_free_r+0x70>
 80031b8:	6824      	ldr	r4, [r4, #0]
 80031ba:	4421      	add	r1, r4
 80031bc:	1854      	adds	r4, r2, r1
 80031be:	42a3      	cmp	r3, r4
 80031c0:	6011      	str	r1, [r2, #0]
 80031c2:	d1e0      	bne.n	8003186 <_free_r+0x26>
 80031c4:	681c      	ldr	r4, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	6053      	str	r3, [r2, #4]
 80031ca:	4421      	add	r1, r4
 80031cc:	6011      	str	r1, [r2, #0]
 80031ce:	e7da      	b.n	8003186 <_free_r+0x26>
 80031d0:	d902      	bls.n	80031d8 <_free_r+0x78>
 80031d2:	230c      	movs	r3, #12
 80031d4:	6003      	str	r3, [r0, #0]
 80031d6:	e7d6      	b.n	8003186 <_free_r+0x26>
 80031d8:	6825      	ldr	r5, [r4, #0]
 80031da:	1961      	adds	r1, r4, r5
 80031dc:	428b      	cmp	r3, r1
 80031de:	bf04      	itt	eq
 80031e0:	6819      	ldreq	r1, [r3, #0]
 80031e2:	685b      	ldreq	r3, [r3, #4]
 80031e4:	6063      	str	r3, [r4, #4]
 80031e6:	bf04      	itt	eq
 80031e8:	1949      	addeq	r1, r1, r5
 80031ea:	6021      	streq	r1, [r4, #0]
 80031ec:	6054      	str	r4, [r2, #4]
 80031ee:	e7ca      	b.n	8003186 <_free_r+0x26>
 80031f0:	b003      	add	sp, #12
 80031f2:	bd30      	pop	{r4, r5, pc}
 80031f4:	20000118 	.word	0x20000118

080031f8 <sbrk_aligned>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	4e0e      	ldr	r6, [pc, #56]	; (8003234 <sbrk_aligned+0x3c>)
 80031fc:	460c      	mov	r4, r1
 80031fe:	6831      	ldr	r1, [r6, #0]
 8003200:	4605      	mov	r5, r0
 8003202:	b911      	cbnz	r1, 800320a <sbrk_aligned+0x12>
 8003204:	f000 f8bc 	bl	8003380 <_sbrk_r>
 8003208:	6030      	str	r0, [r6, #0]
 800320a:	4621      	mov	r1, r4
 800320c:	4628      	mov	r0, r5
 800320e:	f000 f8b7 	bl	8003380 <_sbrk_r>
 8003212:	1c43      	adds	r3, r0, #1
 8003214:	d00a      	beq.n	800322c <sbrk_aligned+0x34>
 8003216:	1cc4      	adds	r4, r0, #3
 8003218:	f024 0403 	bic.w	r4, r4, #3
 800321c:	42a0      	cmp	r0, r4
 800321e:	d007      	beq.n	8003230 <sbrk_aligned+0x38>
 8003220:	1a21      	subs	r1, r4, r0
 8003222:	4628      	mov	r0, r5
 8003224:	f000 f8ac 	bl	8003380 <_sbrk_r>
 8003228:	3001      	adds	r0, #1
 800322a:	d101      	bne.n	8003230 <sbrk_aligned+0x38>
 800322c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003230:	4620      	mov	r0, r4
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	2000011c 	.word	0x2000011c

08003238 <_malloc_r>:
 8003238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800323c:	1ccd      	adds	r5, r1, #3
 800323e:	f025 0503 	bic.w	r5, r5, #3
 8003242:	3508      	adds	r5, #8
 8003244:	2d0c      	cmp	r5, #12
 8003246:	bf38      	it	cc
 8003248:	250c      	movcc	r5, #12
 800324a:	2d00      	cmp	r5, #0
 800324c:	4607      	mov	r7, r0
 800324e:	db01      	blt.n	8003254 <_malloc_r+0x1c>
 8003250:	42a9      	cmp	r1, r5
 8003252:	d905      	bls.n	8003260 <_malloc_r+0x28>
 8003254:	230c      	movs	r3, #12
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	2600      	movs	r6, #0
 800325a:	4630      	mov	r0, r6
 800325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003260:	4e2e      	ldr	r6, [pc, #184]	; (800331c <_malloc_r+0xe4>)
 8003262:	f000 f89d 	bl	80033a0 <__malloc_lock>
 8003266:	6833      	ldr	r3, [r6, #0]
 8003268:	461c      	mov	r4, r3
 800326a:	bb34      	cbnz	r4, 80032ba <_malloc_r+0x82>
 800326c:	4629      	mov	r1, r5
 800326e:	4638      	mov	r0, r7
 8003270:	f7ff ffc2 	bl	80031f8 <sbrk_aligned>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	4604      	mov	r4, r0
 8003278:	d14d      	bne.n	8003316 <_malloc_r+0xde>
 800327a:	6834      	ldr	r4, [r6, #0]
 800327c:	4626      	mov	r6, r4
 800327e:	2e00      	cmp	r6, #0
 8003280:	d140      	bne.n	8003304 <_malloc_r+0xcc>
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	4631      	mov	r1, r6
 8003286:	4638      	mov	r0, r7
 8003288:	eb04 0803 	add.w	r8, r4, r3
 800328c:	f000 f878 	bl	8003380 <_sbrk_r>
 8003290:	4580      	cmp	r8, r0
 8003292:	d13a      	bne.n	800330a <_malloc_r+0xd2>
 8003294:	6821      	ldr	r1, [r4, #0]
 8003296:	3503      	adds	r5, #3
 8003298:	1a6d      	subs	r5, r5, r1
 800329a:	f025 0503 	bic.w	r5, r5, #3
 800329e:	3508      	adds	r5, #8
 80032a0:	2d0c      	cmp	r5, #12
 80032a2:	bf38      	it	cc
 80032a4:	250c      	movcc	r5, #12
 80032a6:	4629      	mov	r1, r5
 80032a8:	4638      	mov	r0, r7
 80032aa:	f7ff ffa5 	bl	80031f8 <sbrk_aligned>
 80032ae:	3001      	adds	r0, #1
 80032b0:	d02b      	beq.n	800330a <_malloc_r+0xd2>
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	442b      	add	r3, r5
 80032b6:	6023      	str	r3, [r4, #0]
 80032b8:	e00e      	b.n	80032d8 <_malloc_r+0xa0>
 80032ba:	6822      	ldr	r2, [r4, #0]
 80032bc:	1b52      	subs	r2, r2, r5
 80032be:	d41e      	bmi.n	80032fe <_malloc_r+0xc6>
 80032c0:	2a0b      	cmp	r2, #11
 80032c2:	d916      	bls.n	80032f2 <_malloc_r+0xba>
 80032c4:	1961      	adds	r1, r4, r5
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	6025      	str	r5, [r4, #0]
 80032ca:	bf18      	it	ne
 80032cc:	6059      	strne	r1, [r3, #4]
 80032ce:	6863      	ldr	r3, [r4, #4]
 80032d0:	bf08      	it	eq
 80032d2:	6031      	streq	r1, [r6, #0]
 80032d4:	5162      	str	r2, [r4, r5]
 80032d6:	604b      	str	r3, [r1, #4]
 80032d8:	4638      	mov	r0, r7
 80032da:	f104 060b 	add.w	r6, r4, #11
 80032de:	f000 f865 	bl	80033ac <__malloc_unlock>
 80032e2:	f026 0607 	bic.w	r6, r6, #7
 80032e6:	1d23      	adds	r3, r4, #4
 80032e8:	1af2      	subs	r2, r6, r3
 80032ea:	d0b6      	beq.n	800325a <_malloc_r+0x22>
 80032ec:	1b9b      	subs	r3, r3, r6
 80032ee:	50a3      	str	r3, [r4, r2]
 80032f0:	e7b3      	b.n	800325a <_malloc_r+0x22>
 80032f2:	6862      	ldr	r2, [r4, #4]
 80032f4:	42a3      	cmp	r3, r4
 80032f6:	bf0c      	ite	eq
 80032f8:	6032      	streq	r2, [r6, #0]
 80032fa:	605a      	strne	r2, [r3, #4]
 80032fc:	e7ec      	b.n	80032d8 <_malloc_r+0xa0>
 80032fe:	4623      	mov	r3, r4
 8003300:	6864      	ldr	r4, [r4, #4]
 8003302:	e7b2      	b.n	800326a <_malloc_r+0x32>
 8003304:	4634      	mov	r4, r6
 8003306:	6876      	ldr	r6, [r6, #4]
 8003308:	e7b9      	b.n	800327e <_malloc_r+0x46>
 800330a:	230c      	movs	r3, #12
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4638      	mov	r0, r7
 8003310:	f000 f84c 	bl	80033ac <__malloc_unlock>
 8003314:	e7a1      	b.n	800325a <_malloc_r+0x22>
 8003316:	6025      	str	r5, [r4, #0]
 8003318:	e7de      	b.n	80032d8 <_malloc_r+0xa0>
 800331a:	bf00      	nop
 800331c:	20000118 	.word	0x20000118

08003320 <_realloc_r>:
 8003320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003324:	4680      	mov	r8, r0
 8003326:	4614      	mov	r4, r2
 8003328:	460e      	mov	r6, r1
 800332a:	b921      	cbnz	r1, 8003336 <_realloc_r+0x16>
 800332c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003330:	4611      	mov	r1, r2
 8003332:	f7ff bf81 	b.w	8003238 <_malloc_r>
 8003336:	b92a      	cbnz	r2, 8003344 <_realloc_r+0x24>
 8003338:	f7ff ff12 	bl	8003160 <_free_r>
 800333c:	4625      	mov	r5, r4
 800333e:	4628      	mov	r0, r5
 8003340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003344:	f000 f838 	bl	80033b8 <_malloc_usable_size_r>
 8003348:	4284      	cmp	r4, r0
 800334a:	4607      	mov	r7, r0
 800334c:	d802      	bhi.n	8003354 <_realloc_r+0x34>
 800334e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003352:	d812      	bhi.n	800337a <_realloc_r+0x5a>
 8003354:	4621      	mov	r1, r4
 8003356:	4640      	mov	r0, r8
 8003358:	f7ff ff6e 	bl	8003238 <_malloc_r>
 800335c:	4605      	mov	r5, r0
 800335e:	2800      	cmp	r0, #0
 8003360:	d0ed      	beq.n	800333e <_realloc_r+0x1e>
 8003362:	42bc      	cmp	r4, r7
 8003364:	4622      	mov	r2, r4
 8003366:	4631      	mov	r1, r6
 8003368:	bf28      	it	cs
 800336a:	463a      	movcs	r2, r7
 800336c:	f7ff fed0 	bl	8003110 <memcpy>
 8003370:	4631      	mov	r1, r6
 8003372:	4640      	mov	r0, r8
 8003374:	f7ff fef4 	bl	8003160 <_free_r>
 8003378:	e7e1      	b.n	800333e <_realloc_r+0x1e>
 800337a:	4635      	mov	r5, r6
 800337c:	e7df      	b.n	800333e <_realloc_r+0x1e>
	...

08003380 <_sbrk_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	4d06      	ldr	r5, [pc, #24]	; (800339c <_sbrk_r+0x1c>)
 8003384:	2300      	movs	r3, #0
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fd fab2 	bl	80008f4 <_sbrk>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_sbrk_r+0x1a>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_sbrk_r+0x1a>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000120 	.word	0x20000120

080033a0 <__malloc_lock>:
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <__malloc_lock+0x8>)
 80033a2:	f000 b811 	b.w	80033c8 <__retarget_lock_acquire_recursive>
 80033a6:	bf00      	nop
 80033a8:	20000124 	.word	0x20000124

080033ac <__malloc_unlock>:
 80033ac:	4801      	ldr	r0, [pc, #4]	; (80033b4 <__malloc_unlock+0x8>)
 80033ae:	f000 b80c 	b.w	80033ca <__retarget_lock_release_recursive>
 80033b2:	bf00      	nop
 80033b4:	20000124 	.word	0x20000124

080033b8 <_malloc_usable_size_r>:
 80033b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033bc:	1f18      	subs	r0, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bfbc      	itt	lt
 80033c2:	580b      	ldrlt	r3, [r1, r0]
 80033c4:	18c0      	addlt	r0, r0, r3
 80033c6:	4770      	bx	lr

080033c8 <__retarget_lock_acquire_recursive>:
 80033c8:	4770      	bx	lr

080033ca <__retarget_lock_release_recursive>:
 80033ca:	4770      	bx	lr

080033cc <_init>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	bf00      	nop
 80033d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d2:	bc08      	pop	{r3}
 80033d4:	469e      	mov	lr, r3
 80033d6:	4770      	bx	lr

080033d8 <_fini>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr
