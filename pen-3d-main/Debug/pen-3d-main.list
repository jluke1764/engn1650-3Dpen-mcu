
pen-3d-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b84  08004b84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b8c  08004b8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08004c04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004c04  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125f8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c8  00000000  00000000  00032698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00034860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00035980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae6b  00000000  00000000  000369c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014067  00000000  00000000  00051833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac0cd  00000000  00000000  0006589a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  001119b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004aec 	.word	0x08004aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004aec 	.word	0x08004aec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fbc4 	bl	8000d06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f833 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f98d 	bl	80008a0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000586:	f000 f8b3 	bl	80006f0 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800058a:	f000 f873 	bl	8000674 <MX_I2C1_Init>
  MX_TIM1_Init();
 800058e:	f000 f8db 	bl	8000748 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //uart_init();
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <main+0x68>)
 8000596:	f002 f8f5 	bl	8002784 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_3);
	HAL_Delay(2);
 800059a:	2002      	movs	r0, #2
 800059c:	f000 fc28 	bl	8000df0 <HAL_Delay>
	//myprintf("hello world!\n");
	  int i = mygetch();
 80005a0:	f000 f9cc 	bl	800093c <mygetch>
 80005a4:	6078      	str	r0, [r7, #4]
	  //myprintf("1");



	if (i >= 0)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	dbf6      	blt.n	800059a <main+0x26>
	{
		myprintf("%d\n", i);
 80005ac:	6879      	ldr	r1, [r7, #4]
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x6c>)
 80005b0:	f000 f98e 	bl	80008d0 <myprintf>
		   if (i >= '0' && i <= '9')
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b2f      	cmp	r3, #47	; 0x2f
 80005b8:	ddef      	ble.n	800059a <main+0x26>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b39      	cmp	r3, #57	; 0x39
 80005be:	dcec      	bgt.n	800059a <main+0x26>
		   {
			   myprintf("%d\n", i);
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0x6c>)
 80005c4:	f000 f984 	bl	80008d0 <myprintf>
			   TIM1->CCR1 = (i-'0')*6553;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3b30      	subs	r3, #48	; 0x30
 80005cc:	f641 1299 	movw	r2, #6553	; 0x1999
 80005d0:	fb03 f202 	mul.w	r2, r3, r2
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <main+0x70>)
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  {
 80005d8:	e7df      	b.n	800059a <main+0x26>
 80005da:	bf00      	nop
 80005dc:	20000164 	.word	0x20000164
 80005e0:	08004b04 	.word	0x08004b04
 80005e4:	40012c00 	.word	0x40012c00

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2244      	movs	r2, #68	; 0x44
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fde8 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060e:	f000 ff9f 	bl	8001550 <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000618:	f000 f9a8 	bl	800096c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800061c:	2310      	movs	r3, #16
 800061e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000628:	2360      	movs	r3, #96	; 0x60
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4618      	mov	r0, r3
 8000636:	f000 ffe1 	bl	80015fc <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000640:	f000 f994 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fc2f 	bl	8001ec0 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000668:	f000 f980 	bl	800096c <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3758      	adds	r7, #88	; 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_I2C1_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_I2C1_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000680:	f640 6214 	movw	r2, #3604	; 0xe14
 8000684:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_I2C1_Init+0x74>)
 800068e:	2201      	movs	r2, #1
 8000690:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006b2:	f000 fe19 	bl	80012e8 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 f956 	bl	800096c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4809      	ldr	r0, [pc, #36]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006c4:	f000 fe9f 	bl	8001406 <HAL_I2CEx_ConfigAnalogFilter>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006ce:	f000 f94d 	bl	800096c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006d6:	f000 fee1 	bl	800149c <HAL_I2CEx_ConfigDigitalFilter>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006e0:	f000 f944 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	40005400 	.word	0x40005400

080006f0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <MX_LPUART1_UART_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 80006fc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000700:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_LPUART1_UART_Init+0x50>)
 800072e:	f002 ff65 	bl	80035fc <HAL_UART_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f918 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000e0 	.word	0x200000e0
 8000744:	40008000 	.word	0x40008000

08000748 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09a      	sub	sp, #104	; 0x68
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	222c      	movs	r2, #44	; 0x2c
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fd22 	bl	80041cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000788:	4b43      	ldr	r3, [pc, #268]	; (8000898 <MX_TIM1_Init+0x150>)
 800078a:	4a44      	ldr	r2, [pc, #272]	; (800089c <MX_TIM1_Init+0x154>)
 800078c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800078e:	4b42      	ldr	r3, [pc, #264]	; (8000898 <MX_TIM1_Init+0x150>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b40      	ldr	r3, [pc, #256]	; (8000898 <MX_TIM1_Init+0x150>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800079a:	4b3f      	ldr	r3, [pc, #252]	; (8000898 <MX_TIM1_Init+0x150>)
 800079c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <MX_TIM1_Init+0x150>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a8:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <MX_TIM1_Init+0x150>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ae:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <MX_TIM1_Init+0x150>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b4:	4838      	ldr	r0, [pc, #224]	; (8000898 <MX_TIM1_Init+0x150>)
 80007b6:	f001 ff2d 	bl	8002614 <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007c0:	f000 f8d4 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007ce:	4619      	mov	r1, r3
 80007d0:	4831      	ldr	r0, [pc, #196]	; (8000898 <MX_TIM1_Init+0x150>)
 80007d2:	f002 f9c9 	bl	8002b68 <HAL_TIM_ConfigClockSource>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007dc:	f000 f8c6 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007e0:	482d      	ldr	r0, [pc, #180]	; (8000898 <MX_TIM1_Init+0x150>)
 80007e2:	f001 ff6e 	bl	80026c2 <HAL_TIM_PWM_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007ec:	f000 f8be 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000800:	4619      	mov	r1, r3
 8000802:	4825      	ldr	r0, [pc, #148]	; (8000898 <MX_TIM1_Init+0x150>)
 8000804:	f002 fe1c 	bl	8003440 <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800080e:	f000 f8ad 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000812:	2360      	movs	r3, #96	; 0x60
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081a:	2300      	movs	r3, #0
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800081e:	2300      	movs	r3, #0
 8000820:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	4818      	ldr	r0, [pc, #96]	; (8000898 <MX_TIM1_Init+0x150>)
 8000838:	f002 f882 	bl	8002940 <HAL_TIM_PWM_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000842:	f000 f893 	bl	800096c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800085a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <MX_TIM1_Init+0x150>)
 800087c:	f002 fe46 	bl	800350c <HAL_TIMEx_ConfigBreakDeadTime>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000886:	f000 f871 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <MX_TIM1_Init+0x150>)
 800088c:	f000 f968 	bl	8000b60 <HAL_TIM_MspPostInit>

}
 8000890:	bf00      	nop
 8000892:	3768      	adds	r7, #104	; 0x68
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000164 	.word	0x20000164
 800089c:	40012c00 	.word	0x40012c00

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_GPIO_Init+0x2c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <MX_GPIO_Init+0x2c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_GPIO_Init+0x2c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <myprintf>:
{
   if (nby) HAL_UART_Transmit(&hlpuart1,st,nby,10);
}

void myprintf (const char *fmt, ...)
{
 80008d0:	b40f      	push	{r0, r1, r2, r3}
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b0c2      	sub	sp, #264	; 0x108
 80008d6:	af00      	add	r7, sp, #0
   va_list arglist;
   int nby;
   unsigned char st[256];

   if (!fmt) return;
 80008d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d022      	beq.n	8000926 <myprintf+0x56>
   va_start(arglist,fmt);
 80008e0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80008e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   nby = vsnprintf((char *)st,sizeof(st),fmt,arglist);
 80008e8:	4638      	mov	r0, r7
 80008ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80008ee:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	f003 fc9d 	bl	8004234 <vsniprintf>
 80008fa:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   va_end(arglist);
   if (nby < 0) { nby = sizeof(st)-1; } //print truncated string in case too long
 80008fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000902:	2b00      	cmp	r3, #0
 8000904:	da02      	bge.n	800090c <myprintf+0x3c>
 8000906:	23ff      	movs	r3, #255	; 0xff
 8000908:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   if (nby) HAL_UART_Transmit(&hlpuart1,st,nby,10);
 800090c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000910:	2b00      	cmp	r3, #0
 8000912:	d009      	beq.n	8000928 <myprintf+0x58>
 8000914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000918:	b29a      	uxth	r2, r3
 800091a:	4639      	mov	r1, r7
 800091c:	230a      	movs	r3, #10
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <myprintf+0x68>)
 8000920:	f002 feba 	bl	8003698 <HAL_UART_Transmit>
 8000924:	e000      	b.n	8000928 <myprintf+0x58>
   if (!fmt) return;
 8000926:	bf00      	nop
}
 8000928:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800092c:	46bd      	mov	sp, r7
 800092e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000932:	b004      	add	sp, #16
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200000e0 	.word	0x200000e0

0800093c <mygetch>:
#if 1

#define uart_init()
int mygetch (void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
   uint8_t ch = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
   if (HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, 0) == HAL_OK) return ch;
 8000946:	1df9      	adds	r1, r7, #7
 8000948:	2300      	movs	r3, #0
 800094a:	2201      	movs	r2, #1
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <mygetch+0x2c>)
 800094e:	f002 ff37 	bl	80037c0 <HAL_UART_Receive>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d101      	bne.n	800095c <mygetch+0x20>
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	e001      	b.n	8000960 <mygetch+0x24>
   return -1; //HAL_TIMEOUT
 800095c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000e0 	.word	0x200000e0

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x44>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6613      	str	r3, [r2, #96]	; 0x60
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x44>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6593      	str	r3, [r2, #88]	; 0x58
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b096      	sub	sp, #88	; 0x58
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2234      	movs	r2, #52	; 0x34
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f003 fbf3 	bl	80041cc <memset>
  if(hi2c->Instance==I2C1)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <HAL_I2C_MspInit+0xa8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d137      	bne.n	8000a60 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fc83 	bl	8002308 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a08:	f7ff ffb0 	bl	800096c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_I2C_MspInit+0xac>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_I2C_MspInit+0xac>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_I2C_MspInit+0xac>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a28:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a36:	2304      	movs	r3, #4
 8000a38:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f000 fade 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_I2C_MspInit+0xac>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_I2C_MspInit+0xac>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a52:	6593      	str	r3, [r2, #88]	; 0x58
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_I2C_MspInit+0xac>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3758      	adds	r7, #88	; 0x58
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b096      	sub	sp, #88	; 0x58
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2234      	movs	r2, #52	; 0x34
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 fb9b 	bl	80041cc <memset>
  if(huart->Instance==LPUART1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <HAL_UART_MspInit+0xa8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d136      	bne.n	8000b0e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fc2b 	bl	8002308 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab8:	f7ff ff58 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aec:	230c      	movs	r3, #12
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000afc:	2308      	movs	r3, #8
 8000afe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b04:	4619      	mov	r1, r3
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f000 fa7b 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3758      	adds	r7, #88	; 0x58
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40008000 	.word	0x40008000
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_TIM_Base_MspInit+0x38>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10b      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <HAL_TIM_MspPostInit+0x68>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d11d      	bne.n	8000bbe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_TIM_MspPostInit+0x6c>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <HAL_TIM_MspPostInit+0x6c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_TIM_MspPostInit+0x6c>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f000 fa23 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012c00 	.word	0x40012c00
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8c8 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f003 fa90 	bl	8004178 <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000a000 	.word	0x2000a000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	200001b0 	.word	0x200001b0
 8000c8c:	200001c8 	.word	0x200001c8

08000c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f003 fa4f 	bl	8004184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fc45 	bl	8000574 <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cf8:	08004b94 	.word	0x08004b94
  ldr r2, =_sbss
 8000cfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d00:	200001c8 	.word	0x200001c8

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>

08000d06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f943 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d16:	200f      	movs	r0, #15
 8000d18:	f000 f80e 	bl	8000d38 <HAL_InitTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e001      	b.n	8000d2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d28:	f7ff fe26 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d023      	beq.n	8000d94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_InitTick+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f941 	bl	8000fea <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10f      	bne.n	8000d8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d809      	bhi.n	8000d88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d7c:	f000 f919 	bl	8000fb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_InitTick+0x74>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e007      	b.n	8000d98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e004      	b.n	8000d98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e001      	b.n	8000d98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	200001b4 	.word	0x200001b4

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200001b4 	.word	0x200001b4

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff47 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff5c 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffb0 	bl	8000f58 <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e14e      	b.n	80012b2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8140 	beq.w	80012ac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x40>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 0201 	and.w	r2, r3, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d017      	beq.n	80010e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	6939      	ldr	r1, [r7, #16]
 8001132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0203 	and.w	r2, r3, #3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 809a 	beq.w	80012ac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 800117a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117c:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6613      	str	r3, [r2, #96]	; 0x60
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 8001186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001190:	4a50      	ldr	r2, [pc, #320]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ba:	d013      	beq.n	80011e4 <HAL_GPIO_Init+0x1e0>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a46      	ldr	r2, [pc, #280]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d00d      	beq.n	80011e0 <HAL_GPIO_Init+0x1dc>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a45      	ldr	r2, [pc, #276]	; (80012dc <HAL_GPIO_Init+0x2d8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x1d8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a44      	ldr	r2, [pc, #272]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d101      	bne.n	80011d8 <HAL_GPIO_Init+0x1d4>
 80011d4:	2303      	movs	r3, #3
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011d8:	2307      	movs	r3, #7
 80011da:	e004      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011dc:	2302      	movs	r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011e4:	2300      	movs	r3, #0
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	f002 0203 	and.w	r2, r2, #3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4093      	lsls	r3, r2
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f6:	4937      	ldr	r1, [pc, #220]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001228:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001252:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f47f aea9 	bne.w	8001014 <HAL_GPIO_Init+0x10>
  }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	48000800 	.word	0x48000800
 80012e0:	48000c00 	.word	0x48000c00
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e081      	b.n	80013fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fb56 	bl	80009c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	; 0x24
 8001318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001338:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001348:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d107      	bne.n	8001362 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	e006      	b.n	8001370 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800136e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d104      	bne.n	8001382 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001380:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001394:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69d9      	ldr	r1, [r3, #28]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0201 	orr.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2220      	movs	r2, #32
 80013ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b20      	cmp	r3, #32
 800141a:	d138      	bne.n	800148e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001426:	2302      	movs	r3, #2
 8001428:	e032      	b.n	8001490 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2224      	movs	r2, #36	; 0x24
 8001436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001458:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6819      	ldr	r1, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2220      	movs	r2, #32
 800147e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
  }
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d139      	bne.n	8001526 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014bc:	2302      	movs	r3, #2
 80014be:	e033      	b.n	8001528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2220      	movs	r2, #32
 8001516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001526:	2302      	movs	r3, #2
  }
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_PWREx_GetVoltageRange+0x18>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000

08001550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800155e:	d130      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156c:	d038      	beq.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2232      	movs	r2, #50	; 0x32
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001594:	e002      	b.n	800159c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3b01      	subs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a8:	d102      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f2      	bne.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015bc:	d110      	bne.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e00f      	b.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	d007      	beq.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40007000 	.word	0x40007000
 80015f4:	20000000 	.word	0x20000000
 80015f8:	431bde83 	.word	0x431bde83

080015fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f000 bc4f 	b.w	8001eae <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001610:	4b97      	ldr	r3, [pc, #604]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800161a:	4b95      	ldr	r3, [pc, #596]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80e6 	beq.w	80017fe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d007      	beq.n	8001648 <HAL_RCC_OscConfig+0x4c>
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	2b0c      	cmp	r3, #12
 800163c:	f040 808d 	bne.w	800175a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b01      	cmp	r3, #1
 8001644:	f040 8089 	bne.w	800175a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001648:	4b89      	ldr	r3, [pc, #548]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_RCC_OscConfig+0x66>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	f000 bc26 	b.w	8001eae <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001666:	4b82      	ldr	r3, [pc, #520]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <HAL_RCC_OscConfig+0x80>
 8001672:	4b7f      	ldr	r3, [pc, #508]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800167a:	e005      	b.n	8001688 <HAL_RCC_OscConfig+0x8c>
 800167c:	4b7c      	ldr	r3, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001688:	4293      	cmp	r3, r2
 800168a:	d224      	bcs.n	80016d6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fdd9 	bl	8002248 <RCC_SetFlashLatencyFromMSIRange>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	f000 bc06 	b.w	8001eae <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a2:	4b73      	ldr	r3, [pc, #460]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a72      	ldr	r2, [pc, #456]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b70      	ldr	r3, [pc, #448]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	496d      	ldr	r1, [pc, #436]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c0:	4b6b      	ldr	r3, [pc, #428]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	4968      	ldr	r1, [pc, #416]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
 80016d4:	e025      	b.n	8001722 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d6:	4b66      	ldr	r3, [pc, #408]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a65      	ldr	r2, [pc, #404]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	4960      	ldr	r1, [pc, #384]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f4:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	495b      	ldr	r1, [pc, #364]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd98 	bl	8002248 <RCC_SetFlashLatencyFromMSIRange>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e3c5      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001722:	f000 fccd 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8001726:	4602      	mov	r2, r0
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	4950      	ldr	r1, [pc, #320]	; (8001874 <HAL_RCC_OscConfig+0x278>)
 8001734:	5ccb      	ldrb	r3, [r1, r3]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	4a4e      	ldr	r2, [pc, #312]	; (8001878 <HAL_RCC_OscConfig+0x27c>)
 8001740:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001742:	4b4e      	ldr	r3, [pc, #312]	; (800187c <HAL_RCC_OscConfig+0x280>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff faf6 	bl	8000d38 <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d052      	beq.n	80017fc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	e3a9      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d032      	beq.n	80017c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a42      	ldr	r2, [pc, #264]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800176e:	f7ff fb33 	bl	8000dd8 <HAL_GetTick>
 8001772:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001776:	f7ff fb2f 	bl	8000dd8 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e392      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001788:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a35      	ldr	r2, [pc, #212]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b33      	ldr	r3, [pc, #204]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	4930      	ldr	r1, [pc, #192]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b2:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	492b      	ldr	r1, [pc, #172]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
 80017c6:	e01a      	b.n	80017fe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a28      	ldr	r2, [pc, #160]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb00 	bl	8000dd8 <HAL_GetTick>
 80017d8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017dc:	f7ff fafc 	bl	8000dd8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e35f      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1e0>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d073      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d005      	beq.n	800181c <HAL_RCC_OscConfig+0x220>
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d10e      	bne.n	8001834 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d10b      	bne.n	8001834 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d063      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2f4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d15f      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e33c      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x250>
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e025      	b.n	8001898 <HAL_RCC_OscConfig+0x29c>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001854:	d114      	bne.n	8001880 <HAL_RCC_OscConfig+0x284>
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a02      	ldr	r2, [pc, #8]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e013      	b.n	8001898 <HAL_RCC_OscConfig+0x29c>
 8001870:	40021000 	.word	0x40021000
 8001874:	08004b08 	.word	0x08004b08
 8001878:	20000000 	.word	0x20000000
 800187c:	20000004 	.word	0x20000004
 8001880:	4b8f      	ldr	r3, [pc, #572]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a8e      	ldr	r2, [pc, #568]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a8b      	ldr	r2, [pc, #556]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa9a 	bl	8000dd8 <HAL_GetTick>
 80018a4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fa96 	bl	8000dd8 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e2f9      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ba:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2ac>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fa86 	bl	8000dd8 <HAL_GetTick>
 80018cc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fa82 	bl	8000dd8 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e2e5      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e2:	4b77      	ldr	r3, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x2d4>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d060      	beq.n	80019c0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	2b04      	cmp	r3, #4
 8001902:	d005      	beq.n	8001910 <HAL_RCC_OscConfig+0x314>
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d119      	bne.n	800193e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d116      	bne.n	800193e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001910:	4b6b      	ldr	r3, [pc, #428]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_OscConfig+0x32c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e2c2      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	4962      	ldr	r1, [pc, #392]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193c:	e040      	b.n	80019c0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d023      	beq.n	800198e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001946:	4b5e      	ldr	r3, [pc, #376]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5d      	ldr	r2, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fa41 	bl	8000dd8 <HAL_GetTick>
 8001956:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fa3d 	bl	8000dd8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e2a0      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196c:	4b54      	ldr	r3, [pc, #336]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b51      	ldr	r3, [pc, #324]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	494e      	ldr	r1, [pc, #312]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	e018      	b.n	80019c0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fa1d 	bl	8000dd8 <HAL_GetTick>
 800199e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff fa19 	bl	8000dd8 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e27c      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8082 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d05f      	beq.n	8001a96 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80019d6:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019dc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d037      	beq.n	8001a5c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e254      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01b      	beq.n	8001a46 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a14:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a1e:	f7ff f9db 	bl	8000dd8 <HAL_GetTick>
 8001a22:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff f9d7 	bl	8000dd8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b11      	cmp	r3, #17
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e23a      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ef      	bne.n	8001a26 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4c:	f023 0210 	bic.w	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	491a      	ldr	r1, [pc, #104]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a62:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f9b4 	bl	8000dd8 <HAL_GetTick>
 8001a70:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff f9b0 	bl	8000dd8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b11      	cmp	r3, #17
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e213      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ef      	beq.n	8001a74 <HAL_RCC_OscConfig+0x478>
 8001a94:	e01d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9c:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f997 	bl	8000dd8 <HAL_GetTick>
 8001aaa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aae:	f7ff f993 	bl	8000dd8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b11      	cmp	r3, #17
 8001aba:	d903      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e1f6      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
 8001ac0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac4:	4ba9      	ldr	r3, [pc, #676]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ed      	bne.n	8001aae <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80bd 	beq.w	8001c5a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ae6:	4ba1      	ldr	r3, [pc, #644]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10e      	bne.n	8001b10 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b9e      	ldr	r3, [pc, #632]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	4a9d      	ldr	r2, [pc, #628]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6593      	str	r3, [r2, #88]	; 0x58
 8001afe:	4b9b      	ldr	r3, [pc, #620]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b10:	4b97      	ldr	r3, [pc, #604]	; (8001d70 <HAL_RCC_OscConfig+0x774>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d118      	bne.n	8001b4e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b1c:	4b94      	ldr	r3, [pc, #592]	; (8001d70 <HAL_RCC_OscConfig+0x774>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a93      	ldr	r2, [pc, #588]	; (8001d70 <HAL_RCC_OscConfig+0x774>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b28:	f7ff f956 	bl	8000dd8 <HAL_GetTick>
 8001b2c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b30:	f7ff f952 	bl	8000dd8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1b5      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b42:	4b8b      	ldr	r3, [pc, #556]	; (8001d70 <HAL_RCC_OscConfig+0x774>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d02c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001b5a:	4b84      	ldr	r3, [pc, #528]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6c:	497f      	ldr	r1, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b80:	4b7a      	ldr	r3, [pc, #488]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	4a79      	ldr	r2, [pc, #484]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b90:	4b76      	ldr	r3, [pc, #472]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b96:	4a75      	ldr	r2, [pc, #468]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba0:	e018      	b.n	8001bd4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba8:	4a70      	ldr	r2, [pc, #448]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb2:	e00f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bb4:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	4a6c      	ldr	r2, [pc, #432]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bc4:	4b69      	ldr	r3, [pc, #420]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	4a68      	ldr	r2, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d016      	beq.n	8001c0a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f8fc 	bl	8000dd8 <HAL_GetTick>
 8001be0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff f8f8 	bl	8000dd8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e159      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	4b5c      	ldr	r3, [pc, #368]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ed      	beq.n	8001be4 <HAL_RCC_OscConfig+0x5e8>
 8001c08:	e01d      	b.n	8001c46 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f8e5 	bl	8000dd8 <HAL_GetTick>
 8001c0e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff f8e1 	bl	8000dd8 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e142      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ed      	bne.n	8001c12 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001c36:	4b4d      	ldr	r3, [pc, #308]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3c:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d105      	bne.n	8001c5a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	4a46      	ldr	r2, [pc, #280]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d03c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c74:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f8ab 	bl	8000dd8 <HAL_GetTick>
 8001c82:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c86:	f7ff f8a7 	bl	8000dd8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e10a      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0ef      	beq.n	8001c86 <HAL_RCC_OscConfig+0x68a>
 8001ca6:	e01b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cae:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f88e 	bl	8000dd8 <HAL_GetTick>
 8001cbc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc0:	f7ff f88a 	bl	8000dd8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0ed      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ef      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80e1 	beq.w	8001eac <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	f040 80b5 	bne.w	8001e5e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d124      	bne.n	8001d52 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	3b01      	subs	r3, #1
 8001d14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d11b      	bne.n	8001d52 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d113      	bne.n	8001d52 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	085b      	lsrs	r3, r3, #1
 8001d36:	3b01      	subs	r3, #1
 8001d38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d05f      	beq.n	8001e12 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d05a      	beq.n	8001e0e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a03      	ldr	r2, [pc, #12]	; (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d64:	f7ff f838 	bl	8000dd8 <HAL_GetTick>
 8001d68:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6a:	e00c      	b.n	8001d86 <HAL_RCC_OscConfig+0x78a>
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f830 	bl	8000dd8 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e093      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d86:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <HAL_RCC_OscConfig+0x8c0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001da2:	3a01      	subs	r2, #1
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	4311      	orrs	r1, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dac:	0212      	lsls	r2, r2, #8
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001db4:	0852      	lsrs	r2, r2, #1
 8001db6:	3a01      	subs	r2, #1
 8001db8:	0552      	lsls	r2, r2, #21
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dc0:	0852      	lsrs	r2, r2, #1
 8001dc2:	3a01      	subs	r2, #1
 8001dc4:	0652      	lsls	r2, r2, #25
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	493b      	ldr	r1, [pc, #236]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dce:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a39      	ldr	r2, [pc, #228]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dda:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	4a36      	ldr	r2, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de6:	f7fe fff7 	bl	8000dd8 <HAL_GetTick>
 8001dea:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe fff3 	bl	8000dd8 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e056      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e0c:	e04e      	b.n	8001eac <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e04d      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d146      	bne.n	8001eac <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a25      	ldr	r2, [pc, #148]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e28:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e2a:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e34:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e36:	f7fe ffcf 	bl	8000dd8 <HAL_GetTick>
 8001e3a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe ffcb 	bl	8000dd8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e02e      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x842>
 8001e5c:	e026      	b.n	8001eac <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	d021      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe ffb2 	bl	8000dd8 <HAL_GetTick>
 8001e74:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7fe ffae 	bl	8000dd8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e011      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_RCC_OscConfig+0x8bc>)
 8001e9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ea0:	f023 0303 	bic.w	r3, r3, #3
 8001ea4:	60d3      	str	r3, [r2, #12]
 8001ea6:	e001      	b.n	8001eac <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3728      	adds	r7, #40	; 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	f99f808c 	.word	0xf99f808c

08001ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0e7      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b75      	ldr	r3, [pc, #468]	; (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b72      	ldr	r3, [pc, #456]	; (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4970      	ldr	r1, [pc, #448]	; (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b6e      	ldr	r3, [pc, #440]	; (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0cf      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d908      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4960      	ldr	r1, [pc, #384]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d04c      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d121      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0a6      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5e:	4b54      	ldr	r3, [pc, #336]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e09a      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f76:	4b4e      	ldr	r3, [pc, #312]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e08e      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e086      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4943      	ldr	r1, [pc, #268]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa8:	f7fe ff16 	bl	8000dd8 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7fe ff12 	bl	8000dd8 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e06e      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 020c 	and.w	r2, r3, #12
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d208      	bcs.n	8002006 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	492b      	ldr	r1, [pc, #172]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002006:	4b29      	ldr	r3, [pc, #164]	; (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d210      	bcs.n	8002036 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 0207 	bic.w	r2, r3, #7
 800201c:	4923      	ldr	r1, [pc, #140]	; (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002024:	4b21      	ldr	r3, [pc, #132]	; (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e036      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4918      	ldr	r1, [pc, #96]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4910      	ldr	r1, [pc, #64]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002074:	f000 f824 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	490b      	ldr	r1, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x1f4>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002092:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1fc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fe4d 	bl	8000d38 <HAL_InitTick>
 800209e:	4603      	mov	r3, r0
 80020a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80020a2:	7afb      	ldrb	r3, [r7, #11]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40022000 	.word	0x40022000
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08004b08 	.word	0x08004b08
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000004 	.word	0x20000004

080020c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d8:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x34>
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d121      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d11e      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f4:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002100:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e005      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002110:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800211c:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10d      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d102      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	e004      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d101      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002146:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d134      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800214e:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0xa6>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d003      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0xac>
 8002164:	e005      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002168:	617b      	str	r3, [r7, #20]
      break;
 800216a:	e005      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800216e:	617b      	str	r3, [r7, #20]
      break;
 8002170:	e002      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	617b      	str	r3, [r7, #20]
      break;
 8002176:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	3301      	adds	r3, #1
 8002184:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	fb03 f202 	mul.w	r2, r3, r2
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	0e5b      	lsrs	r3, r3, #25
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	3301      	adds	r3, #1
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021b8:	69bb      	ldr	r3, [r7, #24]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08004b20 	.word	0x08004b20
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	007a1200 	.word	0x007a1200

080021d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_RCC_GetHCLKFreq+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021f4:	f7ff fff0 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4904      	ldr	r1, [pc, #16]	; (8002218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	08004b18 	.word	0x08004b18

0800221c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002220:	f7ff ffda 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	0adb      	lsrs	r3, r3, #11
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4904      	ldr	r1, [pc, #16]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08004b18 	.word	0x08004b18

08002248 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002260:	f7ff f968 	bl	8001534 <HAL_PWREx_GetVoltageRange>
 8002264:	6178      	str	r0, [r7, #20]
 8002266:	e014      	b.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a24      	ldr	r2, [pc, #144]	; (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002280:	f7ff f958 	bl	8001534 <HAL_PWREx_GetVoltageRange>
 8002284:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002290:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002298:	d10b      	bne.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b80      	cmp	r3, #128	; 0x80
 800229e:	d919      	bls.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2ba0      	cmp	r3, #160	; 0xa0
 80022a4:	d902      	bls.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a6:	2302      	movs	r3, #2
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	e013      	b.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ac:	2301      	movs	r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e010      	b.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b80      	cmp	r3, #128	; 0x80
 80022b6:	d902      	bls.n	80022be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022b8:	2303      	movs	r3, #3
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	e00a      	b.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d102      	bne.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022c4:	2302      	movs	r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	e004      	b.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b70      	cmp	r3, #112	; 0x70
 80022ce:	d101      	bne.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d0:	2301      	movs	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 0207 	bic.w	r2, r3, #7
 80022dc:	4909      	ldr	r1, [pc, #36]	; (8002304 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	40022000 	.word	0x40022000

08002308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002310:	2300      	movs	r3, #0
 8002312:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002314:	2300      	movs	r3, #0
 8002316:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 809e 	beq.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	4b40      	ldr	r3, [pc, #256]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	; 0x58
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002358:	2301      	movs	r3, #1
 800235a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235c:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a39      	ldr	r2, [pc, #228]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002368:	f7fe fd36 	bl	8000dd8 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800236e:	e009      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002370:	f7fe fd32 	bl	8000dd8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d902      	bls.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	74fb      	strb	r3, [r7, #19]
        break;
 8002382:	e005      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002384:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ef      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d15a      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002396:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01e      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d019      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023de:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fcf2 	bl	8000dd8 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	e00b      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fcee 	bl	8000dd8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d902      	bls.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	74fb      	strb	r3, [r7, #19]
            break;
 800240e:	e006      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ec      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10b      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4904      	ldr	r1, [pc, #16]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800243a:	e009      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	74bb      	strb	r3, [r7, #18]
 8002440:	e006      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002450:	7c7b      	ldrb	r3, [r7, #17]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4b6e      	ldr	r3, [pc, #440]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	4a6d      	ldr	r2, [pc, #436]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246e:	4b68      	ldr	r3, [pc, #416]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 0203 	bic.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4964      	ldr	r1, [pc, #400]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002490:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 020c 	bic.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	495c      	ldr	r1, [pc, #368]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b2:	4b57      	ldr	r3, [pc, #348]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4953      	ldr	r1, [pc, #332]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024d4:	4b4e      	ldr	r3, [pc, #312]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	494b      	ldr	r1, [pc, #300]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024f6:	4b46      	ldr	r3, [pc, #280]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4942      	ldr	r1, [pc, #264]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002518:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	493a      	ldr	r1, [pc, #232]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800253a:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4931      	ldr	r1, [pc, #196]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800255c:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4929      	ldr	r1, [pc, #164]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	4920      	ldr	r1, [pc, #128]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d015      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	4918      	ldr	r1, [pc, #96]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025be:	d105      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d015      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	490a      	ldr	r1, [pc, #40]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f6:	d105      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002602:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002604:	7cbb      	ldrb	r3, [r7, #18]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e049      	b.n	80026ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fa70 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 fb52 	bl	8002cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e049      	b.n	8002768 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d106      	bne.n	80026ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f841 	bl	8002770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f000 fafb 	bl	8002cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_TIM_PWM_Start+0x24>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e03c      	b.n	8002822 <HAL_TIM_PWM_Start+0x9e>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d109      	bne.n	80027c2 <HAL_TIM_PWM_Start+0x3e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	bf14      	ite	ne
 80027ba:	2301      	movne	r3, #1
 80027bc:	2300      	moveq	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	e02f      	b.n	8002822 <HAL_TIM_PWM_Start+0x9e>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d109      	bne.n	80027dc <HAL_TIM_PWM_Start+0x58>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	bf14      	ite	ne
 80027d4:	2301      	movne	r3, #1
 80027d6:	2300      	moveq	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	e022      	b.n	8002822 <HAL_TIM_PWM_Start+0x9e>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d109      	bne.n	80027f6 <HAL_TIM_PWM_Start+0x72>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	bf14      	ite	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	2300      	moveq	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	e015      	b.n	8002822 <HAL_TIM_PWM_Start+0x9e>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d109      	bne.n	8002810 <HAL_TIM_PWM_Start+0x8c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e008      	b.n	8002822 <HAL_TIM_PWM_Start+0x9e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e07e      	b.n	8002928 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <HAL_TIM_PWM_Start+0xb6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002838:	e023      	b.n	8002882 <HAL_TIM_PWM_Start+0xfe>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d104      	bne.n	800284a <HAL_TIM_PWM_Start+0xc6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002848:	e01b      	b.n	8002882 <HAL_TIM_PWM_Start+0xfe>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d104      	bne.n	800285a <HAL_TIM_PWM_Start+0xd6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002858:	e013      	b.n	8002882 <HAL_TIM_PWM_Start+0xfe>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b0c      	cmp	r3, #12
 800285e:	d104      	bne.n	800286a <HAL_TIM_PWM_Start+0xe6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002868:	e00b      	b.n	8002882 <HAL_TIM_PWM_Start+0xfe>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b10      	cmp	r3, #16
 800286e:	d104      	bne.n	800287a <HAL_TIM_PWM_Start+0xf6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002878:	e003      	b.n	8002882 <HAL_TIM_PWM_Start+0xfe>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2201      	movs	r2, #1
 8002888:	6839      	ldr	r1, [r7, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fdb2 	bl	80033f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a26      	ldr	r2, [pc, #152]	; (8002930 <HAL_TIM_PWM_Start+0x1ac>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_TIM_PWM_Start+0x12a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a25      	ldr	r2, [pc, #148]	; (8002934 <HAL_TIM_PWM_Start+0x1b0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_TIM_PWM_Start+0x12a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_TIM_PWM_Start+0x1b4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_PWM_Start+0x12e>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_TIM_PWM_Start+0x130>
 80028b2:	2300      	movs	r3, #0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_TIM_PWM_Start+0x1ac>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_TIM_PWM_Start+0x162>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028da:	d004      	beq.n	80028e6 <HAL_TIM_PWM_Start+0x162>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <HAL_TIM_PWM_Start+0x1b0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d115      	bne.n	8002912 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <HAL_TIM_PWM_Start+0x1b8>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d015      	beq.n	8002924 <HAL_TIM_PWM_Start+0x1a0>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d011      	beq.n	8002924 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	e008      	b.n	8002924 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e000      	b.n	8002926 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40014000 	.word	0x40014000
 8002938:	40014400 	.word	0x40014400
 800293c:	00010007 	.word	0x00010007

08002940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800295a:	2302      	movs	r3, #2
 800295c:	e0ff      	b.n	8002b5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b14      	cmp	r3, #20
 800296a:	f200 80f0 	bhi.w	8002b4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	080029c9 	.word	0x080029c9
 8002978:	08002b4f 	.word	0x08002b4f
 800297c:	08002b4f 	.word	0x08002b4f
 8002980:	08002b4f 	.word	0x08002b4f
 8002984:	08002a09 	.word	0x08002a09
 8002988:	08002b4f 	.word	0x08002b4f
 800298c:	08002b4f 	.word	0x08002b4f
 8002990:	08002b4f 	.word	0x08002b4f
 8002994:	08002a4b 	.word	0x08002a4b
 8002998:	08002b4f 	.word	0x08002b4f
 800299c:	08002b4f 	.word	0x08002b4f
 80029a0:	08002b4f 	.word	0x08002b4f
 80029a4:	08002a8b 	.word	0x08002a8b
 80029a8:	08002b4f 	.word	0x08002b4f
 80029ac:	08002b4f 	.word	0x08002b4f
 80029b0:	08002b4f 	.word	0x08002b4f
 80029b4:	08002acd 	.word	0x08002acd
 80029b8:	08002b4f 	.word	0x08002b4f
 80029bc:	08002b4f 	.word	0x08002b4f
 80029c0:	08002b4f 	.word	0x08002b4f
 80029c4:	08002b0d 	.word	0x08002b0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f9f8 	bl	8002dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0208 	orr.w	r2, r2, #8
 80029e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0204 	bic.w	r2, r2, #4
 80029f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6999      	ldr	r1, [r3, #24]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	619a      	str	r2, [r3, #24]
      break;
 8002a06:	e0a5      	b.n	8002b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fa54 	bl	8002ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6999      	ldr	r1, [r3, #24]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	021a      	lsls	r2, r3, #8
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	619a      	str	r2, [r3, #24]
      break;
 8002a48:	e084      	b.n	8002b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 faad 	bl	8002fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0208 	orr.w	r2, r2, #8
 8002a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0204 	bic.w	r2, r2, #4
 8002a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69d9      	ldr	r1, [r3, #28]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	61da      	str	r2, [r3, #28]
      break;
 8002a88:	e064      	b.n	8002b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fb05 	bl	80030a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69d9      	ldr	r1, [r3, #28]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	021a      	lsls	r2, r3, #8
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	61da      	str	r2, [r3, #28]
      break;
 8002aca:	e043      	b.n	8002b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fb42 	bl	800315c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0208 	orr.w	r2, r2, #8
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b0a:	e023      	b.n	8002b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fb7a 	bl	800320c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	021a      	lsls	r2, r3, #8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b4c:	e002      	b.n	8002b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
      break;
 8002b52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop

08002b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_TIM_ConfigClockSource+0x1c>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e0b6      	b.n	8002cf2 <HAL_TIM_ConfigClockSource+0x18a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc0:	d03e      	beq.n	8002c40 <HAL_TIM_ConfigClockSource+0xd8>
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc6:	f200 8087 	bhi.w	8002cd8 <HAL_TIM_ConfigClockSource+0x170>
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bce:	f000 8086 	beq.w	8002cde <HAL_TIM_ConfigClockSource+0x176>
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	d87f      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x170>
 8002bd8:	2b70      	cmp	r3, #112	; 0x70
 8002bda:	d01a      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0xaa>
 8002bdc:	2b70      	cmp	r3, #112	; 0x70
 8002bde:	d87b      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x170>
 8002be0:	2b60      	cmp	r3, #96	; 0x60
 8002be2:	d050      	beq.n	8002c86 <HAL_TIM_ConfigClockSource+0x11e>
 8002be4:	2b60      	cmp	r3, #96	; 0x60
 8002be6:	d877      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x170>
 8002be8:	2b50      	cmp	r3, #80	; 0x50
 8002bea:	d03c      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0xfe>
 8002bec:	2b50      	cmp	r3, #80	; 0x50
 8002bee:	d873      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x170>
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d058      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0x13e>
 8002bf4:	2b40      	cmp	r3, #64	; 0x40
 8002bf6:	d86f      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x170>
 8002bf8:	2b30      	cmp	r3, #48	; 0x30
 8002bfa:	d064      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x15e>
 8002bfc:	2b30      	cmp	r3, #48	; 0x30
 8002bfe:	d86b      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x170>
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d060      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d867      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x170>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d05c      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d05a      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c10:	e062      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6899      	ldr	r1, [r3, #8]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f000 fbc7 	bl	80033b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	609a      	str	r2, [r3, #8]
      break;
 8002c3e:	e04f      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f000 fbb0 	bl	80033b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c62:	609a      	str	r2, [r3, #8]
      break;
 8002c64:	e03c      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6859      	ldr	r1, [r3, #4]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	461a      	mov	r2, r3
 8002c74:	f000 fb24 	bl	80032c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2150      	movs	r1, #80	; 0x50
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fb7d 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8002c84:	e02c      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f000 fb43 	bl	800331e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2160      	movs	r1, #96	; 0x60
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fb6d 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8002ca4:	e01c      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f000 fb04 	bl	80032c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2140      	movs	r1, #64	; 0x40
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fb5d 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8002cc4:	e00c      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f000 fb54 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8002cd6:	e003      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e000      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002cde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a2a      	ldr	r2, [pc, #168]	; (8002db8 <TIM_Base_SetConfig+0xbc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <TIM_Base_SetConfig+0x20>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d108      	bne.n	8002d2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <TIM_Base_SetConfig+0xbc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <TIM_Base_SetConfig+0x52>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d007      	beq.n	8002d4e <TIM_Base_SetConfig+0x52>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <TIM_Base_SetConfig+0xc0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <TIM_Base_SetConfig+0x52>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <TIM_Base_SetConfig+0xc4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d108      	bne.n	8002d60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <TIM_Base_SetConfig+0xbc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <TIM_Base_SetConfig+0xa0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <TIM_Base_SetConfig+0xc0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0xa0>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <TIM_Base_SetConfig+0xc4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d103      	bne.n	8002da4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	615a      	str	r2, [r3, #20]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400

08002dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f023 0201 	bic.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0303 	bic.w	r3, r3, #3
 8002dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 0302 	bic.w	r3, r3, #2
 8002e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <TIM_OC1_SetConfig+0xec>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_OC1_SetConfig+0x70>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <TIM_OC1_SetConfig+0xf0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_OC1_SetConfig+0x70>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <TIM_OC1_SetConfig+0xf4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10c      	bne.n	8002e4e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 0308 	bic.w	r3, r3, #8
 8002e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <TIM_OC1_SetConfig+0xec>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <TIM_OC1_SetConfig+0xa2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <TIM_OC1_SetConfig+0xf0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_OC1_SetConfig+0xa2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <TIM_OC1_SetConfig+0xf4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d111      	bne.n	8002e8a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	621a      	str	r2, [r3, #32]
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40014400 	.word	0x40014400

08002ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f023 0210 	bic.w	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0320 	bic.w	r3, r3, #32
 8002f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <TIM_OC2_SetConfig+0xe8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10d      	bne.n	8002f3c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <TIM_OC2_SetConfig+0xe8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <TIM_OC2_SetConfig+0x98>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <TIM_OC2_SetConfig+0xec>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_OC2_SetConfig+0x98>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <TIM_OC2_SetConfig+0xf0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d113      	bne.n	8002f7c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40014000 	.word	0x40014000
 8002fac:	40014400 	.word	0x40014400

08002fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a21      	ldr	r2, [pc, #132]	; (8003094 <TIM_OC3_SetConfig+0xe4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10d      	bne.n	800302e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800302c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a18      	ldr	r2, [pc, #96]	; (8003094 <TIM_OC3_SetConfig+0xe4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <TIM_OC3_SetConfig+0x96>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a17      	ldr	r2, [pc, #92]	; (8003098 <TIM_OC3_SetConfig+0xe8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_OC3_SetConfig+0x96>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a16      	ldr	r2, [pc, #88]	; (800309c <TIM_OC3_SetConfig+0xec>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d113      	bne.n	800306e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800304c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400

080030a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	031b      	lsls	r3, r3, #12
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a14      	ldr	r2, [pc, #80]	; (8003150 <TIM_OC4_SetConfig+0xb0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d007      	beq.n	8003114 <TIM_OC4_SetConfig+0x74>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <TIM_OC4_SetConfig+0xb4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_OC4_SetConfig+0x74>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a12      	ldr	r2, [pc, #72]	; (8003158 <TIM_OC4_SetConfig+0xb8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d109      	bne.n	8003128 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800311a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	019b      	lsls	r3, r3, #6
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400

0800315c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a13      	ldr	r2, [pc, #76]	; (8003200 <TIM_OC5_SetConfig+0xa4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <TIM_OC5_SetConfig+0x6a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a12      	ldr	r2, [pc, #72]	; (8003204 <TIM_OC5_SetConfig+0xa8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d003      	beq.n	80031c6 <TIM_OC5_SetConfig+0x6a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <TIM_OC5_SetConfig+0xac>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d109      	bne.n	80031da <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	621a      	str	r2, [r3, #32]
}
 80031f4:	bf00      	nop
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40014000 	.word	0x40014000
 8003208:	40014400 	.word	0x40014400

0800320c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800323a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	051b      	lsls	r3, r3, #20
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <TIM_OC6_SetConfig+0xa8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <TIM_OC6_SetConfig+0x6c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <TIM_OC6_SetConfig+0xac>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_OC6_SetConfig+0x6c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a12      	ldr	r2, [pc, #72]	; (80032bc <TIM_OC6_SetConfig+0xb0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d109      	bne.n	800328c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	029b      	lsls	r3, r3, #10
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40014400 	.word	0x40014400

080032c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f023 0201 	bic.w	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f023 030a 	bic.w	r3, r3, #10
 80032fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800331e:	b480      	push	{r7}
 8003320:	b087      	sub	sp, #28
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f023 0210 	bic.w	r2, r3, #16
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	031b      	lsls	r3, r3, #12
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800335a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	f043 0307 	orr.w	r3, r3, #7
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	609a      	str	r2, [r3, #8]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	021a      	lsls	r2, r3, #8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2201      	movs	r2, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1a      	ldr	r2, [r3, #32]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	43db      	mvns	r3, r3
 8003416:	401a      	ands	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003454:	2302      	movs	r3, #2
 8003456:	e04f      	b.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a21      	ldr	r2, [pc, #132]	; (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d108      	bne.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003488:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a14      	ldr	r2, [pc, #80]	; (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d004      	beq.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10c      	bne.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40014000 	.word	0x40014000

0800350c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003524:	2302      	movs	r3, #2
 8003526:	e060      	b.n	80035ea <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d115      	bne.n	80035d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	051b      	lsls	r3, r3, #20
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40012c00 	.word	0x40012c00

080035fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e040      	b.n	8003690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd fa26 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f992 	bl	8003964 <UART_SetConfig>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e022      	b.n	8003690 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fbe0 	bl	8003e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fc67 	bl	8003f5c <UART_CheckIdleState>
 800368e:	4603      	mov	r3, r0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	f040 8082 	bne.w	80037b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_UART_Transmit+0x26>
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e07a      	b.n	80037b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_UART_Transmit+0x38>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e073      	b.n	80037b8 <HAL_UART_Transmit+0x120>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2221      	movs	r2, #33	; 0x21
 80036e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e6:	f7fd fb77 	bl	8000dd8 <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	d108      	bne.n	8003718 <HAL_UART_Transmit+0x80>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e003      	b.n	8003720 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003728:	e02d      	b.n	8003786 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fc5a 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e039      	b.n	80037b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003756:	b292      	uxth	r2, r2
 8003758:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3302      	adds	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e008      	b.n	8003774 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	b292      	uxth	r2, r2
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3301      	adds	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1cb      	bne.n	800372a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2140      	movs	r1, #64	; 0x40
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fc26 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e005      	b.n	80037b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	f040 80bf 	bne.w	8003958 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_UART_Receive+0x26>
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0b7      	b.n	800395a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_UART_Receive+0x38>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e0b0      	b.n	800395a <HAL_UART_Receive+0x19a>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2222      	movs	r2, #34	; 0x22
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003814:	f7fd fae0 	bl	8000dd8 <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	88fa      	ldrh	r2, [r7, #6]
 8003826:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003832:	d10e      	bne.n	8003852 <HAL_UART_Receive+0x92>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <HAL_UART_Receive+0x88>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003842:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003846:	e02d      	b.n	80038a4 <HAL_UART_Receive+0xe4>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003850:	e028      	b.n	80038a4 <HAL_UART_Receive+0xe4>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10d      	bne.n	8003876 <HAL_UART_Receive+0xb6>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d104      	bne.n	800386c <HAL_UART_Receive+0xac>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	22ff      	movs	r2, #255	; 0xff
 8003866:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800386a:	e01b      	b.n	80038a4 <HAL_UART_Receive+0xe4>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	227f      	movs	r2, #127	; 0x7f
 8003870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003874:	e016      	b.n	80038a4 <HAL_UART_Receive+0xe4>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800387e:	d10d      	bne.n	800389c <HAL_UART_Receive+0xdc>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <HAL_UART_Receive+0xd2>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	227f      	movs	r2, #127	; 0x7f
 800388c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003890:	e008      	b.n	80038a4 <HAL_UART_Receive+0xe4>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	223f      	movs	r2, #63	; 0x3f
 8003896:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800389a:	e003      	b.n	80038a4 <HAL_UART_Receive+0xe4>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038aa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d108      	bne.n	80038c8 <HAL_UART_Receive+0x108>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e003      	b.n	80038d0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80038d8:	e033      	b.n	8003942 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2120      	movs	r1, #32
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fb82 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e032      	b.n	800395a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10c      	bne.n	8003914 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003900:	b29a      	uxth	r2, r3
 8003902:	8a7b      	ldrh	r3, [r7, #18]
 8003904:	4013      	ands	r3, r2
 8003906:	b29a      	uxth	r2, r3
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	3302      	adds	r3, #2
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e00d      	b.n	8003930 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800391a:	b29b      	uxth	r3, r3
 800391c:	b2da      	uxtb	r2, r3
 800391e:	8a7b      	ldrh	r3, [r7, #18]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	4013      	ands	r3, r2
 8003924:	b2da      	uxtb	r2, r3
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3301      	adds	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1c5      	bne.n	80038da <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b08a      	sub	sp, #40	; 0x28
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4313      	orrs	r3, r2
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b9e      	ldr	r3, [pc, #632]	; (8003c0c <UART_SetConfig+0x2a8>)
 8003994:	4013      	ands	r3, r2
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800399c:	430b      	orrs	r3, r1
 800399e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a93      	ldr	r2, [pc, #588]	; (8003c10 <UART_SetConfig+0x2ac>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	4313      	orrs	r3, r2
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	430a      	orrs	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a8a      	ldr	r2, [pc, #552]	; (8003c14 <UART_SetConfig+0x2b0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d126      	bne.n	8003a3c <UART_SetConfig+0xd8>
 80039ee:	4b8a      	ldr	r3, [pc, #552]	; (8003c18 <UART_SetConfig+0x2b4>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d81b      	bhi.n	8003a34 <UART_SetConfig+0xd0>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0xa0>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a25 	.word	0x08003a25
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003a2d 	.word	0x08003a2d
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e0ab      	b.n	8003b74 <UART_SetConfig+0x210>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e0a7      	b.n	8003b74 <UART_SetConfig+0x210>
 8003a24:	2304      	movs	r3, #4
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e0a3      	b.n	8003b74 <UART_SetConfig+0x210>
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e09f      	b.n	8003b74 <UART_SetConfig+0x210>
 8003a34:	2310      	movs	r3, #16
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e09b      	b.n	8003b74 <UART_SetConfig+0x210>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a76      	ldr	r2, [pc, #472]	; (8003c1c <UART_SetConfig+0x2b8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d138      	bne.n	8003ab8 <UART_SetConfig+0x154>
 8003a46:	4b74      	ldr	r3, [pc, #464]	; (8003c18 <UART_SetConfig+0x2b4>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	d82d      	bhi.n	8003ab0 <UART_SetConfig+0x14c>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0xf8>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003ab1 	.word	0x08003ab1
 8003a64:	08003ab1 	.word	0x08003ab1
 8003a68:	08003ab1 	.word	0x08003ab1
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003ab1 	.word	0x08003ab1
 8003a74:	08003ab1 	.word	0x08003ab1
 8003a78:	08003ab1 	.word	0x08003ab1
 8003a7c:	08003a99 	.word	0x08003a99
 8003a80:	08003ab1 	.word	0x08003ab1
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003aa9 	.word	0x08003aa9
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e06d      	b.n	8003b74 <UART_SetConfig+0x210>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e069      	b.n	8003b74 <UART_SetConfig+0x210>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e065      	b.n	8003b74 <UART_SetConfig+0x210>
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e061      	b.n	8003b74 <UART_SetConfig+0x210>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e05d      	b.n	8003b74 <UART_SetConfig+0x210>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <UART_SetConfig+0x2bc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d125      	bne.n	8003b0e <UART_SetConfig+0x1aa>
 8003ac2:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <UART_SetConfig+0x2b4>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d016      	beq.n	8003afe <UART_SetConfig+0x19a>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d818      	bhi.n	8003b06 <UART_SetConfig+0x1a2>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d00a      	beq.n	8003aee <UART_SetConfig+0x18a>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d814      	bhi.n	8003b06 <UART_SetConfig+0x1a2>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <UART_SetConfig+0x182>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d008      	beq.n	8003af6 <UART_SetConfig+0x192>
 8003ae4:	e00f      	b.n	8003b06 <UART_SetConfig+0x1a2>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aec:	e042      	b.n	8003b74 <UART_SetConfig+0x210>
 8003aee:	2302      	movs	r3, #2
 8003af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af4:	e03e      	b.n	8003b74 <UART_SetConfig+0x210>
 8003af6:	2304      	movs	r3, #4
 8003af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afc:	e03a      	b.n	8003b74 <UART_SetConfig+0x210>
 8003afe:	2308      	movs	r3, #8
 8003b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b04:	e036      	b.n	8003b74 <UART_SetConfig+0x210>
 8003b06:	2310      	movs	r3, #16
 8003b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0c:	e032      	b.n	8003b74 <UART_SetConfig+0x210>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a3f      	ldr	r2, [pc, #252]	; (8003c10 <UART_SetConfig+0x2ac>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d12a      	bne.n	8003b6e <UART_SetConfig+0x20a>
 8003b18:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <UART_SetConfig+0x2b4>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b26:	d01a      	beq.n	8003b5e <UART_SetConfig+0x1fa>
 8003b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b2c:	d81b      	bhi.n	8003b66 <UART_SetConfig+0x202>
 8003b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b32:	d00c      	beq.n	8003b4e <UART_SetConfig+0x1ea>
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b38:	d815      	bhi.n	8003b66 <UART_SetConfig+0x202>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <UART_SetConfig+0x1e2>
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b42:	d008      	beq.n	8003b56 <UART_SetConfig+0x1f2>
 8003b44:	e00f      	b.n	8003b66 <UART_SetConfig+0x202>
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4c:	e012      	b.n	8003b74 <UART_SetConfig+0x210>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b54:	e00e      	b.n	8003b74 <UART_SetConfig+0x210>
 8003b56:	2304      	movs	r3, #4
 8003b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5c:	e00a      	b.n	8003b74 <UART_SetConfig+0x210>
 8003b5e:	2308      	movs	r3, #8
 8003b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b64:	e006      	b.n	8003b74 <UART_SetConfig+0x210>
 8003b66:	2310      	movs	r3, #16
 8003b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6c:	e002      	b.n	8003b74 <UART_SetConfig+0x210>
 8003b6e:	2310      	movs	r3, #16
 8003b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <UART_SetConfig+0x2ac>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	f040 808a 	bne.w	8003c94 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d824      	bhi.n	8003bd2 <UART_SetConfig+0x26e>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0x22c>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bd3 	.word	0x08003bd3
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bd3 	.word	0x08003bd3
 8003ba0:	08003bc3 	.word	0x08003bc3
 8003ba4:	08003bd3 	.word	0x08003bd3
 8003ba8:	08003bd3 	.word	0x08003bd3
 8003bac:	08003bd3 	.word	0x08003bd3
 8003bb0:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7fe fb1c 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	61f8      	str	r0, [r7, #28]
        break;
 8003bba:	e010      	b.n	8003bde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <UART_SetConfig+0x2c0>)
 8003bbe:	61fb      	str	r3, [r7, #28]
        break;
 8003bc0:	e00d      	b.n	8003bde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc2:	f7fe fa7d 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003bc6:	61f8      	str	r0, [r7, #28]
        break;
 8003bc8:	e009      	b.n	8003bde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	61fb      	str	r3, [r7, #28]
        break;
 8003bd0:	e005      	b.n	8003bde <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8109 	beq.w	8003df8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4413      	add	r3, r2
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d305      	bcc.n	8003c02 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d912      	bls.n	8003c28 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c08:	e0f6      	b.n	8003df8 <UART_SetConfig+0x494>
 8003c0a:	bf00      	nop
 8003c0c:	efff69f3 	.word	0xefff69f3
 8003c10:	40008000 	.word	0x40008000
 8003c14:	40013800 	.word	0x40013800
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40004400 	.word	0x40004400
 8003c20:	40004800 	.word	0x40004800
 8003c24:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	461c      	mov	r4, r3
 8003c2e:	4615      	mov	r5, r2
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	022b      	lsls	r3, r5, #8
 8003c3a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c3e:	0222      	lsls	r2, r4, #8
 8003c40:	68f9      	ldr	r1, [r7, #12]
 8003c42:	6849      	ldr	r1, [r1, #4]
 8003c44:	0849      	lsrs	r1, r1, #1
 8003c46:	2000      	movs	r0, #0
 8003c48:	4688      	mov	r8, r1
 8003c4a:	4681      	mov	r9, r0
 8003c4c:	eb12 0a08 	adds.w	sl, r2, r8
 8003c50:	eb43 0b09 	adc.w	fp, r3, r9
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c62:	4650      	mov	r0, sl
 8003c64:	4659      	mov	r1, fp
 8003c66:	f7fc fb03 	bl	8000270 <__aeabi_uldivmod>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4613      	mov	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c78:	d308      	bcc.n	8003c8c <UART_SetConfig+0x328>
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c80:	d204      	bcs.n	8003c8c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	e0b5      	b.n	8003df8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c92:	e0b1      	b.n	8003df8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9c:	d15d      	bne.n	8003d5a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d827      	bhi.n	8003cf6 <UART_SetConfig+0x392>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <UART_SetConfig+0x348>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003ce1 	.word	0x08003ce1
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003cf7 	.word	0x08003cf7
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003cef 	.word	0x08003cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7fe fa8e 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	61f8      	str	r0, [r7, #28]
        break;
 8003cd6:	e014      	b.n	8003d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd8:	f7fe faa0 	bl	800221c <HAL_RCC_GetPCLK2Freq>
 8003cdc:	61f8      	str	r0, [r7, #28]
        break;
 8003cde:	e010      	b.n	8003d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce0:	4b4c      	ldr	r3, [pc, #304]	; (8003e14 <UART_SetConfig+0x4b0>)
 8003ce2:	61fb      	str	r3, [r7, #28]
        break;
 8003ce4:	e00d      	b.n	8003d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce6:	f7fe f9eb 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003cea:	61f8      	str	r0, [r7, #28]
        break;
 8003cec:	e009      	b.n	8003d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf2:	61fb      	str	r3, [r7, #28]
        break;
 8003cf4:	e005      	b.n	8003d02 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d077      	beq.n	8003df8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005a      	lsls	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	441a      	add	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b0f      	cmp	r3, #15
 8003d22:	d916      	bls.n	8003d52 <UART_SetConfig+0x3ee>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d212      	bcs.n	8003d52 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f023 030f 	bic.w	r3, r3, #15
 8003d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	8afb      	ldrh	r3, [r7, #22]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	8afa      	ldrh	r2, [r7, #22]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	e052      	b.n	8003df8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d58:	e04e      	b.n	8003df8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d827      	bhi.n	8003db2 <UART_SetConfig+0x44e>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0x404>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	08003d9d 	.word	0x08003d9d
 8003d74:	08003db3 	.word	0x08003db3
 8003d78:	08003da3 	.word	0x08003da3
 8003d7c:	08003db3 	.word	0x08003db3
 8003d80:	08003db3 	.word	0x08003db3
 8003d84:	08003db3 	.word	0x08003db3
 8003d88:	08003dab 	.word	0x08003dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f7fe fa30 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8003d90:	61f8      	str	r0, [r7, #28]
        break;
 8003d92:	e014      	b.n	8003dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d94:	f7fe fa42 	bl	800221c <HAL_RCC_GetPCLK2Freq>
 8003d98:	61f8      	str	r0, [r7, #28]
        break;
 8003d9a:	e010      	b.n	8003dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <UART_SetConfig+0x4b0>)
 8003d9e:	61fb      	str	r3, [r7, #28]
        break;
 8003da0:	e00d      	b.n	8003dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da2:	f7fe f98d 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003da6:	61f8      	str	r0, [r7, #28]
        break;
 8003da8:	e009      	b.n	8003dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dae:	61fb      	str	r3, [r7, #28]
        break;
 8003db0:	e005      	b.n	8003dbe <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d019      	beq.n	8003df8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	085a      	lsrs	r2, r3, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	441a      	add	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	d909      	bls.n	8003df2 <UART_SetConfig+0x48e>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	d205      	bcs.n	8003df2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	e002      	b.n	8003df8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e12:	bf00      	nop
 8003e14:	00f42400 	.word	0x00f42400

08003e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01a      	beq.n	8003f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f16:	d10a      	bne.n	8003f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f6c:	f7fc ff34 	bl	8000dd8 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d10e      	bne.n	8003f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f82d 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e023      	b.n	8003fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d10e      	bne.n	8003fca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f817 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e00d      	b.n	8003fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b09c      	sub	sp, #112	; 0x70
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffe:	e0a5      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004006:	f000 80a1 	beq.w	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fc fee5 	bl	8000dd8 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <UART_WaitOnFlagUntilTimeout+0x32>
 800401a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401c:	2b00      	cmp	r3, #0
 800401e:	d13e      	bne.n	800409e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004034:	667b      	str	r3, [r7, #100]	; 0x64
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800403e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004040:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800404c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	663b      	str	r3, [r7, #96]	; 0x60
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3308      	adds	r3, #8
 8004070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004072:	64ba      	str	r2, [r7, #72]	; 0x48
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e5      	bne.n	8004052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e067      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d04f      	beq.n	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ba:	d147      	bne.n	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
 80040e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	613b      	str	r3, [r7, #16]
   return(result);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004118:	623a      	str	r2, [r7, #32]
 800411a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	69f9      	ldr	r1, [r7, #28]
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	61bb      	str	r3, [r7, #24]
   return(result);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e010      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	429a      	cmp	r2, r3
 8004168:	f43f af4a 	beq.w	8004000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3770      	adds	r7, #112	; 0x70
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <__errno>:
 8004178:	4b01      	ldr	r3, [pc, #4]	; (8004180 <__errno+0x8>)
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	2000000c 	.word	0x2000000c

08004184 <__libc_init_array>:
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	4d0d      	ldr	r5, [pc, #52]	; (80041bc <__libc_init_array+0x38>)
 8004188:	4c0d      	ldr	r4, [pc, #52]	; (80041c0 <__libc_init_array+0x3c>)
 800418a:	1b64      	subs	r4, r4, r5
 800418c:	10a4      	asrs	r4, r4, #2
 800418e:	2600      	movs	r6, #0
 8004190:	42a6      	cmp	r6, r4
 8004192:	d109      	bne.n	80041a8 <__libc_init_array+0x24>
 8004194:	4d0b      	ldr	r5, [pc, #44]	; (80041c4 <__libc_init_array+0x40>)
 8004196:	4c0c      	ldr	r4, [pc, #48]	; (80041c8 <__libc_init_array+0x44>)
 8004198:	f000 fca8 	bl	8004aec <_init>
 800419c:	1b64      	subs	r4, r4, r5
 800419e:	10a4      	asrs	r4, r4, #2
 80041a0:	2600      	movs	r6, #0
 80041a2:	42a6      	cmp	r6, r4
 80041a4:	d105      	bne.n	80041b2 <__libc_init_array+0x2e>
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
 80041a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ac:	4798      	blx	r3
 80041ae:	3601      	adds	r6, #1
 80041b0:	e7ee      	b.n	8004190 <__libc_init_array+0xc>
 80041b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b6:	4798      	blx	r3
 80041b8:	3601      	adds	r6, #1
 80041ba:	e7f2      	b.n	80041a2 <__libc_init_array+0x1e>
 80041bc:	08004b8c 	.word	0x08004b8c
 80041c0:	08004b8c 	.word	0x08004b8c
 80041c4:	08004b8c 	.word	0x08004b8c
 80041c8:	08004b90 	.word	0x08004b90

080041cc <memset>:
 80041cc:	4402      	add	r2, r0
 80041ce:	4603      	mov	r3, r0
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	f803 1b01 	strb.w	r1, [r3], #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <_vsniprintf_r>:
 80041dc:	b530      	push	{r4, r5, lr}
 80041de:	4614      	mov	r4, r2
 80041e0:	2c00      	cmp	r4, #0
 80041e2:	b09b      	sub	sp, #108	; 0x6c
 80041e4:	4605      	mov	r5, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	da05      	bge.n	80041f6 <_vsniprintf_r+0x1a>
 80041ea:	238b      	movs	r3, #139	; 0x8b
 80041ec:	6003      	str	r3, [r0, #0]
 80041ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f2:	b01b      	add	sp, #108	; 0x6c
 80041f4:	bd30      	pop	{r4, r5, pc}
 80041f6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80041fa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80041fe:	bf14      	ite	ne
 8004200:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004204:	4623      	moveq	r3, r4
 8004206:	9302      	str	r3, [sp, #8]
 8004208:	9305      	str	r3, [sp, #20]
 800420a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800420e:	9100      	str	r1, [sp, #0]
 8004210:	9104      	str	r1, [sp, #16]
 8004212:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004216:	4669      	mov	r1, sp
 8004218:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800421a:	f000 f875 	bl	8004308 <_svfiprintf_r>
 800421e:	1c43      	adds	r3, r0, #1
 8004220:	bfbc      	itt	lt
 8004222:	238b      	movlt	r3, #139	; 0x8b
 8004224:	602b      	strlt	r3, [r5, #0]
 8004226:	2c00      	cmp	r4, #0
 8004228:	d0e3      	beq.n	80041f2 <_vsniprintf_r+0x16>
 800422a:	9b00      	ldr	r3, [sp, #0]
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e7df      	b.n	80041f2 <_vsniprintf_r+0x16>
	...

08004234 <vsniprintf>:
 8004234:	b507      	push	{r0, r1, r2, lr}
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	460a      	mov	r2, r1
 800423c:	4601      	mov	r1, r0
 800423e:	4803      	ldr	r0, [pc, #12]	; (800424c <vsniprintf+0x18>)
 8004240:	6800      	ldr	r0, [r0, #0]
 8004242:	f7ff ffcb 	bl	80041dc <_vsniprintf_r>
 8004246:	b003      	add	sp, #12
 8004248:	f85d fb04 	ldr.w	pc, [sp], #4
 800424c:	2000000c 	.word	0x2000000c

08004250 <__ssputs_r>:
 8004250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	688e      	ldr	r6, [r1, #8]
 8004256:	429e      	cmp	r6, r3
 8004258:	4682      	mov	sl, r0
 800425a:	460c      	mov	r4, r1
 800425c:	4690      	mov	r8, r2
 800425e:	461f      	mov	r7, r3
 8004260:	d838      	bhi.n	80042d4 <__ssputs_r+0x84>
 8004262:	898a      	ldrh	r2, [r1, #12]
 8004264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004268:	d032      	beq.n	80042d0 <__ssputs_r+0x80>
 800426a:	6825      	ldr	r5, [r4, #0]
 800426c:	6909      	ldr	r1, [r1, #16]
 800426e:	eba5 0901 	sub.w	r9, r5, r1
 8004272:	6965      	ldr	r5, [r4, #20]
 8004274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800427c:	3301      	adds	r3, #1
 800427e:	444b      	add	r3, r9
 8004280:	106d      	asrs	r5, r5, #1
 8004282:	429d      	cmp	r5, r3
 8004284:	bf38      	it	cc
 8004286:	461d      	movcc	r5, r3
 8004288:	0553      	lsls	r3, r2, #21
 800428a:	d531      	bpl.n	80042f0 <__ssputs_r+0xa0>
 800428c:	4629      	mov	r1, r5
 800428e:	f000 fb63 	bl	8004958 <_malloc_r>
 8004292:	4606      	mov	r6, r0
 8004294:	b950      	cbnz	r0, 80042ac <__ssputs_r+0x5c>
 8004296:	230c      	movs	r3, #12
 8004298:	f8ca 3000 	str.w	r3, [sl]
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ac:	6921      	ldr	r1, [r4, #16]
 80042ae:	464a      	mov	r2, r9
 80042b0:	f000 fabe 	bl	8004830 <memcpy>
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042be:	81a3      	strh	r3, [r4, #12]
 80042c0:	6126      	str	r6, [r4, #16]
 80042c2:	6165      	str	r5, [r4, #20]
 80042c4:	444e      	add	r6, r9
 80042c6:	eba5 0509 	sub.w	r5, r5, r9
 80042ca:	6026      	str	r6, [r4, #0]
 80042cc:	60a5      	str	r5, [r4, #8]
 80042ce:	463e      	mov	r6, r7
 80042d0:	42be      	cmp	r6, r7
 80042d2:	d900      	bls.n	80042d6 <__ssputs_r+0x86>
 80042d4:	463e      	mov	r6, r7
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	4632      	mov	r2, r6
 80042da:	4641      	mov	r1, r8
 80042dc:	f000 fab6 	bl	800484c <memmove>
 80042e0:	68a3      	ldr	r3, [r4, #8]
 80042e2:	1b9b      	subs	r3, r3, r6
 80042e4:	60a3      	str	r3, [r4, #8]
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	4433      	add	r3, r6
 80042ea:	6023      	str	r3, [r4, #0]
 80042ec:	2000      	movs	r0, #0
 80042ee:	e7db      	b.n	80042a8 <__ssputs_r+0x58>
 80042f0:	462a      	mov	r2, r5
 80042f2:	f000 fba5 	bl	8004a40 <_realloc_r>
 80042f6:	4606      	mov	r6, r0
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d1e1      	bne.n	80042c0 <__ssputs_r+0x70>
 80042fc:	6921      	ldr	r1, [r4, #16]
 80042fe:	4650      	mov	r0, sl
 8004300:	f000 fabe 	bl	8004880 <_free_r>
 8004304:	e7c7      	b.n	8004296 <__ssputs_r+0x46>
	...

08004308 <_svfiprintf_r>:
 8004308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430c:	4698      	mov	r8, r3
 800430e:	898b      	ldrh	r3, [r1, #12]
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	b09d      	sub	sp, #116	; 0x74
 8004314:	4607      	mov	r7, r0
 8004316:	460d      	mov	r5, r1
 8004318:	4614      	mov	r4, r2
 800431a:	d50e      	bpl.n	800433a <_svfiprintf_r+0x32>
 800431c:	690b      	ldr	r3, [r1, #16]
 800431e:	b963      	cbnz	r3, 800433a <_svfiprintf_r+0x32>
 8004320:	2140      	movs	r1, #64	; 0x40
 8004322:	f000 fb19 	bl	8004958 <_malloc_r>
 8004326:	6028      	str	r0, [r5, #0]
 8004328:	6128      	str	r0, [r5, #16]
 800432a:	b920      	cbnz	r0, 8004336 <_svfiprintf_r+0x2e>
 800432c:	230c      	movs	r3, #12
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004334:	e0d1      	b.n	80044da <_svfiprintf_r+0x1d2>
 8004336:	2340      	movs	r3, #64	; 0x40
 8004338:	616b      	str	r3, [r5, #20]
 800433a:	2300      	movs	r3, #0
 800433c:	9309      	str	r3, [sp, #36]	; 0x24
 800433e:	2320      	movs	r3, #32
 8004340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004344:	f8cd 800c 	str.w	r8, [sp, #12]
 8004348:	2330      	movs	r3, #48	; 0x30
 800434a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044f4 <_svfiprintf_r+0x1ec>
 800434e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004352:	f04f 0901 	mov.w	r9, #1
 8004356:	4623      	mov	r3, r4
 8004358:	469a      	mov	sl, r3
 800435a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800435e:	b10a      	cbz	r2, 8004364 <_svfiprintf_r+0x5c>
 8004360:	2a25      	cmp	r2, #37	; 0x25
 8004362:	d1f9      	bne.n	8004358 <_svfiprintf_r+0x50>
 8004364:	ebba 0b04 	subs.w	fp, sl, r4
 8004368:	d00b      	beq.n	8004382 <_svfiprintf_r+0x7a>
 800436a:	465b      	mov	r3, fp
 800436c:	4622      	mov	r2, r4
 800436e:	4629      	mov	r1, r5
 8004370:	4638      	mov	r0, r7
 8004372:	f7ff ff6d 	bl	8004250 <__ssputs_r>
 8004376:	3001      	adds	r0, #1
 8004378:	f000 80aa 	beq.w	80044d0 <_svfiprintf_r+0x1c8>
 800437c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800437e:	445a      	add	r2, fp
 8004380:	9209      	str	r2, [sp, #36]	; 0x24
 8004382:	f89a 3000 	ldrb.w	r3, [sl]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80a2 	beq.w	80044d0 <_svfiprintf_r+0x1c8>
 800438c:	2300      	movs	r3, #0
 800438e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004396:	f10a 0a01 	add.w	sl, sl, #1
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	9307      	str	r3, [sp, #28]
 800439e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043a2:	931a      	str	r3, [sp, #104]	; 0x68
 80043a4:	4654      	mov	r4, sl
 80043a6:	2205      	movs	r2, #5
 80043a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ac:	4851      	ldr	r0, [pc, #324]	; (80044f4 <_svfiprintf_r+0x1ec>)
 80043ae:	f7fb ff0f 	bl	80001d0 <memchr>
 80043b2:	9a04      	ldr	r2, [sp, #16]
 80043b4:	b9d8      	cbnz	r0, 80043ee <_svfiprintf_r+0xe6>
 80043b6:	06d0      	lsls	r0, r2, #27
 80043b8:	bf44      	itt	mi
 80043ba:	2320      	movmi	r3, #32
 80043bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c0:	0711      	lsls	r1, r2, #28
 80043c2:	bf44      	itt	mi
 80043c4:	232b      	movmi	r3, #43	; 0x2b
 80043c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ca:	f89a 3000 	ldrb.w	r3, [sl]
 80043ce:	2b2a      	cmp	r3, #42	; 0x2a
 80043d0:	d015      	beq.n	80043fe <_svfiprintf_r+0xf6>
 80043d2:	9a07      	ldr	r2, [sp, #28]
 80043d4:	4654      	mov	r4, sl
 80043d6:	2000      	movs	r0, #0
 80043d8:	f04f 0c0a 	mov.w	ip, #10
 80043dc:	4621      	mov	r1, r4
 80043de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043e2:	3b30      	subs	r3, #48	; 0x30
 80043e4:	2b09      	cmp	r3, #9
 80043e6:	d94e      	bls.n	8004486 <_svfiprintf_r+0x17e>
 80043e8:	b1b0      	cbz	r0, 8004418 <_svfiprintf_r+0x110>
 80043ea:	9207      	str	r2, [sp, #28]
 80043ec:	e014      	b.n	8004418 <_svfiprintf_r+0x110>
 80043ee:	eba0 0308 	sub.w	r3, r0, r8
 80043f2:	fa09 f303 	lsl.w	r3, r9, r3
 80043f6:	4313      	orrs	r3, r2
 80043f8:	9304      	str	r3, [sp, #16]
 80043fa:	46a2      	mov	sl, r4
 80043fc:	e7d2      	b.n	80043a4 <_svfiprintf_r+0x9c>
 80043fe:	9b03      	ldr	r3, [sp, #12]
 8004400:	1d19      	adds	r1, r3, #4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	9103      	str	r1, [sp, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	bfbb      	ittet	lt
 800440a:	425b      	neglt	r3, r3
 800440c:	f042 0202 	orrlt.w	r2, r2, #2
 8004410:	9307      	strge	r3, [sp, #28]
 8004412:	9307      	strlt	r3, [sp, #28]
 8004414:	bfb8      	it	lt
 8004416:	9204      	strlt	r2, [sp, #16]
 8004418:	7823      	ldrb	r3, [r4, #0]
 800441a:	2b2e      	cmp	r3, #46	; 0x2e
 800441c:	d10c      	bne.n	8004438 <_svfiprintf_r+0x130>
 800441e:	7863      	ldrb	r3, [r4, #1]
 8004420:	2b2a      	cmp	r3, #42	; 0x2a
 8004422:	d135      	bne.n	8004490 <_svfiprintf_r+0x188>
 8004424:	9b03      	ldr	r3, [sp, #12]
 8004426:	1d1a      	adds	r2, r3, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	9203      	str	r2, [sp, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	bfb8      	it	lt
 8004430:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004434:	3402      	adds	r4, #2
 8004436:	9305      	str	r3, [sp, #20]
 8004438:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004504 <_svfiprintf_r+0x1fc>
 800443c:	7821      	ldrb	r1, [r4, #0]
 800443e:	2203      	movs	r2, #3
 8004440:	4650      	mov	r0, sl
 8004442:	f7fb fec5 	bl	80001d0 <memchr>
 8004446:	b140      	cbz	r0, 800445a <_svfiprintf_r+0x152>
 8004448:	2340      	movs	r3, #64	; 0x40
 800444a:	eba0 000a 	sub.w	r0, r0, sl
 800444e:	fa03 f000 	lsl.w	r0, r3, r0
 8004452:	9b04      	ldr	r3, [sp, #16]
 8004454:	4303      	orrs	r3, r0
 8004456:	3401      	adds	r4, #1
 8004458:	9304      	str	r3, [sp, #16]
 800445a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800445e:	4826      	ldr	r0, [pc, #152]	; (80044f8 <_svfiprintf_r+0x1f0>)
 8004460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004464:	2206      	movs	r2, #6
 8004466:	f7fb feb3 	bl	80001d0 <memchr>
 800446a:	2800      	cmp	r0, #0
 800446c:	d038      	beq.n	80044e0 <_svfiprintf_r+0x1d8>
 800446e:	4b23      	ldr	r3, [pc, #140]	; (80044fc <_svfiprintf_r+0x1f4>)
 8004470:	bb1b      	cbnz	r3, 80044ba <_svfiprintf_r+0x1b2>
 8004472:	9b03      	ldr	r3, [sp, #12]
 8004474:	3307      	adds	r3, #7
 8004476:	f023 0307 	bic.w	r3, r3, #7
 800447a:	3308      	adds	r3, #8
 800447c:	9303      	str	r3, [sp, #12]
 800447e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004480:	4433      	add	r3, r6
 8004482:	9309      	str	r3, [sp, #36]	; 0x24
 8004484:	e767      	b.n	8004356 <_svfiprintf_r+0x4e>
 8004486:	fb0c 3202 	mla	r2, ip, r2, r3
 800448a:	460c      	mov	r4, r1
 800448c:	2001      	movs	r0, #1
 800448e:	e7a5      	b.n	80043dc <_svfiprintf_r+0xd4>
 8004490:	2300      	movs	r3, #0
 8004492:	3401      	adds	r4, #1
 8004494:	9305      	str	r3, [sp, #20]
 8004496:	4619      	mov	r1, r3
 8004498:	f04f 0c0a 	mov.w	ip, #10
 800449c:	4620      	mov	r0, r4
 800449e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044a2:	3a30      	subs	r2, #48	; 0x30
 80044a4:	2a09      	cmp	r2, #9
 80044a6:	d903      	bls.n	80044b0 <_svfiprintf_r+0x1a8>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0c5      	beq.n	8004438 <_svfiprintf_r+0x130>
 80044ac:	9105      	str	r1, [sp, #20]
 80044ae:	e7c3      	b.n	8004438 <_svfiprintf_r+0x130>
 80044b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b4:	4604      	mov	r4, r0
 80044b6:	2301      	movs	r3, #1
 80044b8:	e7f0      	b.n	800449c <_svfiprintf_r+0x194>
 80044ba:	ab03      	add	r3, sp, #12
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	462a      	mov	r2, r5
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <_svfiprintf_r+0x1f8>)
 80044c2:	a904      	add	r1, sp, #16
 80044c4:	4638      	mov	r0, r7
 80044c6:	f3af 8000 	nop.w
 80044ca:	1c42      	adds	r2, r0, #1
 80044cc:	4606      	mov	r6, r0
 80044ce:	d1d6      	bne.n	800447e <_svfiprintf_r+0x176>
 80044d0:	89ab      	ldrh	r3, [r5, #12]
 80044d2:	065b      	lsls	r3, r3, #25
 80044d4:	f53f af2c 	bmi.w	8004330 <_svfiprintf_r+0x28>
 80044d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044da:	b01d      	add	sp, #116	; 0x74
 80044dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e0:	ab03      	add	r3, sp, #12
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	462a      	mov	r2, r5
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <_svfiprintf_r+0x1f8>)
 80044e8:	a904      	add	r1, sp, #16
 80044ea:	4638      	mov	r0, r7
 80044ec:	f000 f87a 	bl	80045e4 <_printf_i>
 80044f0:	e7eb      	b.n	80044ca <_svfiprintf_r+0x1c2>
 80044f2:	bf00      	nop
 80044f4:	08004b50 	.word	0x08004b50
 80044f8:	08004b5a 	.word	0x08004b5a
 80044fc:	00000000 	.word	0x00000000
 8004500:	08004251 	.word	0x08004251
 8004504:	08004b56 	.word	0x08004b56

08004508 <_printf_common>:
 8004508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	4616      	mov	r6, r2
 800450e:	4699      	mov	r9, r3
 8004510:	688a      	ldr	r2, [r1, #8]
 8004512:	690b      	ldr	r3, [r1, #16]
 8004514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004518:	4293      	cmp	r3, r2
 800451a:	bfb8      	it	lt
 800451c:	4613      	movlt	r3, r2
 800451e:	6033      	str	r3, [r6, #0]
 8004520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004524:	4607      	mov	r7, r0
 8004526:	460c      	mov	r4, r1
 8004528:	b10a      	cbz	r2, 800452e <_printf_common+0x26>
 800452a:	3301      	adds	r3, #1
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	0699      	lsls	r1, r3, #26
 8004532:	bf42      	ittt	mi
 8004534:	6833      	ldrmi	r3, [r6, #0]
 8004536:	3302      	addmi	r3, #2
 8004538:	6033      	strmi	r3, [r6, #0]
 800453a:	6825      	ldr	r5, [r4, #0]
 800453c:	f015 0506 	ands.w	r5, r5, #6
 8004540:	d106      	bne.n	8004550 <_printf_common+0x48>
 8004542:	f104 0a19 	add.w	sl, r4, #25
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	6832      	ldr	r2, [r6, #0]
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	42ab      	cmp	r3, r5
 800454e:	dc26      	bgt.n	800459e <_printf_common+0x96>
 8004550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004554:	1e13      	subs	r3, r2, #0
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	bf18      	it	ne
 800455a:	2301      	movne	r3, #1
 800455c:	0692      	lsls	r2, r2, #26
 800455e:	d42b      	bmi.n	80045b8 <_printf_common+0xb0>
 8004560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004564:	4649      	mov	r1, r9
 8004566:	4638      	mov	r0, r7
 8004568:	47c0      	blx	r8
 800456a:	3001      	adds	r0, #1
 800456c:	d01e      	beq.n	80045ac <_printf_common+0xa4>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	68e5      	ldr	r5, [r4, #12]
 8004572:	6832      	ldr	r2, [r6, #0]
 8004574:	f003 0306 	and.w	r3, r3, #6
 8004578:	2b04      	cmp	r3, #4
 800457a:	bf08      	it	eq
 800457c:	1aad      	subeq	r5, r5, r2
 800457e:	68a3      	ldr	r3, [r4, #8]
 8004580:	6922      	ldr	r2, [r4, #16]
 8004582:	bf0c      	ite	eq
 8004584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004588:	2500      	movne	r5, #0
 800458a:	4293      	cmp	r3, r2
 800458c:	bfc4      	itt	gt
 800458e:	1a9b      	subgt	r3, r3, r2
 8004590:	18ed      	addgt	r5, r5, r3
 8004592:	2600      	movs	r6, #0
 8004594:	341a      	adds	r4, #26
 8004596:	42b5      	cmp	r5, r6
 8004598:	d11a      	bne.n	80045d0 <_printf_common+0xc8>
 800459a:	2000      	movs	r0, #0
 800459c:	e008      	b.n	80045b0 <_printf_common+0xa8>
 800459e:	2301      	movs	r3, #1
 80045a0:	4652      	mov	r2, sl
 80045a2:	4649      	mov	r1, r9
 80045a4:	4638      	mov	r0, r7
 80045a6:	47c0      	blx	r8
 80045a8:	3001      	adds	r0, #1
 80045aa:	d103      	bne.n	80045b4 <_printf_common+0xac>
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	3501      	adds	r5, #1
 80045b6:	e7c6      	b.n	8004546 <_printf_common+0x3e>
 80045b8:	18e1      	adds	r1, r4, r3
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	2030      	movs	r0, #48	; 0x30
 80045be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c2:	4422      	add	r2, r4
 80045c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045cc:	3302      	adds	r3, #2
 80045ce:	e7c7      	b.n	8004560 <_printf_common+0x58>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4622      	mov	r2, r4
 80045d4:	4649      	mov	r1, r9
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c0      	blx	r8
 80045da:	3001      	adds	r0, #1
 80045dc:	d0e6      	beq.n	80045ac <_printf_common+0xa4>
 80045de:	3601      	adds	r6, #1
 80045e0:	e7d9      	b.n	8004596 <_printf_common+0x8e>
	...

080045e4 <_printf_i>:
 80045e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	7e0f      	ldrb	r7, [r1, #24]
 80045ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045ec:	2f78      	cmp	r7, #120	; 0x78
 80045ee:	4691      	mov	r9, r2
 80045f0:	4680      	mov	r8, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	469a      	mov	sl, r3
 80045f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045fa:	d807      	bhi.n	800460c <_printf_i+0x28>
 80045fc:	2f62      	cmp	r7, #98	; 0x62
 80045fe:	d80a      	bhi.n	8004616 <_printf_i+0x32>
 8004600:	2f00      	cmp	r7, #0
 8004602:	f000 80d8 	beq.w	80047b6 <_printf_i+0x1d2>
 8004606:	2f58      	cmp	r7, #88	; 0x58
 8004608:	f000 80a3 	beq.w	8004752 <_printf_i+0x16e>
 800460c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004614:	e03a      	b.n	800468c <_printf_i+0xa8>
 8004616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800461a:	2b15      	cmp	r3, #21
 800461c:	d8f6      	bhi.n	800460c <_printf_i+0x28>
 800461e:	a101      	add	r1, pc, #4	; (adr r1, 8004624 <_printf_i+0x40>)
 8004620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004624:	0800467d 	.word	0x0800467d
 8004628:	08004691 	.word	0x08004691
 800462c:	0800460d 	.word	0x0800460d
 8004630:	0800460d 	.word	0x0800460d
 8004634:	0800460d 	.word	0x0800460d
 8004638:	0800460d 	.word	0x0800460d
 800463c:	08004691 	.word	0x08004691
 8004640:	0800460d 	.word	0x0800460d
 8004644:	0800460d 	.word	0x0800460d
 8004648:	0800460d 	.word	0x0800460d
 800464c:	0800460d 	.word	0x0800460d
 8004650:	0800479d 	.word	0x0800479d
 8004654:	080046c1 	.word	0x080046c1
 8004658:	0800477f 	.word	0x0800477f
 800465c:	0800460d 	.word	0x0800460d
 8004660:	0800460d 	.word	0x0800460d
 8004664:	080047bf 	.word	0x080047bf
 8004668:	0800460d 	.word	0x0800460d
 800466c:	080046c1 	.word	0x080046c1
 8004670:	0800460d 	.word	0x0800460d
 8004674:	0800460d 	.word	0x0800460d
 8004678:	08004787 	.word	0x08004787
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	602a      	str	r2, [r5, #0]
 8004684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800468c:	2301      	movs	r3, #1
 800468e:	e0a3      	b.n	80047d8 <_printf_i+0x1f4>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	6829      	ldr	r1, [r5, #0]
 8004694:	0606      	lsls	r6, r0, #24
 8004696:	f101 0304 	add.w	r3, r1, #4
 800469a:	d50a      	bpl.n	80046b2 <_printf_i+0xce>
 800469c:	680e      	ldr	r6, [r1, #0]
 800469e:	602b      	str	r3, [r5, #0]
 80046a0:	2e00      	cmp	r6, #0
 80046a2:	da03      	bge.n	80046ac <_printf_i+0xc8>
 80046a4:	232d      	movs	r3, #45	; 0x2d
 80046a6:	4276      	negs	r6, r6
 80046a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ac:	485e      	ldr	r0, [pc, #376]	; (8004828 <_printf_i+0x244>)
 80046ae:	230a      	movs	r3, #10
 80046b0:	e019      	b.n	80046e6 <_printf_i+0x102>
 80046b2:	680e      	ldr	r6, [r1, #0]
 80046b4:	602b      	str	r3, [r5, #0]
 80046b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046ba:	bf18      	it	ne
 80046bc:	b236      	sxthne	r6, r6
 80046be:	e7ef      	b.n	80046a0 <_printf_i+0xbc>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	1d19      	adds	r1, r3, #4
 80046c6:	6029      	str	r1, [r5, #0]
 80046c8:	0601      	lsls	r1, r0, #24
 80046ca:	d501      	bpl.n	80046d0 <_printf_i+0xec>
 80046cc:	681e      	ldr	r6, [r3, #0]
 80046ce:	e002      	b.n	80046d6 <_printf_i+0xf2>
 80046d0:	0646      	lsls	r6, r0, #25
 80046d2:	d5fb      	bpl.n	80046cc <_printf_i+0xe8>
 80046d4:	881e      	ldrh	r6, [r3, #0]
 80046d6:	4854      	ldr	r0, [pc, #336]	; (8004828 <_printf_i+0x244>)
 80046d8:	2f6f      	cmp	r7, #111	; 0x6f
 80046da:	bf0c      	ite	eq
 80046dc:	2308      	moveq	r3, #8
 80046de:	230a      	movne	r3, #10
 80046e0:	2100      	movs	r1, #0
 80046e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e6:	6865      	ldr	r5, [r4, #4]
 80046e8:	60a5      	str	r5, [r4, #8]
 80046ea:	2d00      	cmp	r5, #0
 80046ec:	bfa2      	ittt	ge
 80046ee:	6821      	ldrge	r1, [r4, #0]
 80046f0:	f021 0104 	bicge.w	r1, r1, #4
 80046f4:	6021      	strge	r1, [r4, #0]
 80046f6:	b90e      	cbnz	r6, 80046fc <_printf_i+0x118>
 80046f8:	2d00      	cmp	r5, #0
 80046fa:	d04d      	beq.n	8004798 <_printf_i+0x1b4>
 80046fc:	4615      	mov	r5, r2
 80046fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004702:	fb03 6711 	mls	r7, r3, r1, r6
 8004706:	5dc7      	ldrb	r7, [r0, r7]
 8004708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800470c:	4637      	mov	r7, r6
 800470e:	42bb      	cmp	r3, r7
 8004710:	460e      	mov	r6, r1
 8004712:	d9f4      	bls.n	80046fe <_printf_i+0x11a>
 8004714:	2b08      	cmp	r3, #8
 8004716:	d10b      	bne.n	8004730 <_printf_i+0x14c>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	07de      	lsls	r6, r3, #31
 800471c:	d508      	bpl.n	8004730 <_printf_i+0x14c>
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	6861      	ldr	r1, [r4, #4]
 8004722:	4299      	cmp	r1, r3
 8004724:	bfde      	ittt	le
 8004726:	2330      	movle	r3, #48	; 0x30
 8004728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800472c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004730:	1b52      	subs	r2, r2, r5
 8004732:	6122      	str	r2, [r4, #16]
 8004734:	f8cd a000 	str.w	sl, [sp]
 8004738:	464b      	mov	r3, r9
 800473a:	aa03      	add	r2, sp, #12
 800473c:	4621      	mov	r1, r4
 800473e:	4640      	mov	r0, r8
 8004740:	f7ff fee2 	bl	8004508 <_printf_common>
 8004744:	3001      	adds	r0, #1
 8004746:	d14c      	bne.n	80047e2 <_printf_i+0x1fe>
 8004748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800474c:	b004      	add	sp, #16
 800474e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004752:	4835      	ldr	r0, [pc, #212]	; (8004828 <_printf_i+0x244>)
 8004754:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004758:	6829      	ldr	r1, [r5, #0]
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004760:	6029      	str	r1, [r5, #0]
 8004762:	061d      	lsls	r5, r3, #24
 8004764:	d514      	bpl.n	8004790 <_printf_i+0x1ac>
 8004766:	07df      	lsls	r7, r3, #31
 8004768:	bf44      	itt	mi
 800476a:	f043 0320 	orrmi.w	r3, r3, #32
 800476e:	6023      	strmi	r3, [r4, #0]
 8004770:	b91e      	cbnz	r6, 800477a <_printf_i+0x196>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	f023 0320 	bic.w	r3, r3, #32
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	2310      	movs	r3, #16
 800477c:	e7b0      	b.n	80046e0 <_printf_i+0xfc>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	f043 0320 	orr.w	r3, r3, #32
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	2378      	movs	r3, #120	; 0x78
 8004788:	4828      	ldr	r0, [pc, #160]	; (800482c <_printf_i+0x248>)
 800478a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800478e:	e7e3      	b.n	8004758 <_printf_i+0x174>
 8004790:	0659      	lsls	r1, r3, #25
 8004792:	bf48      	it	mi
 8004794:	b2b6      	uxthmi	r6, r6
 8004796:	e7e6      	b.n	8004766 <_printf_i+0x182>
 8004798:	4615      	mov	r5, r2
 800479a:	e7bb      	b.n	8004714 <_printf_i+0x130>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	6826      	ldr	r6, [r4, #0]
 80047a0:	6961      	ldr	r1, [r4, #20]
 80047a2:	1d18      	adds	r0, r3, #4
 80047a4:	6028      	str	r0, [r5, #0]
 80047a6:	0635      	lsls	r5, r6, #24
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	d501      	bpl.n	80047b0 <_printf_i+0x1cc>
 80047ac:	6019      	str	r1, [r3, #0]
 80047ae:	e002      	b.n	80047b6 <_printf_i+0x1d2>
 80047b0:	0670      	lsls	r0, r6, #25
 80047b2:	d5fb      	bpl.n	80047ac <_printf_i+0x1c8>
 80047b4:	8019      	strh	r1, [r3, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	4615      	mov	r5, r2
 80047bc:	e7ba      	b.n	8004734 <_printf_i+0x150>
 80047be:	682b      	ldr	r3, [r5, #0]
 80047c0:	1d1a      	adds	r2, r3, #4
 80047c2:	602a      	str	r2, [r5, #0]
 80047c4:	681d      	ldr	r5, [r3, #0]
 80047c6:	6862      	ldr	r2, [r4, #4]
 80047c8:	2100      	movs	r1, #0
 80047ca:	4628      	mov	r0, r5
 80047cc:	f7fb fd00 	bl	80001d0 <memchr>
 80047d0:	b108      	cbz	r0, 80047d6 <_printf_i+0x1f2>
 80047d2:	1b40      	subs	r0, r0, r5
 80047d4:	6060      	str	r0, [r4, #4]
 80047d6:	6863      	ldr	r3, [r4, #4]
 80047d8:	6123      	str	r3, [r4, #16]
 80047da:	2300      	movs	r3, #0
 80047dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e0:	e7a8      	b.n	8004734 <_printf_i+0x150>
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	462a      	mov	r2, r5
 80047e6:	4649      	mov	r1, r9
 80047e8:	4640      	mov	r0, r8
 80047ea:	47d0      	blx	sl
 80047ec:	3001      	adds	r0, #1
 80047ee:	d0ab      	beq.n	8004748 <_printf_i+0x164>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	079b      	lsls	r3, r3, #30
 80047f4:	d413      	bmi.n	800481e <_printf_i+0x23a>
 80047f6:	68e0      	ldr	r0, [r4, #12]
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	4298      	cmp	r0, r3
 80047fc:	bfb8      	it	lt
 80047fe:	4618      	movlt	r0, r3
 8004800:	e7a4      	b.n	800474c <_printf_i+0x168>
 8004802:	2301      	movs	r3, #1
 8004804:	4632      	mov	r2, r6
 8004806:	4649      	mov	r1, r9
 8004808:	4640      	mov	r0, r8
 800480a:	47d0      	blx	sl
 800480c:	3001      	adds	r0, #1
 800480e:	d09b      	beq.n	8004748 <_printf_i+0x164>
 8004810:	3501      	adds	r5, #1
 8004812:	68e3      	ldr	r3, [r4, #12]
 8004814:	9903      	ldr	r1, [sp, #12]
 8004816:	1a5b      	subs	r3, r3, r1
 8004818:	42ab      	cmp	r3, r5
 800481a:	dcf2      	bgt.n	8004802 <_printf_i+0x21e>
 800481c:	e7eb      	b.n	80047f6 <_printf_i+0x212>
 800481e:	2500      	movs	r5, #0
 8004820:	f104 0619 	add.w	r6, r4, #25
 8004824:	e7f5      	b.n	8004812 <_printf_i+0x22e>
 8004826:	bf00      	nop
 8004828:	08004b61 	.word	0x08004b61
 800482c:	08004b72 	.word	0x08004b72

08004830 <memcpy>:
 8004830:	440a      	add	r2, r1
 8004832:	4291      	cmp	r1, r2
 8004834:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004838:	d100      	bne.n	800483c <memcpy+0xc>
 800483a:	4770      	bx	lr
 800483c:	b510      	push	{r4, lr}
 800483e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004846:	4291      	cmp	r1, r2
 8004848:	d1f9      	bne.n	800483e <memcpy+0xe>
 800484a:	bd10      	pop	{r4, pc}

0800484c <memmove>:
 800484c:	4288      	cmp	r0, r1
 800484e:	b510      	push	{r4, lr}
 8004850:	eb01 0402 	add.w	r4, r1, r2
 8004854:	d902      	bls.n	800485c <memmove+0x10>
 8004856:	4284      	cmp	r4, r0
 8004858:	4623      	mov	r3, r4
 800485a:	d807      	bhi.n	800486c <memmove+0x20>
 800485c:	1e43      	subs	r3, r0, #1
 800485e:	42a1      	cmp	r1, r4
 8004860:	d008      	beq.n	8004874 <memmove+0x28>
 8004862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800486a:	e7f8      	b.n	800485e <memmove+0x12>
 800486c:	4402      	add	r2, r0
 800486e:	4601      	mov	r1, r0
 8004870:	428a      	cmp	r2, r1
 8004872:	d100      	bne.n	8004876 <memmove+0x2a>
 8004874:	bd10      	pop	{r4, pc}
 8004876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800487a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800487e:	e7f7      	b.n	8004870 <memmove+0x24>

08004880 <_free_r>:
 8004880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004882:	2900      	cmp	r1, #0
 8004884:	d044      	beq.n	8004910 <_free_r+0x90>
 8004886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800488a:	9001      	str	r0, [sp, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f1a1 0404 	sub.w	r4, r1, #4
 8004892:	bfb8      	it	lt
 8004894:	18e4      	addlt	r4, r4, r3
 8004896:	f000 f913 	bl	8004ac0 <__malloc_lock>
 800489a:	4a1e      	ldr	r2, [pc, #120]	; (8004914 <_free_r+0x94>)
 800489c:	9801      	ldr	r0, [sp, #4]
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	b933      	cbnz	r3, 80048b0 <_free_r+0x30>
 80048a2:	6063      	str	r3, [r4, #4]
 80048a4:	6014      	str	r4, [r2, #0]
 80048a6:	b003      	add	sp, #12
 80048a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048ac:	f000 b90e 	b.w	8004acc <__malloc_unlock>
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	d908      	bls.n	80048c6 <_free_r+0x46>
 80048b4:	6825      	ldr	r5, [r4, #0]
 80048b6:	1961      	adds	r1, r4, r5
 80048b8:	428b      	cmp	r3, r1
 80048ba:	bf01      	itttt	eq
 80048bc:	6819      	ldreq	r1, [r3, #0]
 80048be:	685b      	ldreq	r3, [r3, #4]
 80048c0:	1949      	addeq	r1, r1, r5
 80048c2:	6021      	streq	r1, [r4, #0]
 80048c4:	e7ed      	b.n	80048a2 <_free_r+0x22>
 80048c6:	461a      	mov	r2, r3
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	b10b      	cbz	r3, 80048d0 <_free_r+0x50>
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d9fa      	bls.n	80048c6 <_free_r+0x46>
 80048d0:	6811      	ldr	r1, [r2, #0]
 80048d2:	1855      	adds	r5, r2, r1
 80048d4:	42a5      	cmp	r5, r4
 80048d6:	d10b      	bne.n	80048f0 <_free_r+0x70>
 80048d8:	6824      	ldr	r4, [r4, #0]
 80048da:	4421      	add	r1, r4
 80048dc:	1854      	adds	r4, r2, r1
 80048de:	42a3      	cmp	r3, r4
 80048e0:	6011      	str	r1, [r2, #0]
 80048e2:	d1e0      	bne.n	80048a6 <_free_r+0x26>
 80048e4:	681c      	ldr	r4, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	6053      	str	r3, [r2, #4]
 80048ea:	4421      	add	r1, r4
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	e7da      	b.n	80048a6 <_free_r+0x26>
 80048f0:	d902      	bls.n	80048f8 <_free_r+0x78>
 80048f2:	230c      	movs	r3, #12
 80048f4:	6003      	str	r3, [r0, #0]
 80048f6:	e7d6      	b.n	80048a6 <_free_r+0x26>
 80048f8:	6825      	ldr	r5, [r4, #0]
 80048fa:	1961      	adds	r1, r4, r5
 80048fc:	428b      	cmp	r3, r1
 80048fe:	bf04      	itt	eq
 8004900:	6819      	ldreq	r1, [r3, #0]
 8004902:	685b      	ldreq	r3, [r3, #4]
 8004904:	6063      	str	r3, [r4, #4]
 8004906:	bf04      	itt	eq
 8004908:	1949      	addeq	r1, r1, r5
 800490a:	6021      	streq	r1, [r4, #0]
 800490c:	6054      	str	r4, [r2, #4]
 800490e:	e7ca      	b.n	80048a6 <_free_r+0x26>
 8004910:	b003      	add	sp, #12
 8004912:	bd30      	pop	{r4, r5, pc}
 8004914:	200001b8 	.word	0x200001b8

08004918 <sbrk_aligned>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4e0e      	ldr	r6, [pc, #56]	; (8004954 <sbrk_aligned+0x3c>)
 800491c:	460c      	mov	r4, r1
 800491e:	6831      	ldr	r1, [r6, #0]
 8004920:	4605      	mov	r5, r0
 8004922:	b911      	cbnz	r1, 800492a <sbrk_aligned+0x12>
 8004924:	f000 f8bc 	bl	8004aa0 <_sbrk_r>
 8004928:	6030      	str	r0, [r6, #0]
 800492a:	4621      	mov	r1, r4
 800492c:	4628      	mov	r0, r5
 800492e:	f000 f8b7 	bl	8004aa0 <_sbrk_r>
 8004932:	1c43      	adds	r3, r0, #1
 8004934:	d00a      	beq.n	800494c <sbrk_aligned+0x34>
 8004936:	1cc4      	adds	r4, r0, #3
 8004938:	f024 0403 	bic.w	r4, r4, #3
 800493c:	42a0      	cmp	r0, r4
 800493e:	d007      	beq.n	8004950 <sbrk_aligned+0x38>
 8004940:	1a21      	subs	r1, r4, r0
 8004942:	4628      	mov	r0, r5
 8004944:	f000 f8ac 	bl	8004aa0 <_sbrk_r>
 8004948:	3001      	adds	r0, #1
 800494a:	d101      	bne.n	8004950 <sbrk_aligned+0x38>
 800494c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004950:	4620      	mov	r0, r4
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	200001bc 	.word	0x200001bc

08004958 <_malloc_r>:
 8004958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800495c:	1ccd      	adds	r5, r1, #3
 800495e:	f025 0503 	bic.w	r5, r5, #3
 8004962:	3508      	adds	r5, #8
 8004964:	2d0c      	cmp	r5, #12
 8004966:	bf38      	it	cc
 8004968:	250c      	movcc	r5, #12
 800496a:	2d00      	cmp	r5, #0
 800496c:	4607      	mov	r7, r0
 800496e:	db01      	blt.n	8004974 <_malloc_r+0x1c>
 8004970:	42a9      	cmp	r1, r5
 8004972:	d905      	bls.n	8004980 <_malloc_r+0x28>
 8004974:	230c      	movs	r3, #12
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	2600      	movs	r6, #0
 800497a:	4630      	mov	r0, r6
 800497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004980:	4e2e      	ldr	r6, [pc, #184]	; (8004a3c <_malloc_r+0xe4>)
 8004982:	f000 f89d 	bl	8004ac0 <__malloc_lock>
 8004986:	6833      	ldr	r3, [r6, #0]
 8004988:	461c      	mov	r4, r3
 800498a:	bb34      	cbnz	r4, 80049da <_malloc_r+0x82>
 800498c:	4629      	mov	r1, r5
 800498e:	4638      	mov	r0, r7
 8004990:	f7ff ffc2 	bl	8004918 <sbrk_aligned>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	4604      	mov	r4, r0
 8004998:	d14d      	bne.n	8004a36 <_malloc_r+0xde>
 800499a:	6834      	ldr	r4, [r6, #0]
 800499c:	4626      	mov	r6, r4
 800499e:	2e00      	cmp	r6, #0
 80049a0:	d140      	bne.n	8004a24 <_malloc_r+0xcc>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	4631      	mov	r1, r6
 80049a6:	4638      	mov	r0, r7
 80049a8:	eb04 0803 	add.w	r8, r4, r3
 80049ac:	f000 f878 	bl	8004aa0 <_sbrk_r>
 80049b0:	4580      	cmp	r8, r0
 80049b2:	d13a      	bne.n	8004a2a <_malloc_r+0xd2>
 80049b4:	6821      	ldr	r1, [r4, #0]
 80049b6:	3503      	adds	r5, #3
 80049b8:	1a6d      	subs	r5, r5, r1
 80049ba:	f025 0503 	bic.w	r5, r5, #3
 80049be:	3508      	adds	r5, #8
 80049c0:	2d0c      	cmp	r5, #12
 80049c2:	bf38      	it	cc
 80049c4:	250c      	movcc	r5, #12
 80049c6:	4629      	mov	r1, r5
 80049c8:	4638      	mov	r0, r7
 80049ca:	f7ff ffa5 	bl	8004918 <sbrk_aligned>
 80049ce:	3001      	adds	r0, #1
 80049d0:	d02b      	beq.n	8004a2a <_malloc_r+0xd2>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	442b      	add	r3, r5
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	e00e      	b.n	80049f8 <_malloc_r+0xa0>
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	1b52      	subs	r2, r2, r5
 80049de:	d41e      	bmi.n	8004a1e <_malloc_r+0xc6>
 80049e0:	2a0b      	cmp	r2, #11
 80049e2:	d916      	bls.n	8004a12 <_malloc_r+0xba>
 80049e4:	1961      	adds	r1, r4, r5
 80049e6:	42a3      	cmp	r3, r4
 80049e8:	6025      	str	r5, [r4, #0]
 80049ea:	bf18      	it	ne
 80049ec:	6059      	strne	r1, [r3, #4]
 80049ee:	6863      	ldr	r3, [r4, #4]
 80049f0:	bf08      	it	eq
 80049f2:	6031      	streq	r1, [r6, #0]
 80049f4:	5162      	str	r2, [r4, r5]
 80049f6:	604b      	str	r3, [r1, #4]
 80049f8:	4638      	mov	r0, r7
 80049fa:	f104 060b 	add.w	r6, r4, #11
 80049fe:	f000 f865 	bl	8004acc <__malloc_unlock>
 8004a02:	f026 0607 	bic.w	r6, r6, #7
 8004a06:	1d23      	adds	r3, r4, #4
 8004a08:	1af2      	subs	r2, r6, r3
 8004a0a:	d0b6      	beq.n	800497a <_malloc_r+0x22>
 8004a0c:	1b9b      	subs	r3, r3, r6
 8004a0e:	50a3      	str	r3, [r4, r2]
 8004a10:	e7b3      	b.n	800497a <_malloc_r+0x22>
 8004a12:	6862      	ldr	r2, [r4, #4]
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	bf0c      	ite	eq
 8004a18:	6032      	streq	r2, [r6, #0]
 8004a1a:	605a      	strne	r2, [r3, #4]
 8004a1c:	e7ec      	b.n	80049f8 <_malloc_r+0xa0>
 8004a1e:	4623      	mov	r3, r4
 8004a20:	6864      	ldr	r4, [r4, #4]
 8004a22:	e7b2      	b.n	800498a <_malloc_r+0x32>
 8004a24:	4634      	mov	r4, r6
 8004a26:	6876      	ldr	r6, [r6, #4]
 8004a28:	e7b9      	b.n	800499e <_malloc_r+0x46>
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f000 f84c 	bl	8004acc <__malloc_unlock>
 8004a34:	e7a1      	b.n	800497a <_malloc_r+0x22>
 8004a36:	6025      	str	r5, [r4, #0]
 8004a38:	e7de      	b.n	80049f8 <_malloc_r+0xa0>
 8004a3a:	bf00      	nop
 8004a3c:	200001b8 	.word	0x200001b8

08004a40 <_realloc_r>:
 8004a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a44:	4680      	mov	r8, r0
 8004a46:	4614      	mov	r4, r2
 8004a48:	460e      	mov	r6, r1
 8004a4a:	b921      	cbnz	r1, 8004a56 <_realloc_r+0x16>
 8004a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a50:	4611      	mov	r1, r2
 8004a52:	f7ff bf81 	b.w	8004958 <_malloc_r>
 8004a56:	b92a      	cbnz	r2, 8004a64 <_realloc_r+0x24>
 8004a58:	f7ff ff12 	bl	8004880 <_free_r>
 8004a5c:	4625      	mov	r5, r4
 8004a5e:	4628      	mov	r0, r5
 8004a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a64:	f000 f838 	bl	8004ad8 <_malloc_usable_size_r>
 8004a68:	4284      	cmp	r4, r0
 8004a6a:	4607      	mov	r7, r0
 8004a6c:	d802      	bhi.n	8004a74 <_realloc_r+0x34>
 8004a6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a72:	d812      	bhi.n	8004a9a <_realloc_r+0x5a>
 8004a74:	4621      	mov	r1, r4
 8004a76:	4640      	mov	r0, r8
 8004a78:	f7ff ff6e 	bl	8004958 <_malloc_r>
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d0ed      	beq.n	8004a5e <_realloc_r+0x1e>
 8004a82:	42bc      	cmp	r4, r7
 8004a84:	4622      	mov	r2, r4
 8004a86:	4631      	mov	r1, r6
 8004a88:	bf28      	it	cs
 8004a8a:	463a      	movcs	r2, r7
 8004a8c:	f7ff fed0 	bl	8004830 <memcpy>
 8004a90:	4631      	mov	r1, r6
 8004a92:	4640      	mov	r0, r8
 8004a94:	f7ff fef4 	bl	8004880 <_free_r>
 8004a98:	e7e1      	b.n	8004a5e <_realloc_r+0x1e>
 8004a9a:	4635      	mov	r5, r6
 8004a9c:	e7df      	b.n	8004a5e <_realloc_r+0x1e>
	...

08004aa0 <_sbrk_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d06      	ldr	r5, [pc, #24]	; (8004abc <_sbrk_r+0x1c>)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	f7fc f8ba 	bl	8000c24 <_sbrk>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_sbrk_r+0x1a>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_sbrk_r+0x1a>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	200001c0 	.word	0x200001c0

08004ac0 <__malloc_lock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__malloc_lock+0x8>)
 8004ac2:	f000 b811 	b.w	8004ae8 <__retarget_lock_acquire_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	200001c4 	.word	0x200001c4

08004acc <__malloc_unlock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__malloc_unlock+0x8>)
 8004ace:	f000 b80c 	b.w	8004aea <__retarget_lock_release_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	200001c4 	.word	0x200001c4

08004ad8 <_malloc_usable_size_r>:
 8004ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004adc:	1f18      	subs	r0, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfbc      	itt	lt
 8004ae2:	580b      	ldrlt	r3, [r1, r0]
 8004ae4:	18c0      	addlt	r0, r0, r3
 8004ae6:	4770      	bx	lr

08004ae8 <__retarget_lock_acquire_recursive>:
 8004ae8:	4770      	bx	lr

08004aea <__retarget_lock_release_recursive>:
 8004aea:	4770      	bx	lr

08004aec <_init>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr

08004af8 <_fini>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	bf00      	nop
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr
