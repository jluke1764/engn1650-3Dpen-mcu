
Pen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006914  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08006ac4  08006ac4  00016ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df8  08006df8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e00  08006e00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e00  08006e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000070  08006e78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08006e78  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160d0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003070  00000000  00000000  00036170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad0b  00000000  00000000  0003b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016052  00000000  00000000  00066343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf85  00000000  00000000  0007c395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a31a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000583c  00000000  00000000  0017a36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006aac 	.word	0x08006aac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006aac 	.word	0x08006aac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4619      	mov	r1, r3
 80005a2:	2007      	movs	r0, #7
 80005a4:	f000 f87a 	bl	800069c <bno055_writeData>
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4619      	mov	r1, r3
 80005be:	203d      	movs	r0, #61	; 0x3d
 80005c0:	f000 f86c 	bl	800069c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d103      	bne.n	80005d2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80005ca:	2013      	movs	r0, #19
 80005cc:	f000 f85a 	bl	8000684 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80005d0:	e002      	b.n	80005d8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80005d2:	2007      	movs	r0, #7
 80005d4:	f000 f856 	bl	8000684 <bno055_delay>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff ffe3 	bl	80005b0 <bno055_setOperationMode>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}

080005ee <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80005f2:	200c      	movs	r0, #12
 80005f4:	f7ff ffdc 	bl	80005b0 <bno055_setOperationMode>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000600:	2120      	movs	r1, #32
 8000602:	203f      	movs	r0, #63	; 0x3f
 8000604:	f000 f84a 	bl	800069c <bno055_writeData>
  bno055_delay(700);
 8000608:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800060c:	f000 f83a 	bl	8000684 <bno055_delay>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  bno055_reset();
 800061a:	f7ff ffef 	bl	80005fc <bno055_reset>

  uint8_t id = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f923 	bl	8000874 <bno055_readData>
  if (id != BNO055_ID) {
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2ba0      	cmp	r3, #160	; 0xa0
 8000632:	d004      	beq.n	800063e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4619      	mov	r1, r3
 8000638:	4809      	ldr	r0, [pc, #36]	; (8000660 <bno055_setup+0x4c>)
 800063a:	f005 f84b 	bl	80056d4 <iprintf>
  }
  bno055_setPage(0);
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff ffa8 	bl	8000594 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000644:	2100      	movs	r1, #0
 8000646:	203f      	movs	r0, #63	; 0x3f
 8000648:	f000 f828 	bl	800069c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800064c:	f7ff ffc8 	bl	80005e0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 f817 	bl	8000684 <bno055_delay>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	08006ac4 	.word	0x08006ac4

08000664 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <bno055_assignI2C+0x1c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000008c 	.word	0x2000008c

08000684 <bno055_delay>:

void bno055_delay(int time) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fe3c 	bl	800130c <HAL_Delay>
#endif
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	733b      	strb	r3, [r7, #12]
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80006b4:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <bno055_writeData+0x184>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	f107 020c 	add.w	r2, r7, #12
 80006bc:	230a      	movs	r3, #10
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2302      	movs	r3, #2
 80006c2:	2150      	movs	r1, #80	; 0x50
 80006c4:	f001 fa10 	bl	8001ae8 <HAL_I2C_Master_Transmit>
 80006c8:	4603      	mov	r3, r0
 80006ca:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f000 80a0 	beq.w	8000814 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d103      	bne.n	80006e2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80006da:	4852      	ldr	r0, [pc, #328]	; (8000824 <bno055_writeData+0x188>)
 80006dc:	f005 f880 	bl	80057e0 <puts>
 80006e0:	e012      	b.n	8000708 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80006e2:	7dfb      	ldrb	r3, [r7, #23]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d103      	bne.n	80006f0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80006e8:	484f      	ldr	r0, [pc, #316]	; (8000828 <bno055_writeData+0x18c>)
 80006ea:	f005 f879 	bl	80057e0 <puts>
 80006ee:	e00b      	b.n	8000708 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80006f0:	7dfb      	ldrb	r3, [r7, #23]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d103      	bne.n	80006fe <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80006f6:	484d      	ldr	r0, [pc, #308]	; (800082c <bno055_writeData+0x190>)
 80006f8:	f005 f872 	bl	80057e0 <puts>
 80006fc:	e004      	b.n	8000708 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	4619      	mov	r1, r3
 8000702:	484b      	ldr	r0, [pc, #300]	; (8000830 <bno055_writeData+0x194>)
 8000704:	f004 ffe6 	bl	80056d4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000708:	4b45      	ldr	r3, [pc, #276]	; (8000820 <bno055_writeData+0x184>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fbe3 	bl	8001ed8 <HAL_I2C_GetError>
 8000712:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d07e      	beq.n	8000818 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d103      	bne.n	8000728 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000720:	4844      	ldr	r0, [pc, #272]	; (8000834 <bno055_writeData+0x198>)
 8000722:	f005 f85d 	bl	80057e0 <puts>
 8000726:	e021      	b.n	800076c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d103      	bne.n	8000736 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800072e:	4842      	ldr	r0, [pc, #264]	; (8000838 <bno055_writeData+0x19c>)
 8000730:	f005 f856 	bl	80057e0 <puts>
 8000734:	e01a      	b.n	800076c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d103      	bne.n	8000744 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 800073c:	483f      	ldr	r0, [pc, #252]	; (800083c <bno055_writeData+0x1a0>)
 800073e:	f005 f84f 	bl	80057e0 <puts>
 8000742:	e013      	b.n	800076c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	2b08      	cmp	r3, #8
 8000748:	d103      	bne.n	8000752 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800074a:	483d      	ldr	r0, [pc, #244]	; (8000840 <bno055_writeData+0x1a4>)
 800074c:	f005 f848 	bl	80057e0 <puts>
 8000750:	e00c      	b.n	800076c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	2b10      	cmp	r3, #16
 8000756:	d103      	bne.n	8000760 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000758:	483a      	ldr	r0, [pc, #232]	; (8000844 <bno055_writeData+0x1a8>)
 800075a:	f005 f841 	bl	80057e0 <puts>
 800075e:	e005      	b.n	800076c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	2b20      	cmp	r3, #32
 8000764:	d102      	bne.n	800076c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000766:	4838      	ldr	r0, [pc, #224]	; (8000848 <bno055_writeData+0x1ac>)
 8000768:	f005 f83a 	bl	80057e0 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <bno055_writeData+0x184>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fba3 	bl	8001ebc <HAL_I2C_GetState>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d103      	bne.n	8000788 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000780:	4832      	ldr	r0, [pc, #200]	; (800084c <bno055_writeData+0x1b0>)
 8000782:	f005 f82d 	bl	80057e0 <puts>
 8000786:	e048      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2b20      	cmp	r3, #32
 800078c:	d103      	bne.n	8000796 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800078e:	482f      	ldr	r0, [pc, #188]	; (800084c <bno055_writeData+0x1b0>)
 8000790:	f005 f826 	bl	80057e0 <puts>
 8000794:	e041      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	2b24      	cmp	r3, #36	; 0x24
 800079a:	d103      	bne.n	80007a4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800079c:	482c      	ldr	r0, [pc, #176]	; (8000850 <bno055_writeData+0x1b4>)
 800079e:	f005 f81f 	bl	80057e0 <puts>
 80007a2:	e03a      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2b21      	cmp	r3, #33	; 0x21
 80007a8:	d103      	bne.n	80007b2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80007aa:	482a      	ldr	r0, [pc, #168]	; (8000854 <bno055_writeData+0x1b8>)
 80007ac:	f005 f818 	bl	80057e0 <puts>
 80007b0:	e033      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	2b22      	cmp	r3, #34	; 0x22
 80007b6:	d103      	bne.n	80007c0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80007b8:	4827      	ldr	r0, [pc, #156]	; (8000858 <bno055_writeData+0x1bc>)
 80007ba:	f005 f811 	bl	80057e0 <puts>
 80007be:	e02c      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2b28      	cmp	r3, #40	; 0x28
 80007c4:	d103      	bne.n	80007ce <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80007c6:	4825      	ldr	r0, [pc, #148]	; (800085c <bno055_writeData+0x1c0>)
 80007c8:	f005 f80a 	bl	80057e0 <puts>
 80007cc:	e025      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	2b29      	cmp	r3, #41	; 0x29
 80007d2:	d103      	bne.n	80007dc <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80007d4:	4822      	ldr	r0, [pc, #136]	; (8000860 <bno055_writeData+0x1c4>)
 80007d6:	f005 f803 	bl	80057e0 <puts>
 80007da:	e01e      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	2b2a      	cmp	r3, #42	; 0x2a
 80007e0:	d103      	bne.n	80007ea <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80007e2:	4820      	ldr	r0, [pc, #128]	; (8000864 <bno055_writeData+0x1c8>)
 80007e4:	f004 fffc 	bl	80057e0 <puts>
 80007e8:	e017      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2b60      	cmp	r3, #96	; 0x60
 80007ee:	d103      	bne.n	80007f8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80007f0:	481d      	ldr	r0, [pc, #116]	; (8000868 <bno055_writeData+0x1cc>)
 80007f2:	f004 fff5 	bl	80057e0 <puts>
 80007f6:	e010      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	2ba0      	cmp	r3, #160	; 0xa0
 80007fc:	d103      	bne.n	8000806 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80007fe:	481b      	ldr	r0, [pc, #108]	; (800086c <bno055_writeData+0x1d0>)
 8000800:	f004 ffee 	bl	80057e0 <puts>
 8000804:	e009      	b.n	800081a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2be0      	cmp	r3, #224	; 0xe0
 800080a:	d106      	bne.n	800081a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 800080c:	4818      	ldr	r0, [pc, #96]	; (8000870 <bno055_writeData+0x1d4>)
 800080e:	f004 ffe7 	bl	80057e0 <puts>
 8000812:	e002      	b.n	800081a <bno055_writeData+0x17e>
    return;
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <bno055_writeData+0x17e>
    return;
 8000818:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000008c 	.word	0x2000008c
 8000824:	08006b00 	.word	0x08006b00
 8000828:	08006b24 	.word	0x08006b24
 800082c:	08006b4c 	.word	0x08006b4c
 8000830:	08006b70 	.word	0x08006b70
 8000834:	08006b88 	.word	0x08006b88
 8000838:	08006b9c 	.word	0x08006b9c
 800083c:	08006bb0 	.word	0x08006bb0
 8000840:	08006bc4 	.word	0x08006bc4
 8000844:	08006bd8 	.word	0x08006bd8
 8000848:	08006bec 	.word	0x08006bec
 800084c:	08006c04 	.word	0x08006c04
 8000850:	08006c1c 	.word	0x08006c1c
 8000854:	08006c30 	.word	0x08006c30
 8000858:	08006c48 	.word	0x08006c48
 800085c:	08006c60 	.word	0x08006c60
 8000860:	08006c78 	.word	0x08006c78
 8000864:	08006c98 	.word	0x08006c98
 8000868:	08006cb8 	.word	0x08006cb8
 800086c:	08006cd0 	.word	0x08006cd0
 8000870:	08006ce8 	.word	0x08006ce8

08000874 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af02      	add	r7, sp, #8
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <bno055_readData+0x40>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	1dfa      	adds	r2, r7, #7
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2301      	movs	r3, #1
 8000890:	2150      	movs	r1, #80	; 0x50
 8000892:	f001 f929 	bl	8001ae8 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <bno055_readData+0x40>)
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	b29b      	uxth	r3, r3
 800089e:	2264      	movs	r2, #100	; 0x64
 80008a0:	9200      	str	r2, [sp, #0]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	2150      	movs	r1, #80	; 0x50
 80008a6:	f001 fa13 	bl	8001cd0 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000008c 	.word	0x2000008c

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t MSG[7] = {'h', 'e', 'l', 'l', 'o', '\r', '\n'};
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <main+0x84>)
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c8:	6018      	str	r0, [r3, #0]
 80008ca:	3304      	adds	r3, #4
 80008cc:	8019      	strh	r1, [r3, #0]
 80008ce:	3302      	adds	r3, #2
 80008d0:	0c0a      	lsrs	r2, r1, #16
 80008d2:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[35] = {'\0'};
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	221f      	movs	r2, #31
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 fef0 	bl	80056c4 <memset>
	  uint8_t X = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fc9a 	bl	8001222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f82d 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f000 f929 	bl	8000b48 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008f6:	f000 f8f9 	bl	8000aec <MX_USB_OTG_FS_PCD_Init>
  MX_LPUART1_UART_Init();
 80008fa:	f000 f8cb 	bl	8000a94 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80008fe:	f000 f889 	bl	8000a14 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8000902:	480f      	ldr	r0, [pc, #60]	; (8000940 <main+0x88>)
 8000904:	f7ff feae 	bl	8000664 <bno055_assignI2C>
	bno055_setup();
 8000908:	f7ff fe84 	bl	8000614 <bno055_setup>
	bno055_setOperationModeNDOF();
 800090c:	f7ff fe6f 	bl	80005ee <bno055_setOperationModeNDOF>
  for (int i=0; i<200; i++)
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000914:	e007      	b.n	8000926 <main+0x6e>
   {
     data[i] = 'i';
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <main+0x8c>)
 8000918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091a:	4413      	add	r3, r2
 800091c:	2269      	movs	r2, #105	; 0x69
 800091e:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<200; i++)
 8000920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000922:	3301      	adds	r3, #1
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	2bc7      	cmp	r3, #199	; 0xc7
 800092a:	ddf4      	ble.n	8000916 <main+0x5e>
		  else
			  myprintf("you typed '%c'\n",i);
	  }*/

	  //bno055_vector_t v = bno055_getVectorEuler();
	  myprintf("hello world!");
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <main+0x90>)
 800092e:	f000 f9b5 	bl	8000c9c <myprintf>
	  //myprintf("Heading: %d Roll: %d Pitch: %d\r\n", (int)(v.x * 100), (int)(v.y * 100), (int)(v.z * 100));
	  //v = bno055_getVectorQuaternion();
	  //myprintf("W: %d X: %d Y: %d Z: %d\r\n", (int)(v.w * 100), (int)(v.x * 100), (int)(v.y * 100), (int)(v.z * 100));
	  HAL_Delay(100);
 8000932:	2064      	movs	r0, #100	; 0x64
 8000934:	f000 fcea 	bl	800130c <HAL_Delay>
  {
 8000938:	e7f8      	b.n	800092c <main+0x74>
 800093a:	bf00      	nop
 800093c:	08006d10 	.word	0x08006d10
 8000940:	20000090 	.word	0x20000090
 8000944:	20000674 	.word	0x20000674
 8000948:	08006d00 	.word	0x08006d00

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b096      	sub	sp, #88	; 0x58
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2244      	movs	r2, #68	; 0x44
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f004 feb2 	bl	80056c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800096e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000972:	f001 ff33 	bl	80027dc <HAL_PWREx_ControlVoltageScaling>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800097c:	f000 f9c4 	bl	8000d08 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000980:	f001 ff0e 	bl	80027a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <SystemClock_Config+0xc4>)
 8000986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800098a:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <SystemClock_Config+0xc4>)
 800098c:	f023 0318 	bic.w	r3, r3, #24
 8000990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000994:	2314      	movs	r3, #20
 8000996:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009a4:	2360      	movs	r3, #96	; 0x60
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	2302      	movs	r3, #2
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009ac:	2301      	movs	r3, #1
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80009b4:	2310      	movs	r3, #16
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 ff7d 	bl	80028c8 <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f998 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2303      	movs	r3, #3
 80009de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	2101      	movs	r1, #1
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fb82 	bl	80030fc <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009fe:	f000 f983 	bl	8000d08 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a02:	f003 f89b 	bl	8003b3c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a06:	bf00      	nop
 8000a08:	3758      	adds	r7, #88	; 0x58
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_I2C1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <MX_I2C1_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a50:	f000 ffba 	bl	80019c8 <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a5a:	f000 f955 	bl	8000d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a62:	f001 fcbd 	bl	80023e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 f94c 	bl	8000d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a74:	f001 fcff 	bl	8002476 <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f943 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000090 	.word	0x20000090
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	00303d5b 	.word	0x00303d5b

08000a94 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <MX_LPUART1_UART_Init+0x54>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000aa0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000aa4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_LPUART1_UART_Init+0x50>)
 8000ad2:	f003 fa11 	bl	8003ef8 <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 f914 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000e4 	.word	0x200000e4
 8000ae8:	40008000 	.word	0x40008000

08000aec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000af6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afa:	2206      	movs	r2, #6
 8000afc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b30:	f001 fced 	bl	800250e <HAL_PCD_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 f8e5 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000168 	.word	0x20000168

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a41      	ldr	r2, [pc, #260]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a3b      	ldr	r2, [pc, #236]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a35      	ldr	r2, [pc, #212]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba6:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000bbe:	f001 fe73 	bl	80028a8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a28      	ldr	r2, [pc, #160]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <MX_GPIO_Init+0x120>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000be0:	4822      	ldr	r0, [pc, #136]	; (8000c6c <MX_GPIO_Init+0x124>)
 8000be2:	f000 fed9 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	4821      	ldr	r0, [pc, #132]	; (8000c70 <MX_GPIO_Init+0x128>)
 8000bec:	f000 fed4 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	481b      	ldr	r0, [pc, #108]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000c08:	f000 fd34 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Blue_Pin;
 8000c0c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <MX_GPIO_Init+0x124>)
 8000c26:	f000 fd25 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_GPIO_Init+0x128>)
 8000c3e:	f000 fd19 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c42:	2340      	movs	r3, #64	; 0x40
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_GPIO_Init+0x128>)
 8000c5a:	f000 fd0b 	bl	8001674 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	48001800 	.word	0x48001800
 8000c74:	48000800 	.word	0x48000800

08000c78 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c80:	1d39      	adds	r1, r7, #4
 8000c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c86:	2201      	movs	r2, #1
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <__io_putchar+0x20>)
 8000c8a:	f003 f983 	bl	8003f94 <HAL_UART_Transmit>

  return ch;
 8000c8e:	687b      	ldr	r3, [r7, #4]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000e4 	.word	0x200000e4

08000c9c <myprintf>:
void mywrite (unsigned char *st, int nby)
{
   if (nby) HAL_UART_Transmit(&hlpuart1,st,nby,10);
}
void myprintf (const char *fmt, ...)
{
 8000c9c:	b40f      	push	{r0, r1, r2, r3}
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b0c2      	sub	sp, #264	; 0x108
 8000ca2:	af00      	add	r7, sp, #0
   va_list arglist;
   int nby;
   unsigned char st[256];

   if (!fmt) return;
 8000ca4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d022      	beq.n	8000cf2 <myprintf+0x56>
   va_start(arglist,fmt);
 8000cac:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000cb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   nby = vsnprintf((char *)st,sizeof(st),fmt,arglist);
 8000cb4:	4638      	mov	r0, r7
 8000cb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000cba:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc2:	f004 fdc1 	bl	8005848 <vsniprintf>
 8000cc6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   va_end(arglist);
   if (nby < 0) { nby = sizeof(st)-1; } //print truncated string in case too long
 8000cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	da02      	bge.n	8000cd8 <myprintf+0x3c>
 8000cd2:	23ff      	movs	r3, #255	; 0xff
 8000cd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   if (nby) HAL_UART_Transmit(&hlpuart1,st,nby,10);
 8000cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <myprintf+0x58>
 8000ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	230a      	movs	r3, #10
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <myprintf+0x68>)
 8000cec:	f003 f952 	bl	8003f94 <HAL_UART_Transmit>
 8000cf0:	e000      	b.n	8000cf4 <myprintf+0x58>
   if (!fmt) return;
 8000cf2:	bf00      	nop
}
 8000cf4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cfe:	b004      	add	sp, #16
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200000e4 	.word	0x200000e4

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x44>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_MspInit+0x44>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6613      	str	r3, [r2, #96]	; 0x60
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_MspInit+0x44>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x44>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x44>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ac      	sub	sp, #176	; 0xb0
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	228c      	movs	r2, #140	; 0x8c
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 fca1 	bl	80056c4 <memset>
  if(hi2c->Instance==I2C1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <HAL_I2C_MspInit+0xb0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d13b      	bne.n	8000e04 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fbd3 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000da4:	f7ff ffb0 	bl	8000d08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_I2C_MspInit+0xb4>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dac:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <HAL_I2C_MspInit+0xb4>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_I2C_MspInit+0xb4>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc8:	2312      	movs	r3, #18
 8000dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de4:	4619      	mov	r1, r3
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <HAL_I2C_MspInit+0xb8>)
 8000de8:	f000 fc44 	bl	8001674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_I2C_MspInit+0xb4>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_I2C_MspInit+0xb4>)
 8000df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000df6:	6593      	str	r3, [r2, #88]	; 0x58
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_I2C_MspInit+0xb4>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	37b0      	adds	r7, #176	; 0xb0
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000400 	.word	0x48000400

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ac      	sub	sp, #176	; 0xb0
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	228c      	movs	r2, #140	; 0x8c
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fc43 	bl	80056c4 <memset>
  if(huart->Instance==LPUART1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a26      	ldr	r2, [pc, #152]	; (8000edc <HAL_UART_MspInit+0xc4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d145      	bne.n	8000ed4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e48:	2320      	movs	r3, #32
 8000e4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 fb75 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e60:	f7ff ff52 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_UART_MspInit+0xc8>)
 8000e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_UART_MspInit+0xc8>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_UART_MspInit+0xc8>)
 8000e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_UART_MspInit+0xc8>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_UART_MspInit+0xc8>)
 8000e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_UART_MspInit+0xc8>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e94:	f001 fd08 	bl	80028a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e98:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <HAL_UART_MspInit+0xcc>)
 8000ec0:	f000 fbd8 	bl	8001674 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2046      	movs	r0, #70	; 0x46
 8000eca:	f000 fb1e 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ece:	2046      	movs	r0, #70	; 0x46
 8000ed0:	f000 fb37 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	37b0      	adds	r7, #176	; 0xb0
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40008000 	.word	0x40008000
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48001800 	.word	0x48001800

08000ee8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0ae      	sub	sp, #184	; 0xb8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	228c      	movs	r2, #140	; 0x8c
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f004 fbdb 	bl	80056c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f16:	d16b      	bne.n	8000ff0 <HAL_PCD_MspInit+0x108>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000f26:	2301      	movs	r3, #1
 8000f28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000f2e:	2318      	movs	r3, #24
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000f3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fafb 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000f54:	f7ff fed8 	bl	8000d08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5c:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f70:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f000 fb6b 	bl	8001674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d114      	bne.n	8000fec <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000fda:	f001 fc55 	bl	8002888 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <HAL_PCD_MspInit+0x110>)
 8000fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fea:	e001      	b.n	8000ff0 <HAL_PCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8000fec:	f001 fc4c 	bl	8002888 <HAL_PWREx_EnableVddUSB>
}
 8000ff0:	bf00      	nop
 8000ff2:	37b8      	adds	r7, #184	; 0xb8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f940 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <LPUART1_IRQHandler+0x10>)
 8001056:	f003 f831 	bl	80040bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000e4 	.word	0x200000e4

08001064 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e00a      	b.n	800108c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001076:	f3af 8000 	nop.w
 800107a:	4601      	mov	r1, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	60ba      	str	r2, [r7, #8]
 8001082:	b2ca      	uxtb	r2, r1
 8001084:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3301      	adds	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	429a      	cmp	r2, r3
 8001092:	dbf0      	blt.n	8001076 <_read+0x12>
  }

  return len;
 8001094:	687b      	ldr	r3, [r7, #4]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e009      	b.n	80010c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fddd 	bl	8000c78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbf1      	blt.n	80010b0 <_write+0x12>
  }
  return len;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_close>:

int _close(int file)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_isatty>:

int _isatty(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f004 fa70 	bl	8005654 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20050000 	.word	0x20050000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	2000073c 	.word	0x2000073c
 80011a8:	20000758 	.word	0x20000758

080011ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d4:	f7ff ffea 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fe:	f004 fa2f 	bl	8005660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001202:	f7ff fb59 	bl	80008b8 <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001208:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001214:	08006e08 	.word	0x08006e08
  ldr r2, =_sbss
 8001218:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800121c:	20000754 	.word	0x20000754

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>

08001222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f961 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f80e 	bl	8001254 <HAL_InitTick>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	e001      	b.n	8001248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001244:	f7ff fd66 	bl	8000d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001248:	79fb      	ldrb	r3, [r7, #7]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_InitTick+0x6c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d023      	beq.n	80012b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_InitTick+0x70>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_InitTick+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f96d 	bl	800155e <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10f      	bne.n	80012aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d809      	bhi.n	80012a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001298:	f000 f937 	bl	800150a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_InitTick+0x74>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e007      	b.n	80012b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e004      	b.n	80012b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e001      	b.n	80012b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000740 	.word	0x20000740

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000740 	.word	0x20000740

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d008      	beq.n	80015a0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2204      	movs	r2, #4
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e022      	b.n	80015e6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 020e 	bic.w	r2, r2, #14
 80015ae:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	f003 021c 	and.w	r2, r3, #28
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d005      	beq.n	8001616 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2204      	movs	r2, #4
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e029      	b.n	800166a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020e 	bic.w	r2, r2, #14
 8001624:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f003 021c 	and.w	r2, r3, #28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
    }
  }
  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e166      	b.n	8001952 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8158 	beq.w	800194c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	6939      	ldr	r1, [r7, #16]
 80017a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80b2 	beq.w	800194c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_GPIO_Init+0x2fc>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	4a60      	ldr	r2, [pc, #384]	; (8001970 <HAL_GPIO_Init+0x2fc>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6613      	str	r3, [r2, #96]	; 0x60
 80017f4:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <HAL_GPIO_Init+0x2fc>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001800:	4a5c      	ldr	r2, [pc, #368]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800182a:	d02b      	beq.n	8001884 <HAL_GPIO_Init+0x210>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_GPIO_Init+0x304>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d025      	beq.n	8001880 <HAL_GPIO_Init+0x20c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a51      	ldr	r2, [pc, #324]	; (800197c <HAL_GPIO_Init+0x308>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d01f      	beq.n	800187c <HAL_GPIO_Init+0x208>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a50      	ldr	r2, [pc, #320]	; (8001980 <HAL_GPIO_Init+0x30c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d019      	beq.n	8001878 <HAL_GPIO_Init+0x204>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a4f      	ldr	r2, [pc, #316]	; (8001984 <HAL_GPIO_Init+0x310>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d013      	beq.n	8001874 <HAL_GPIO_Init+0x200>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a4e      	ldr	r2, [pc, #312]	; (8001988 <HAL_GPIO_Init+0x314>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00d      	beq.n	8001870 <HAL_GPIO_Init+0x1fc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a4d      	ldr	r2, [pc, #308]	; (800198c <HAL_GPIO_Init+0x318>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x1f8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <HAL_GPIO_Init+0x31c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_GPIO_Init+0x1f4>
 8001864:	2307      	movs	r3, #7
 8001866:	e00e      	b.n	8001886 <HAL_GPIO_Init+0x212>
 8001868:	2308      	movs	r3, #8
 800186a:	e00c      	b.n	8001886 <HAL_GPIO_Init+0x212>
 800186c:	2306      	movs	r3, #6
 800186e:	e00a      	b.n	8001886 <HAL_GPIO_Init+0x212>
 8001870:	2305      	movs	r3, #5
 8001872:	e008      	b.n	8001886 <HAL_GPIO_Init+0x212>
 8001874:	2304      	movs	r3, #4
 8001876:	e006      	b.n	8001886 <HAL_GPIO_Init+0x212>
 8001878:	2303      	movs	r3, #3
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x212>
 800187c:	2302      	movs	r3, #2
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x212>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x212>
 8001884:	2300      	movs	r3, #0
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001896:	4937      	ldr	r1, [pc, #220]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a4:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <HAL_GPIO_Init+0x320>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018c8:	4a32      	ldr	r2, [pc, #200]	; (8001994 <HAL_GPIO_Init+0x320>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_GPIO_Init+0x320>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f2:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_GPIO_Init+0x320>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_GPIO_Init+0x320>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_GPIO_Init+0x320>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_GPIO_Init+0x320>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001946:	4a13      	ldr	r2, [pc, #76]	; (8001994 <HAL_GPIO_Init+0x320>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	f47f ae91 	bne.w	8001684 <HAL_GPIO_Init+0x10>
  }
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	48000400 	.word	0x48000400
 800197c:	48000800 	.word	0x48000800
 8001980:	48000c00 	.word	0x48000c00
 8001984:	48001000 	.word	0x48001000
 8001988:	48001400 	.word	0x48001400
 800198c:	48001800 	.word	0x48001800
 8001990:	48001c00 	.word	0x48001c00
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e081      	b.n	8001ade <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff f9b4 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2224      	movs	r2, #36	; 0x24
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	e006      	b.n	8001a50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d104      	bne.n	8001a62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69d9      	ldr	r1, [r3, #28]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1a      	ldr	r2, [r3, #32]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	461a      	mov	r2, r3
 8001af4:	460b      	mov	r3, r1
 8001af6:	817b      	strh	r3, [r7, #10]
 8001af8:	4613      	mov	r3, r2
 8001afa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	f040 80da 	bne.w	8001cbe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_I2C_Master_Transmit+0x30>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e0d3      	b.n	8001cc0 <HAL_I2C_Master_Transmit+0x1d8>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b20:	f7ff fbe8 	bl	80012f4 <HAL_GetTick>
 8001b24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2319      	movs	r3, #25
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fa00 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0be      	b.n	8001cc0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2221      	movs	r2, #33	; 0x21
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	893a      	ldrh	r2, [r7, #8]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2bff      	cmp	r3, #255	; 0xff
 8001b72:	d90e      	bls.n	8001b92 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	22ff      	movs	r2, #255	; 0xff
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	8979      	ldrh	r1, [r7, #10]
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fbf6 	bl	800237c <I2C_TransferConfig>
 8001b90:	e06c      	b.n	8001c6c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	8979      	ldrh	r1, [r7, #10]
 8001ba4:	4b48      	ldr	r3, [pc, #288]	; (8001cc8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 fbe5 	bl	800237c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bb2:	e05b      	b.n	8001c6c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	6a39      	ldr	r1, [r7, #32]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f9fd 	bl	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e07b      	b.n	8001cc0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d034      	beq.n	8001c6c <HAL_I2C_Master_Transmit+0x184>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d130      	bne.n	8001c6c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	2200      	movs	r2, #0
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f98f 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e04d      	b.n	8001cc0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2bff      	cmp	r3, #255	; 0xff
 8001c2c:	d90e      	bls.n	8001c4c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	22ff      	movs	r2, #255	; 0xff
 8001c32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	8979      	ldrh	r1, [r7, #10]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 fb99 	bl	800237c <I2C_TransferConfig>
 8001c4a:	e00f      	b.n	8001c6c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	8979      	ldrh	r1, [r7, #10]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fb88 	bl	800237c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d19e      	bne.n	8001bb4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	6a39      	ldr	r1, [r7, #32]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f9dc 	bl	8002038 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e01a      	b.n	8001cc0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_I2C_Master_Transmit+0x1e4>)
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	80002000 	.word	0x80002000
 8001ccc:	fe00e800 	.word	0xfe00e800

08001cd0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	460b      	mov	r3, r1
 8001cde:	817b      	strh	r3, [r7, #10]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	f040 80db 	bne.w	8001ea8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_I2C_Master_Receive+0x30>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e0d4      	b.n	8001eaa <HAL_I2C_Master_Receive+0x1da>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d08:	f7ff faf4 	bl	80012f4 <HAL_GetTick>
 8001d0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2319      	movs	r3, #25
 8001d14:	2201      	movs	r2, #1
 8001d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f90c 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0bf      	b.n	8001eaa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2222      	movs	r2, #34	; 0x22
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2210      	movs	r2, #16
 8001d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	893a      	ldrh	r2, [r7, #8]
 8001d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2bff      	cmp	r3, #255	; 0xff
 8001d5a:	d90e      	bls.n	8001d7a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	22ff      	movs	r2, #255	; 0xff
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	8979      	ldrh	r1, [r7, #10]
 8001d6a:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <HAL_I2C_Master_Receive+0x1e4>)
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fb02 	bl	800237c <I2C_TransferConfig>
 8001d78:	e06d      	b.n	8001e56 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	8979      	ldrh	r1, [r7, #10]
 8001d8c:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_I2C_Master_Receive+0x1e4>)
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 faf1 	bl	800237c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d9a:	e05c      	b.n	8001e56 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6a39      	ldr	r1, [r7, #32]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f985 	bl	80020b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e07c      	b.n	8001eaa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d034      	beq.n	8001e56 <HAL_I2C_Master_Receive+0x186>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d130      	bne.n	8001e56 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f89a 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e04d      	b.n	8001eaa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2bff      	cmp	r3, #255	; 0xff
 8001e16:	d90e      	bls.n	8001e36 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	22ff      	movs	r2, #255	; 0xff
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	8979      	ldrh	r1, [r7, #10]
 8001e26:	2300      	movs	r3, #0
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 faa4 	bl	800237c <I2C_TransferConfig>
 8001e34:	e00f      	b.n	8001e56 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	8979      	ldrh	r1, [r7, #10]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fa93 	bl	800237c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d19d      	bne.n	8001d9c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	6a39      	ldr	r1, [r7, #32]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f8e7 	bl	8002038 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e01a      	b.n	8001eaa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_I2C_Master_Receive+0x1e8>)
 8001e88:	400b      	ands	r3, r1
 8001e8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e000      	b.n	8001eaa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ea8:	2302      	movs	r3, #2
  }
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	80002400 	.word	0x80002400
 8001eb8:	fe00e800 	.word	0xfe00e800

08001ebc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eca:	b2db      	uxtb	r3, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d103      	bne.n	8001f0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d007      	beq.n	8001f2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	619a      	str	r2, [r3, #24]
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f48:	e022      	b.n	8001f90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f50:	d01e      	beq.n	8001f90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f9cf 	bl	80012f4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d113      	bne.n	8001f90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e00f      	b.n	8001fb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d0cd      	beq.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc4:	e02c      	b.n	8002020 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f8ea 	bl	80021a4 <I2C_IsErrorOccurred>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02a      	b.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fe0:	d01e      	beq.n	8002020 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7ff f987 	bl	80012f4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d113      	bne.n	8002020 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b02      	cmp	r3, #2
 800202c:	d1cb      	bne.n	8001fc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002044:	e028      	b.n	8002098 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f8aa 	bl	80021a4 <I2C_IsErrorOccurred>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e026      	b.n	80020a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7ff f94b 	bl	80012f4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d113      	bne.n	8002098 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e007      	b.n	80020a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d1cf      	bne.n	8002046 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020bc:	e064      	b.n	8002188 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f86e 	bl	80021a4 <I2C_IsErrorOccurred>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e062      	b.n	8002198 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d138      	bne.n	8002152 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d105      	bne.n	80020fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e04e      	b.n	8002198 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b10      	cmp	r3, #16
 8002106:	d107      	bne.n	8002118 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2210      	movs	r2, #16
 800210e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2204      	movs	r2, #4
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
 8002116:	e002      	b.n	800211e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2220      	movs	r2, #32
 8002124:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002132:	400b      	ands	r3, r1
 8002134:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e022      	b.n	8002198 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7ff f8cf 	bl	80012f4 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10f      	bne.n	8002188 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e007      	b.n	8002198 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d193      	bne.n	80020be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	fe00e800 	.word	0xfe00e800

080021a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d075      	beq.n	80022bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2210      	movs	r2, #16
 80021d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021d8:	e056      	b.n	8002288 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e0:	d052      	beq.n	8002288 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021e2:	f7ff f887 	bl	80012f4 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d302      	bcc.n	80021f8 <I2C_IsErrorOccurred+0x54>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d147      	bne.n	8002288 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800220a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800221a:	d12e      	bne.n	800227a <I2C_IsErrorOccurred+0xd6>
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002222:	d02a      	beq.n	800227a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b20      	cmp	r3, #32
 8002228:	d027      	beq.n	800227a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002238:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800223a:	f7ff f85b 	bl	80012f4 <HAL_GetTick>
 800223e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002240:	e01b      	b.n	800227a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002242:	f7ff f857 	bl	80012f4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b19      	cmp	r3, #25
 800224e:	d914      	bls.n	800227a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f043 0220 	orr.w	r2, r3, #32
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b20      	cmp	r3, #32
 8002286:	d1dc      	bne.n	8002242 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b20      	cmp	r3, #32
 8002294:	d003      	beq.n	800229e <I2C_IsErrorOccurred+0xfa>
 8002296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800229a:	2b00      	cmp	r3, #0
 800229c:	d09d      	beq.n	80021da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800229e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2220      	movs	r2, #32
 80022ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	f043 0308 	orr.w	r3, r3, #8
 80022f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002322:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800232a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01c      	beq.n	800236c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff fddc 	bl	8001ef0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <I2C_IsErrorOccurred+0x1d4>)
 8002344:	400b      	ands	r3, r1
 8002346:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800236c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002370:	4618      	mov	r0, r3
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	fe00e800 	.word	0xfe00e800

0800237c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	817b      	strh	r3, [r7, #10]
 800238a:	4613      	mov	r3, r2
 800238c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800238e:	897b      	ldrh	r3, [r7, #10]
 8002390:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002394:	7a7b      	ldrb	r3, [r7, #9]
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800239c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	0d5b      	lsrs	r3, r3, #21
 80023b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <I2C_TransferConfig+0x60>)
 80023bc:	430b      	orrs	r3, r1
 80023be:	43db      	mvns	r3, r3
 80023c0:	ea02 0103 	and.w	r1, r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023ce:	bf00      	nop
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	03ff63ff 	.word	0x03ff63ff

080023e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d138      	bne.n	8002468 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002400:	2302      	movs	r3, #2
 8002402:	e032      	b.n	800246a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	; 0x24
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002432:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b20      	cmp	r3, #32
 800248a:	d139      	bne.n	8002500 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002496:	2302      	movs	r3, #2
 8002498:	e033      	b.n	8002502 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2224      	movs	r2, #36	; 0x24
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800250e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002510:	b08f      	sub	sp, #60	; 0x3c
 8002512:	af0a      	add	r7, sp, #40	; 0x28
 8002514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e116      	b.n	800274e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fcd4 	bl	8000ee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2203      	movs	r2, #3
 8002544:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fdee 	bl	8005140 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	687e      	ldr	r6, [r7, #4]
 800256c:	466d      	mov	r5, sp
 800256e:	f106 0410 	add.w	r4, r6, #16
 8002572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800257a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800257e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002582:	1d33      	adds	r3, r6, #4
 8002584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002586:	6838      	ldr	r0, [r7, #0]
 8002588:	f002 fdae 	bl	80050e8 <USB_CoreInit>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0d7      	b.n	800274e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 fddc 	bl	8005162 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e04a      	b.n	8002646 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	333d      	adds	r3, #61	; 0x3d
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	333c      	adds	r3, #60	; 0x3c
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	b298      	uxth	r0, r3
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	3344      	adds	r3, #68	; 0x44
 80025ec:	4602      	mov	r2, r0
 80025ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3340      	adds	r3, #64	; 0x40
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3348      	adds	r3, #72	; 0x48
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	334c      	adds	r3, #76	; 0x4c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3354      	adds	r3, #84	; 0x54
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	3301      	adds	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	d3af      	bcc.n	80025b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e044      	b.n	80026e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	3301      	adds	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3b5      	bcc.n	8002656 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	687e      	ldr	r6, [r7, #4]
 80026f2:	466d      	mov	r5, sp
 80026f4:	f106 0410 	add.w	r4, r6, #16
 80026f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002704:	e885 0003 	stmia.w	r5, {r0, r1}
 8002708:	1d33      	adds	r3, r6, #4
 800270a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270c:	6838      	ldr	r0, [r7, #0]
 800270e:	f002 fd75 	bl	80051fc <USB_DevInit>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e014      	b.n	800274e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	2b01      	cmp	r3, #1
 800273a:	d102      	bne.n	8002742 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f80a 	bl	8002756 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f002 ff21 	bl	800558e <USB_DevDisconnect>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002756 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	f043 0303 	orr.w	r3, r3, #3
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40007000 	.word	0x40007000

080027c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40007000 	.word	0x40007000

080027dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ea:	d130      	bne.n	800284e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f8:	d038      	beq.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2232      	movs	r2, #50	; 0x32
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0c9b      	lsrs	r3, r3, #18
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002820:	e002      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3b01      	subs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002834:	d102      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f2      	bne.n	8002822 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002848:	d110      	bne.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e00f      	b.n	800286e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285a:	d007      	beq.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002864:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40007000 	.word	0x40007000
 8002880:	20000000 	.word	0x20000000
 8002884:	431bde83 	.word	0x431bde83

08002888 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002896:	6053      	str	r3, [r2, #4]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40007000 	.word	0x40007000

080028a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80028b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b6:	6053      	str	r3, [r2, #4]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40007000 	.word	0x40007000

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f000 bc08 	b.w	80030ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028dc:	4b96      	ldr	r3, [pc, #600]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e6:	4b94      	ldr	r3, [pc, #592]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80e4 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_RCC_OscConfig+0x4c>
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	f040 808b 	bne.w	8002a22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2b01      	cmp	r3, #1
 8002910:	f040 8087 	bne.w	8002a22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002914:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x64>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e3df      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1a      	ldr	r2, [r3, #32]
 8002930:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_RCC_OscConfig+0x7e>
 800293c:	4b7e      	ldr	r3, [pc, #504]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002944:	e005      	b.n	8002952 <HAL_RCC_OscConfig+0x8a>
 8002946:	4b7c      	ldr	r3, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002952:	4293      	cmp	r3, r2
 8002954:	d223      	bcs.n	800299e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fd92 	bl	8003484 <RCC_SetFlashLatencyFromMSIRange>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e3c0      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296a:	4b73      	ldr	r3, [pc, #460]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a72      	ldr	r2, [pc, #456]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	496d      	ldr	r1, [pc, #436]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002988:	4b6b      	ldr	r3, [pc, #428]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	4968      	ldr	r1, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e025      	b.n	80029ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299e:	4b66      	ldr	r3, [pc, #408]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4960      	ldr	r1, [pc, #384]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029bc:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	495b      	ldr	r1, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fd52 	bl	8003484 <RCC_SetFlashLatencyFromMSIRange>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e380      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ea:	f000 fc87 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b51      	ldr	r3, [pc, #324]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	4950      	ldr	r1, [pc, #320]	; (8002b3c <HAL_RCC_OscConfig+0x274>)
 80029fc:	5ccb      	ldrb	r3, [r1, r3]
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	4a4e      	ldr	r2, [pc, #312]	; (8002b40 <HAL_RCC_OscConfig+0x278>)
 8002a08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a0a:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <HAL_RCC_OscConfig+0x27c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fc20 	bl	8001254 <HAL_InitTick>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d052      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	e364      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d032      	beq.n	8002a90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a2a:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a42      	ldr	r2, [pc, #264]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a36:	f7fe fc5d 	bl	80012f4 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fc59 	bl	80012f4 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e34d      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a50:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5c:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a35      	ldr	r2, [pc, #212]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a62:	f043 0308 	orr.w	r3, r3, #8
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4930      	ldr	r1, [pc, #192]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	492b      	ldr	r1, [pc, #172]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
 8002a8e:	e01a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a90:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fc2a 	bl	80012f4 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa4:	f7fe fc26 	bl	80012f4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e31a      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1dc>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d073      	beq.n	8002bba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x21c>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d10e      	bne.n	8002afc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d10b      	bne.n	8002afc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d063      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d15f      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e2f7      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x24c>
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e025      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1c:	d114      	bne.n	8002b48 <HAL_RCC_OscConfig+0x280>
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a02      	ldr	r2, [pc, #8]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e013      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08006d18 	.word	0x08006d18
 8002b40:	20000000 	.word	0x20000000
 8002b44:	20000004 	.word	0x20000004
 8002b48:	4ba0      	ldr	r3, [pc, #640]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a9f      	ldr	r2, [pc, #636]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b9d      	ldr	r3, [pc, #628]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a9c      	ldr	r2, [pc, #624]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fbc4 	bl	80012f4 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fbc0 	bl	80012f4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e2b4      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b82:	4b92      	ldr	r3, [pc, #584]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2a8>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fbb0 	bl	80012f4 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fbac 	bl	80012f4 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e2a0      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002baa:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2d0>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d060      	beq.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x310>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d119      	bne.n	8002c06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d116      	bne.n	8002c06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd8:	4b7c      	ldr	r3, [pc, #496]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x328>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e27d      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b76      	ldr	r3, [pc, #472]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	4973      	ldr	r1, [pc, #460]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c04:	e040      	b.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d023      	beq.n	8002c56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0e:	4b6f      	ldr	r3, [pc, #444]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a6e      	ldr	r2, [pc, #440]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fb6b 	bl	80012f4 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c22:	f7fe fb67 	bl	80012f4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e25b      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c34:	4b65      	ldr	r3, [pc, #404]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c40:	4b62      	ldr	r3, [pc, #392]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	061b      	lsls	r3, r3, #24
 8002c4e:	495f      	ldr	r1, [pc, #380]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
 8002c54:	e018      	b.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c56:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5c      	ldr	r2, [pc, #368]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe fb47 	bl	80012f4 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7fe fb43 	bl	80012f4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e237      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d03c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9c:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	4a4a      	ldr	r2, [pc, #296]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe fb22 	bl	80012f4 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fb1e 	bl	80012f4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e212      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ef      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x3ec>
 8002cd4:	e01b      	b.n	8002d0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cdc:	4a3b      	ldr	r2, [pc, #236]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fb05 	bl	80012f4 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cee:	f7fe fb01 	bl	80012f4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e1f5      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ef      	bne.n	8002cee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80a6 	beq.w	8002e68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10d      	bne.n	8002d48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d36:	6593      	str	r3, [r2, #88]	; 0x58
 8002d38:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_RCC_OscConfig+0x508>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d118      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d54:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <HAL_RCC_OscConfig+0x508>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <HAL_RCC_OscConfig+0x508>)
 8002d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d60:	f7fe fac8 	bl	80012f4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d68:	f7fe fac4 	bl	80012f4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1b8      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_RCC_OscConfig+0x508>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4d8>
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d9e:	e029      	b.n	8002df4 <HAL_RCC_OscConfig+0x52c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d115      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x50c>
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	4a03      	ldr	r2, [pc, #12]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc8:	e014      	b.n	8002df4 <HAL_RCC_OscConfig+0x52c>
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	4b9d      	ldr	r3, [pc, #628]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	4a9c      	ldr	r2, [pc, #624]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de4:	4b99      	ldr	r3, [pc, #612]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	4a98      	ldr	r2, [pc, #608]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fa7a 	bl	80012f4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fe fa76 	bl	80012f4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e168      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1a:	4b8c      	ldr	r3, [pc, #560]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ed      	beq.n	8002e04 <HAL_RCC_OscConfig+0x53c>
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fa63 	bl	80012f4 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe fa5f 	bl	80012f4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e151      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e48:	4b80      	ldr	r3, [pc, #512]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ed      	bne.n	8002e32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e56:	7ffb      	ldrb	r3, [r7, #31]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b7b      	ldr	r3, [pc, #492]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	4a7a      	ldr	r2, [pc, #488]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d03c      	beq.n	8002eee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e7c:	4b73      	ldr	r3, [pc, #460]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e82:	4a72      	ldr	r2, [pc, #456]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fa32 	bl	80012f4 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e94:	f7fe fa2e 	bl	80012f4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e122      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ea6:	4b69      	ldr	r3, [pc, #420]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ef      	beq.n	8002e94 <HAL_RCC_OscConfig+0x5cc>
 8002eb4:	e01b      	b.n	8002eee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eb6:	4b65      	ldr	r3, [pc, #404]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ebc:	4a63      	ldr	r2, [pc, #396]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7fe fa15 	bl	80012f4 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ece:	f7fe fa11 	bl	80012f4 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e105      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ee0:	4b5a      	ldr	r3, [pc, #360]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ef      	bne.n	8002ece <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80f9 	beq.w	80030ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	f040 80cf 	bne.w	80030a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f02:	4b52      	ldr	r3, [pc, #328]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 0203 	and.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d12c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	3b01      	subs	r3, #1
 8002f22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d123      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d11b      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d113      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	3b01      	subs	r3, #1
 8002f56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d109      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d071      	beq.n	8003054 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d068      	beq.n	8003048 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f76:	4b35      	ldr	r3, [pc, #212]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d105      	bne.n	8002f8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f82:	4b32      	ldr	r3, [pc, #200]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0ac      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f92:	4b2e      	ldr	r3, [pc, #184]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2d      	ldr	r2, [pc, #180]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f9e:	f7fe f9a9 	bl	80012f4 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe f9a5 	bl	80012f4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e099      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc4:	4b21      	ldr	r3, [pc, #132]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fde:	0212      	lsls	r2, r2, #8
 8002fe0:	4311      	orrs	r1, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fe6:	0852      	lsrs	r2, r2, #1
 8002fe8:	3a01      	subs	r2, #1
 8002fea:	0552      	lsls	r2, r2, #21
 8002fec:	4311      	orrs	r1, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ff2:	0852      	lsrs	r2, r2, #1
 8002ff4:	3a01      	subs	r2, #1
 8002ff6:	0652      	lsls	r2, r2, #25
 8002ff8:	4311      	orrs	r1, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ffe:	06d2      	lsls	r2, r2, #27
 8003000:	430a      	orrs	r2, r1
 8003002:	4912      	ldr	r1, [pc, #72]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8003004:	4313      	orrs	r3, r2
 8003006:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RCC_OscConfig+0x784>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_RCC_OscConfig+0x784>)
 800300e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003012:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a0c      	ldr	r2, [pc, #48]	; (800304c <HAL_RCC_OscConfig+0x784>)
 800301a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003020:	f7fe f968 	bl	80012f4 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7fe f964 	bl	80012f4 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e058      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <HAL_RCC_OscConfig+0x784>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003046:	e050      	b.n	80030ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e04f      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
 800304c:	40021000 	.word	0x40021000
 8003050:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d144      	bne.n	80030ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 8003066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 8003072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003076:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003078:	f7fe f93c 	bl	80012f4 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe f938 	bl	80012f4 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e02c      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x7b8>
 800309e:	e024      	b.n	80030ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d01f      	beq.n	80030e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 80030ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe f91f 	bl	80012f4 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe f91b 	bl	80012f4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e00f      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4905      	ldr	r1, [pc, #20]	; (80030f4 <HAL_RCC_OscConfig+0x82c>)
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCC_OscConfig+0x830>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	60cb      	str	r3, [r1, #12]
 80030e4:	e001      	b.n	80030ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3720      	adds	r7, #32
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	feeefffc 	.word	0xfeeefffc

080030fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0e7      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b75      	ldr	r3, [pc, #468]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d910      	bls.n	8003140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b72      	ldr	r3, [pc, #456]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 0207 	bic.w	r2, r3, #7
 8003126:	4970      	ldr	r1, [pc, #448]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b6e      	ldr	r3, [pc, #440]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0cf      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003158:	429a      	cmp	r2, r3
 800315a:	d908      	bls.n	800316e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315c:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4960      	ldr	r1, [pc, #384]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d04c      	beq.n	8003214 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d107      	bne.n	8003192 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	4b5a      	ldr	r3, [pc, #360]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d121      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0a6      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319a:	4b54      	ldr	r3, [pc, #336]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e09a      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b2:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e08e      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e086      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4943      	ldr	r1, [pc, #268]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fe f886 	bl	80012f4 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7fe f882 	bl	80012f4 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e06e      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b3a      	ldr	r3, [pc, #232]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d010      	beq.n	8003242 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	4b31      	ldr	r3, [pc, #196]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322c:	429a      	cmp	r2, r3
 800322e:	d208      	bcs.n	8003242 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	492b      	ldr	r1, [pc, #172]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d210      	bcs.n	8003272 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003250:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 0207 	bic.w	r2, r3, #7
 8003258:	4923      	ldr	r1, [pc, #140]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e036      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4918      	ldr	r1, [pc, #96]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4910      	ldr	r1, [pc, #64]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032b0:	f000 f824 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	490b      	ldr	r1, [pc, #44]	; (80032f0 <HAL_RCC_ClockConfig+0x1f4>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1f8>)
 80032ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd ffbd 	bl	8001254 <HAL_InitTick>
 80032da:	4603      	mov	r3, r0
 80032dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80032de:	7afb      	ldrb	r3, [r7, #11]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40021000 	.word	0x40021000
 80032f0:	08006d18 	.word	0x08006d18
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330a:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003314:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x34>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d121      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d11e      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003330:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d107      	bne.n	800334c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800333c:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e005      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800334c:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003358:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <HAL_RCC_GetSysClockFreq+0x10c>)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003360:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10d      	bne.n	8003384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d102      	bne.n	800337a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <HAL_RCC_GetSysClockFreq+0x110>)
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e004      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d101      	bne.n	8003384 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003380:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_RCC_GetSysClockFreq+0x114>)
 8003382:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d134      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d003      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0xac>
 80033a0:	e005      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <HAL_RCC_GetSysClockFreq+0x110>)
 80033a4:	617b      	str	r3, [r7, #20]
      break;
 80033a6:	e005      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_GetSysClockFreq+0x114>)
 80033aa:	617b      	str	r3, [r7, #20]
      break;
 80033ac:	e002      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	617b      	str	r3, [r7, #20]
      break;
 80033b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	3301      	adds	r3, #1
 80033c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	fb03 f202 	mul.w	r2, r3, r2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	0e5b      	lsrs	r3, r3, #25
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	3301      	adds	r3, #1
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033f4:	69bb      	ldr	r3, [r7, #24]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	08006d30 	.word	0x08006d30
 800340c:	00f42400 	.word	0x00f42400
 8003410:	007a1200 	.word	0x007a1200

08003414 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_RCC_GetHCLKFreq+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000000 	.word	0x20000000

0800342c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003430:	f7ff fff0 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4904      	ldr	r1, [pc, #16]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	08006d28 	.word	0x08006d28

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800345c:	f7ff ffda 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0adb      	lsrs	r3, r3, #11
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4904      	ldr	r1, [pc, #16]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	08006d28 	.word	0x08006d28

08003484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800349c:	f7ff f990 	bl	80027c0 <HAL_PWREx_GetVoltageRange>
 80034a0:	6178      	str	r0, [r7, #20]
 80034a2:	e014      	b.n	80034ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	4a24      	ldr	r2, [pc, #144]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ae:	6593      	str	r3, [r2, #88]	; 0x58
 80034b0:	4b22      	ldr	r3, [pc, #136]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034bc:	f7ff f980 	bl	80027c0 <HAL_PWREx_GetVoltageRange>
 80034c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	4a1d      	ldr	r2, [pc, #116]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d4:	d10b      	bne.n	80034ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d919      	bls.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2ba0      	cmp	r3, #160	; 0xa0
 80034e0:	d902      	bls.n	80034e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034e2:	2302      	movs	r3, #2
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e013      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e8:	2301      	movs	r3, #1
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	e010      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d902      	bls.n	80034fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034f4:	2303      	movs	r3, #3
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	e00a      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d102      	bne.n	8003506 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003500:	2302      	movs	r3, #2
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	e004      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b70      	cmp	r3, #112	; 0x70
 800350a:	d101      	bne.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800350c:	2301      	movs	r3, #1
 800350e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 0207 	bic.w	r2, r3, #7
 8003518:	4909      	ldr	r1, [pc, #36]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	429a      	cmp	r2, r3
 800352c:	d001      	beq.n	8003532 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	40022000 	.word	0x40022000

08003544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800354c:	2300      	movs	r3, #0
 800354e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003550:	2300      	movs	r3, #0
 8003552:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800355c:	2b00      	cmp	r3, #0
 800355e:	d041      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003564:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003568:	d02a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800356a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800356e:	d824      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003570:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003574:	d008      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800357a:	d81e      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003584:	d010      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003586:	e018      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003588:	4b86      	ldr	r3, [pc, #536]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a85      	ldr	r2, [pc, #532]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003592:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003594:	e015      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fadd 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a6:	e00c      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3320      	adds	r3, #32
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fbc6 	bl	8003d40 <RCCEx_PLLSAI2_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b8:	e003      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	74fb      	strb	r3, [r7, #19]
      break;
 80035be:	e000      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c8:	4b76      	ldr	r3, [pc, #472]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d6:	4973      	ldr	r1, [pc, #460]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035de:	e001      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d041      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035f8:	d02a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035fe:	d824      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003604:	d008      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800360a:	d81e      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003614:	d010      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003616:	e018      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003618:	4b62      	ldr	r3, [pc, #392]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a61      	ldr	r2, [pc, #388]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003622:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003624:	e015      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fa95 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003636:	e00c      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3320      	adds	r3, #32
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fb7e 	bl	8003d40 <RCCEx_PLLSAI2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	74fb      	strb	r3, [r7, #19]
      break;
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10b      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003658:	4b52      	ldr	r3, [pc, #328]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003666:	494f      	ldr	r1, [pc, #316]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800366e:	e001      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a0 	beq.w	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003696:	2300      	movs	r3, #0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	4a40      	ldr	r2, [pc, #256]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	; 0x58
 80036a8:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3a      	ldr	r2, [pc, #232]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036c4:	f7fd fe16 	bl	80012f4 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ca:	e009      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036cc:	f7fd fe12 	bl	80012f4 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d902      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	74fb      	strb	r3, [r7, #19]
        break;
 80036de:	e005      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ef      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d15c      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036f2:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01f      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	d019      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003710:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800371c:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	4a20      	ldr	r2, [pc, #128]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800372c:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fd fdd1 	bl	80012f4 <HAL_GetTick>
 8003752:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003754:	e00b      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fd fdcd 	bl	80012f4 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	; 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d902      	bls.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	74fb      	strb	r3, [r7, #19]
            break;
 800376c:	e006      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ec      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	4904      	ldr	r1, [pc, #16]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800379a:	e009      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
 80037a0:	e006      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b0:	7c7b      	ldrb	r3, [r7, #17]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d105      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b6:	4ba6      	ldr	r3, [pc, #664]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ba:	4aa5      	ldr	r2, [pc, #660]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ce:	4ba0      	ldr	r3, [pc, #640]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	f023 0203 	bic.w	r2, r3, #3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	499c      	ldr	r1, [pc, #624]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037f0:	4b97      	ldr	r3, [pc, #604]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f023 020c 	bic.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	4994      	ldr	r1, [pc, #592]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003812:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	498b      	ldr	r1, [pc, #556]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003834:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4983      	ldr	r1, [pc, #524]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003856:	4b7e      	ldr	r3, [pc, #504]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003864:	497a      	ldr	r1, [pc, #488]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003878:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4972      	ldr	r1, [pc, #456]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800389a:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a8:	4969      	ldr	r1, [pc, #420]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038bc:	4b64      	ldr	r3, [pc, #400]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ca:	4961      	ldr	r1, [pc, #388]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038de:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	4958      	ldr	r1, [pc, #352]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003900:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	4950      	ldr	r1, [pc, #320]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003922:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	4947      	ldr	r1, [pc, #284]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003944:	4b42      	ldr	r3, [pc, #264]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	493f      	ldr	r1, [pc, #252]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d028      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003966:	4b3a      	ldr	r3, [pc, #232]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4936      	ldr	r1, [pc, #216]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003984:	d106      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003986:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4a31      	ldr	r2, [pc, #196]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003990:	60d3      	str	r3, [r2, #12]
 8003992:	e011      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399c:	d10c      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2101      	movs	r1, #1
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f8d9 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d028      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d2:	491f      	ldr	r1, [pc, #124]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e2:	d106      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ee:	60d3      	str	r3, [r2, #12]
 80039f0:	e011      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039fa:	d10c      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f8aa 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a30:	4907      	ldr	r1, [pc, #28]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a40:	d108      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a42:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	4a02      	ldr	r2, [pc, #8]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a4c:	60d3      	str	r3, [r2, #12]
 8003a4e:	e013      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003a50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2101      	movs	r1, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f879 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02f      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a92:	4929      	ldr	r1, [pc, #164]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f856 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	74bb      	strb	r3, [r7, #18]
 8003abe:	e011      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3320      	adds	r3, #32
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f935 	bl	8003d40 <RCCEx_PLLSAI2_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b00:	490d      	ldr	r1, [pc, #52]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b14:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b24:	4904      	ldr	r1, [pc, #16]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000

08003b3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b46:	f043 0304 	orr.w	r3, r3, #4
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b6a:	4b74      	ldr	r3, [pc, #464]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d018      	beq.n	8003ba8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b76:	4b71      	ldr	r3, [pc, #452]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0203 	and.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d10d      	bne.n	8003ba2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
       ||
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b8e:	4b6b      	ldr	r3, [pc, #428]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d047      	beq.n	8003c32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
 8003ba6:	e044      	b.n	8003c32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d018      	beq.n	8003be2 <RCCEx_PLLSAI1_Config+0x86>
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d825      	bhi.n	8003c00 <RCCEx_PLLSAI1_Config+0xa4>
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d002      	beq.n	8003bbe <RCCEx_PLLSAI1_Config+0x62>
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d009      	beq.n	8003bd0 <RCCEx_PLLSAI1_Config+0x74>
 8003bbc:	e020      	b.n	8003c00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bbe:	4b5f      	ldr	r3, [pc, #380]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d11d      	bne.n	8003c06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bce:	e01a      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bd0:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be0:	e013      	b.n	8003c0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003be2:	4b56      	ldr	r3, [pc, #344]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10f      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bee:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bfe:	e006      	b.n	8003c0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      break;
 8003c04:	e004      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10d      	bne.n	8003c32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6819      	ldr	r1, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	4943      	ldr	r1, [pc, #268]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d17c      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c38:	4b40      	ldr	r3, [pc, #256]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3f      	ldr	r2, [pc, #252]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c44:	f7fd fb56 	bl	80012f4 <HAL_GetTick>
 8003c48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c4a:	e009      	b.n	8003c60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c4c:	f7fd fb52 	bl	80012f4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d902      	bls.n	8003c60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c5e:	e005      	b.n	8003c6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c60:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ef      	bne.n	8003c4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d15f      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d110      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c78:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6892      	ldr	r2, [r2, #8]
 8003c88:	0211      	lsls	r1, r2, #8
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	06d2      	lsls	r2, r2, #27
 8003c90:	430a      	orrs	r2, r1
 8003c92:	492a      	ldr	r1, [pc, #168]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	610b      	str	r3, [r1, #16]
 8003c98:	e027      	b.n	8003cea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d112      	bne.n	8003cc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ca8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	0211      	lsls	r1, r2, #8
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6912      	ldr	r2, [r2, #16]
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0552      	lsls	r2, r2, #21
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	491f      	ldr	r1, [pc, #124]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	610b      	str	r3, [r1, #16]
 8003cc4:	e011      	b.n	8003cea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6892      	ldr	r2, [r2, #8]
 8003cd6:	0211      	lsls	r1, r2, #8
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6952      	ldr	r2, [r2, #20]
 8003cdc:	0852      	lsrs	r2, r2, #1
 8003cde:	3a01      	subs	r2, #1
 8003ce0:	0652      	lsls	r2, r2, #25
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	4915      	ldr	r1, [pc, #84]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fd fafd 	bl	80012f4 <HAL_GetTick>
 8003cfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cfc:	e009      	b.n	8003d12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cfe:	f7fd faf9 	bl	80012f4 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d902      	bls.n	8003d12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	73fb      	strb	r3, [r7, #15]
          break;
 8003d10:	e005      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0ef      	beq.n	8003cfe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000

08003d40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d4e:	4b69      	ldr	r3, [pc, #420]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d018      	beq.n	8003d8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d5a:	4b66      	ldr	r3, [pc, #408]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0203 	and.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d10d      	bne.n	8003d86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d72:	4b60      	ldr	r3, [pc, #384]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
       ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d047      	beq.n	8003e16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e044      	b.n	8003e16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d018      	beq.n	8003dc6 <RCCEx_PLLSAI2_Config+0x86>
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d825      	bhi.n	8003de4 <RCCEx_PLLSAI2_Config+0xa4>
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d002      	beq.n	8003da2 <RCCEx_PLLSAI2_Config+0x62>
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d009      	beq.n	8003db4 <RCCEx_PLLSAI2_Config+0x74>
 8003da0:	e020      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003da2:	4b54      	ldr	r3, [pc, #336]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11d      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db2:	e01a      	b.n	8003dea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db4:	4b4f      	ldr	r3, [pc, #316]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc4:	e013      	b.n	8003dee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dc6:	4b4b      	ldr	r3, [pc, #300]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dd2:	4b48      	ldr	r3, [pc, #288]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003de2:	e006      	b.n	8003df2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e004      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003df2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	4938      	ldr	r1, [pc, #224]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d166      	bne.n	8003eea <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e1c:	4b35      	ldr	r3, [pc, #212]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a34      	ldr	r2, [pc, #208]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e28:	f7fd fa64 	bl	80012f4 <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e2e:	e009      	b.n	8003e44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e30:	f7fd fa60 	bl	80012f4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d902      	bls.n	8003e44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	73fb      	strb	r3, [r7, #15]
        break;
 8003e42:	e005      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ef      	bne.n	8003e30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d149      	bne.n	8003eea <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d110      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e5c:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6892      	ldr	r2, [r2, #8]
 8003e6c:	0211      	lsls	r1, r2, #8
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68d2      	ldr	r2, [r2, #12]
 8003e72:	06d2      	lsls	r2, r2, #27
 8003e74:	430a      	orrs	r2, r1
 8003e76:	491f      	ldr	r1, [pc, #124]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	614b      	str	r3, [r1, #20]
 8003e7c:	e011      	b.n	8003ea2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6892      	ldr	r2, [r2, #8]
 8003e8e:	0211      	lsls	r1, r2, #8
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6912      	ldr	r2, [r2, #16]
 8003e94:	0852      	lsrs	r2, r2, #1
 8003e96:	3a01      	subs	r2, #1
 8003e98:	0652      	lsls	r2, r2, #25
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	4915      	ldr	r1, [pc, #84]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eae:	f7fd fa21 	bl	80012f4 <HAL_GetTick>
 8003eb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eb4:	e009      	b.n	8003eca <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb6:	f7fd fa1d 	bl	80012f4 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d902      	bls.n	8003eca <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ec8:	e005      	b.n	8003ed6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0ef      	beq.n	8003eb6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	4903      	ldr	r1, [pc, #12]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000

08003ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e040      	b.n	8003f8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fc ff7c 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fbc2 	bl	80046c0 <UART_SetConfig>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e022      	b.n	8003f8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fe6e 	bl	8004c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fef5 	bl	8004d74 <UART_CheckIdleState>
 8003f8a:	4603      	mov	r3, r0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	f040 8082 	bne.w	80040b2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_UART_Transmit+0x26>
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e07a      	b.n	80040b4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Transmit+0x38>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e073      	b.n	80040b4 <HAL_UART_Transmit+0x120>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2221      	movs	r2, #33	; 0x21
 8003fe0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe2:	f7fd f987 	bl	80012f4 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d108      	bne.n	8004014 <HAL_UART_Transmit+0x80>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e003      	b.n	800401c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004024:	e02d      	b.n	8004082 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2200      	movs	r2, #0
 800402e:	2180      	movs	r1, #128	; 0x80
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fee8 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e039      	b.n	80040b4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	881a      	ldrh	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004052:	b292      	uxth	r2, r2
 8004054:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	3302      	adds	r3, #2
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e008      	b.n	8004070 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b292      	uxth	r2, r2
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3301      	adds	r3, #1
 800406e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1cb      	bne.n	8004026 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2200      	movs	r2, #0
 8004096:	2140      	movs	r1, #64	; 0x40
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 feb4 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e005      	b.n	80040b4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3720      	adds	r7, #32
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b0ba      	sub	sp, #232	; 0xe8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80040ea:	4013      	ands	r3, r2
 80040ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80040f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d115      	bne.n	8004124 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00f      	beq.n	8004124 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 82a6 	beq.w	8004666 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
      }
      return;
 8004122:	e2a0      	b.n	8004666 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8117 	beq.w	800435c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800412e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800413a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800413e:	4b85      	ldr	r3, [pc, #532]	; (8004354 <HAL_UART_IRQHandler+0x298>)
 8004140:	4013      	ands	r3, r2
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 810a 	beq.w	800435c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d011      	beq.n	8004178 <HAL_UART_IRQHandler+0xbc>
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d011      	beq.n	80041a8 <HAL_UART_IRQHandler+0xec>
 8004184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2202      	movs	r2, #2
 8004196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419e:	f043 0204 	orr.w	r2, r3, #4
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d011      	beq.n	80041d8 <HAL_UART_IRQHandler+0x11c>
 80041b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2204      	movs	r2, #4
 80041c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ce:	f043 0202 	orr.w	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d017      	beq.n	8004214 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2208      	movs	r2, #8
 8004202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420a:	f043 0208 	orr.w	r2, r3, #8
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <HAL_UART_IRQHandler+0x18a>
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00c      	beq.n	8004246 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 820c 	beq.w	800466a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00d      	beq.n	800427a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800425e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	d005      	beq.n	800429e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004296:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800429a:	2b00      	cmp	r3, #0
 800429c:	d04f      	beq.n	800433e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fe75 	bl	8004f8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d141      	bne.n	8004336 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3308      	adds	r3, #8
 80042b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1d9      	bne.n	80042b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	2b00      	cmp	r3, #0
 8004304:	d013      	beq.n	800432e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a13      	ldr	r2, [pc, #76]	; (8004358 <HAL_UART_IRQHandler+0x29c>)
 800430c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd f96d 	bl	80015f2 <HAL_DMA_Abort_IT>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d017      	beq.n	800434e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004328:	4610      	mov	r0, r2
 800432a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	e00f      	b.n	800434e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f9b0 	bl	8004694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	e00b      	b.n	800434e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f9ac 	bl	8004694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	e007      	b.n	800434e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f9a8 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800434c:	e18d      	b.n	800466a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434e:	bf00      	nop
    return;
 8004350:	e18b      	b.n	800466a <HAL_UART_IRQHandler+0x5ae>
 8004352:	bf00      	nop
 8004354:	04000120 	.word	0x04000120
 8004358:	08005055 	.word	0x08005055

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004360:	2b01      	cmp	r3, #1
 8004362:	f040 8146 	bne.w	80045f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 813f 	beq.w	80045f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8138 	beq.w	80045f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2210      	movs	r2, #16
 8004388:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	f040 80b4 	bne.w	8004502 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 815f 	beq.w	800466e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ba:	429a      	cmp	r2, r3
 80043bc:	f080 8157 	bcs.w	800466e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f040 8085 	bne.w	80044e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800440a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800441e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1da      	bne.n	80043dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800444a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800444e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800445c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e1      	bne.n	8004426 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3308      	adds	r3, #8
 8004468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800448c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b6:	f023 0310 	bic.w	r3, r3, #16
 80044ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80044ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e4      	bne.n	80044a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fd f848 	bl	8001576 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8d4 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004500:	e0b5      	b.n	800466e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800450e:	b29b      	uxth	r3, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80a7 	beq.w	8004672 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80a2 	beq.w	8004672 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004550:	647b      	str	r3, [r7, #68]	; 0x44
 8004552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e4      	bne.n	800452e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	623b      	str	r3, [r7, #32]
   return(result);
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3308      	adds	r3, #8
 8004584:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004588:	633a      	str	r2, [r7, #48]	; 0x30
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800458e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e3      	bne.n	8004564 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0310 	bic.w	r3, r3, #16
 80045c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	69b9      	ldr	r1, [r7, #24]
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	617b      	str	r3, [r7, #20]
   return(result);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e4      	bne.n	80045ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f85c 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045f0:	e03f      	b.n	8004672 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00e      	beq.n	800461c <HAL_UART_IRQHandler+0x560>
 80045fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004612:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fd5d 	bl	80050d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800461a:	e02d      	b.n	8004678 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800461c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00e      	beq.n	8004646 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01c      	beq.n	8004676 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
    }
    return;
 8004644:	e017      	b.n	8004676 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d012      	beq.n	8004678 <HAL_UART_IRQHandler+0x5bc>
 8004652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fd0e 	bl	8005080 <UART_EndTransmit_IT>
    return;
 8004664:	e008      	b.n	8004678 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004666:	bf00      	nop
 8004668:	e006      	b.n	8004678 <HAL_UART_IRQHandler+0x5bc>
    return;
 800466a:	bf00      	nop
 800466c:	e004      	b.n	8004678 <HAL_UART_IRQHandler+0x5bc>
      return;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004676:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004678:	37e8      	adds	r7, #232	; 0xe8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop

08004680 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c4:	b08a      	sub	sp, #40	; 0x28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4ba4      	ldr	r3, [pc, #656]	; (8004980 <UART_SetConfig+0x2c0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a99      	ldr	r2, [pc, #612]	; (8004984 <UART_SetConfig+0x2c4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004728:	4313      	orrs	r3, r2
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a90      	ldr	r2, [pc, #576]	; (8004988 <UART_SetConfig+0x2c8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d126      	bne.n	8004798 <UART_SetConfig+0xd8>
 800474a:	4b90      	ldr	r3, [pc, #576]	; (800498c <UART_SetConfig+0x2cc>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b03      	cmp	r3, #3
 8004756:	d81b      	bhi.n	8004790 <UART_SetConfig+0xd0>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <UART_SetConfig+0xa0>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004771 	.word	0x08004771
 8004764:	08004781 	.word	0x08004781
 8004768:	08004779 	.word	0x08004779
 800476c:	08004789 	.word	0x08004789
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e116      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004778:	2302      	movs	r3, #2
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e112      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004780:	2304      	movs	r3, #4
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e10e      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004788:	2308      	movs	r3, #8
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e10a      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004790:	2310      	movs	r3, #16
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e106      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a7c      	ldr	r2, [pc, #496]	; (8004990 <UART_SetConfig+0x2d0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d138      	bne.n	8004814 <UART_SetConfig+0x154>
 80047a2:	4b7a      	ldr	r3, [pc, #488]	; (800498c <UART_SetConfig+0x2cc>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b0c      	cmp	r3, #12
 80047ae:	d82d      	bhi.n	800480c <UART_SetConfig+0x14c>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0xf8>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047ed 	.word	0x080047ed
 80047bc:	0800480d 	.word	0x0800480d
 80047c0:	0800480d 	.word	0x0800480d
 80047c4:	0800480d 	.word	0x0800480d
 80047c8:	080047fd 	.word	0x080047fd
 80047cc:	0800480d 	.word	0x0800480d
 80047d0:	0800480d 	.word	0x0800480d
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	080047f5 	.word	0x080047f5
 80047dc:	0800480d 	.word	0x0800480d
 80047e0:	0800480d 	.word	0x0800480d
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004805 	.word	0x08004805
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e0d8      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80047f4:	2302      	movs	r3, #2
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e0d4      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80047fc:	2304      	movs	r3, #4
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e0d0      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004804:	2308      	movs	r3, #8
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480a:	e0cc      	b.n	80049a6 <UART_SetConfig+0x2e6>
 800480c:	2310      	movs	r3, #16
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004812:	e0c8      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a5e      	ldr	r2, [pc, #376]	; (8004994 <UART_SetConfig+0x2d4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d125      	bne.n	800486a <UART_SetConfig+0x1aa>
 800481e:	4b5b      	ldr	r3, [pc, #364]	; (800498c <UART_SetConfig+0x2cc>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004828:	2b30      	cmp	r3, #48	; 0x30
 800482a:	d016      	beq.n	800485a <UART_SetConfig+0x19a>
 800482c:	2b30      	cmp	r3, #48	; 0x30
 800482e:	d818      	bhi.n	8004862 <UART_SetConfig+0x1a2>
 8004830:	2b20      	cmp	r3, #32
 8004832:	d00a      	beq.n	800484a <UART_SetConfig+0x18a>
 8004834:	2b20      	cmp	r3, #32
 8004836:	d814      	bhi.n	8004862 <UART_SetConfig+0x1a2>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <UART_SetConfig+0x182>
 800483c:	2b10      	cmp	r3, #16
 800483e:	d008      	beq.n	8004852 <UART_SetConfig+0x192>
 8004840:	e00f      	b.n	8004862 <UART_SetConfig+0x1a2>
 8004842:	2300      	movs	r3, #0
 8004844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004848:	e0ad      	b.n	80049a6 <UART_SetConfig+0x2e6>
 800484a:	2302      	movs	r3, #2
 800484c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004850:	e0a9      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004852:	2304      	movs	r3, #4
 8004854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004858:	e0a5      	b.n	80049a6 <UART_SetConfig+0x2e6>
 800485a:	2308      	movs	r3, #8
 800485c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004860:	e0a1      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004862:	2310      	movs	r3, #16
 8004864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004868:	e09d      	b.n	80049a6 <UART_SetConfig+0x2e6>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a4a      	ldr	r2, [pc, #296]	; (8004998 <UART_SetConfig+0x2d8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d125      	bne.n	80048c0 <UART_SetConfig+0x200>
 8004874:	4b45      	ldr	r3, [pc, #276]	; (800498c <UART_SetConfig+0x2cc>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800487e:	2bc0      	cmp	r3, #192	; 0xc0
 8004880:	d016      	beq.n	80048b0 <UART_SetConfig+0x1f0>
 8004882:	2bc0      	cmp	r3, #192	; 0xc0
 8004884:	d818      	bhi.n	80048b8 <UART_SetConfig+0x1f8>
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d00a      	beq.n	80048a0 <UART_SetConfig+0x1e0>
 800488a:	2b80      	cmp	r3, #128	; 0x80
 800488c:	d814      	bhi.n	80048b8 <UART_SetConfig+0x1f8>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <UART_SetConfig+0x1d8>
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d008      	beq.n	80048a8 <UART_SetConfig+0x1e8>
 8004896:	e00f      	b.n	80048b8 <UART_SetConfig+0x1f8>
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e082      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048a0:	2302      	movs	r3, #2
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e07e      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048a8:	2304      	movs	r3, #4
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e07a      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048b0:	2308      	movs	r3, #8
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b6:	e076      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048b8:	2310      	movs	r3, #16
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048be:	e072      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a35      	ldr	r2, [pc, #212]	; (800499c <UART_SetConfig+0x2dc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d12a      	bne.n	8004920 <UART_SetConfig+0x260>
 80048ca:	4b30      	ldr	r3, [pc, #192]	; (800498c <UART_SetConfig+0x2cc>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d8:	d01a      	beq.n	8004910 <UART_SetConfig+0x250>
 80048da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048de:	d81b      	bhi.n	8004918 <UART_SetConfig+0x258>
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e4:	d00c      	beq.n	8004900 <UART_SetConfig+0x240>
 80048e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ea:	d815      	bhi.n	8004918 <UART_SetConfig+0x258>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <UART_SetConfig+0x238>
 80048f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f4:	d008      	beq.n	8004908 <UART_SetConfig+0x248>
 80048f6:	e00f      	b.n	8004918 <UART_SetConfig+0x258>
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e052      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004900:	2302      	movs	r3, #2
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e04e      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004908:	2304      	movs	r3, #4
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e04a      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004910:	2308      	movs	r3, #8
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e046      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004918:	2310      	movs	r3, #16
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e042      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a17      	ldr	r2, [pc, #92]	; (8004984 <UART_SetConfig+0x2c4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d13a      	bne.n	80049a0 <UART_SetConfig+0x2e0>
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <UART_SetConfig+0x2cc>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004938:	d01a      	beq.n	8004970 <UART_SetConfig+0x2b0>
 800493a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800493e:	d81b      	bhi.n	8004978 <UART_SetConfig+0x2b8>
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d00c      	beq.n	8004960 <UART_SetConfig+0x2a0>
 8004946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494a:	d815      	bhi.n	8004978 <UART_SetConfig+0x2b8>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <UART_SetConfig+0x298>
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004954:	d008      	beq.n	8004968 <UART_SetConfig+0x2a8>
 8004956:	e00f      	b.n	8004978 <UART_SetConfig+0x2b8>
 8004958:	2300      	movs	r3, #0
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495e:	e022      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004960:	2302      	movs	r3, #2
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e01e      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004968:	2304      	movs	r3, #4
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e01a      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004970:	2308      	movs	r3, #8
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e016      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004978:	2310      	movs	r3, #16
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e012      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004980:	efff69f3 	.word	0xefff69f3
 8004984:	40008000 	.word	0x40008000
 8004988:	40013800 	.word	0x40013800
 800498c:	40021000 	.word	0x40021000
 8004990:	40004400 	.word	0x40004400
 8004994:	40004800 	.word	0x40004800
 8004998:	40004c00 	.word	0x40004c00
 800499c:	40005000 	.word	0x40005000
 80049a0:	2310      	movs	r3, #16
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a9f      	ldr	r2, [pc, #636]	; (8004c28 <UART_SetConfig+0x568>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d17a      	bne.n	8004aa6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d824      	bhi.n	8004a02 <UART_SetConfig+0x342>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <UART_SetConfig+0x300>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	08004a03 	.word	0x08004a03
 80049c8:	080049ed 	.word	0x080049ed
 80049cc:	08004a03 	.word	0x08004a03
 80049d0:	080049f3 	.word	0x080049f3
 80049d4:	08004a03 	.word	0x08004a03
 80049d8:	08004a03 	.word	0x08004a03
 80049dc:	08004a03 	.word	0x08004a03
 80049e0:	080049fb 	.word	0x080049fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e4:	f7fe fd22 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 80049e8:	61f8      	str	r0, [r7, #28]
        break;
 80049ea:	e010      	b.n	8004a0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ec:	4b8f      	ldr	r3, [pc, #572]	; (8004c2c <UART_SetConfig+0x56c>)
 80049ee:	61fb      	str	r3, [r7, #28]
        break;
 80049f0:	e00d      	b.n	8004a0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f2:	f7fe fc83 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80049f6:	61f8      	str	r0, [r7, #28]
        break;
 80049f8:	e009      	b.n	8004a0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fe:	61fb      	str	r3, [r7, #28]
        break;
 8004a00:	e005      	b.n	8004a0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80fb 	beq.w	8004c0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	4413      	add	r3, r2
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d305      	bcc.n	8004a32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d903      	bls.n	8004a3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a38:	e0e8      	b.n	8004c0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	461c      	mov	r4, r3
 8004a40:	4615      	mov	r5, r2
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	022b      	lsls	r3, r5, #8
 8004a4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a50:	0222      	lsls	r2, r4, #8
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	6849      	ldr	r1, [r1, #4]
 8004a56:	0849      	lsrs	r1, r1, #1
 8004a58:	2000      	movs	r0, #0
 8004a5a:	4688      	mov	r8, r1
 8004a5c:	4681      	mov	r9, r0
 8004a5e:	eb12 0a08 	adds.w	sl, r2, r8
 8004a62:	eb43 0b09 	adc.w	fp, r3, r9
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a74:	4650      	mov	r0, sl
 8004a76:	4659      	mov	r1, fp
 8004a78:	f7fb fc0a 	bl	8000290 <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4613      	mov	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a8a:	d308      	bcc.n	8004a9e <UART_SetConfig+0x3de>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d204      	bcs.n	8004a9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	e0b6      	b.n	8004c0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004aa4:	e0b2      	b.n	8004c0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aae:	d15e      	bne.n	8004b6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d828      	bhi.n	8004b0a <UART_SetConfig+0x44a>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0x400>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	08004b0b 	.word	0x08004b0b
 8004ad0:	08004afb 	.word	0x08004afb
 8004ad4:	08004b0b 	.word	0x08004b0b
 8004ad8:	08004b0b 	.word	0x08004b0b
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	08004b03 	.word	0x08004b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7fe fca2 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 8004ae8:	61f8      	str	r0, [r7, #28]
        break;
 8004aea:	e014      	b.n	8004b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aec:	f7fe fcb4 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8004af0:	61f8      	str	r0, [r7, #28]
        break;
 8004af2:	e010      	b.n	8004b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af4:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <UART_SetConfig+0x56c>)
 8004af6:	61fb      	str	r3, [r7, #28]
        break;
 8004af8:	e00d      	b.n	8004b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afa:	f7fe fbff 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8004afe:	61f8      	str	r0, [r7, #28]
        break;
 8004b00:	e009      	b.n	8004b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b06:	61fb      	str	r3, [r7, #28]
        break;
 8004b08:	e005      	b.n	8004b16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d077      	beq.n	8004c0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	005a      	lsls	r2, r3, #1
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	441a      	add	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b0f      	cmp	r3, #15
 8004b36:	d916      	bls.n	8004b66 <UART_SetConfig+0x4a6>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3e:	d212      	bcs.n	8004b66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f023 030f 	bic.w	r3, r3, #15
 8004b48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	8afb      	ldrh	r3, [r7, #22]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	8afa      	ldrh	r2, [r7, #22]
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	e052      	b.n	8004c0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b6c:	e04e      	b.n	8004c0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d827      	bhi.n	8004bc6 <UART_SetConfig+0x506>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0x4bc>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb7 	.word	0x08004bb7
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7fe fc44 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 8004ba4:	61f8      	str	r0, [r7, #28]
        break;
 8004ba6:	e014      	b.n	8004bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fe fc56 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8004bac:	61f8      	str	r0, [r7, #28]
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <UART_SetConfig+0x56c>)
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe fba1 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61fb      	str	r3, [r7, #28]
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bd0:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d019      	beq.n	8004c0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085a      	lsrs	r2, r3, #1
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	441a      	add	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	d909      	bls.n	8004c06 <UART_SetConfig+0x546>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	d205      	bcs.n	8004c06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	e002      	b.n	8004c0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3728      	adds	r7, #40	; 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c26:	bf00      	nop
 8004c28:	40008000 	.word	0x40008000
 8004c2c:	00f42400 	.word	0x00f42400

08004c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01a      	beq.n	8004d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2e:	d10a      	bne.n	8004d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	605a      	str	r2, [r3, #4]
  }
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d84:	f7fc fab6 	bl	80012f4 <HAL_GetTick>
 8004d88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d10e      	bne.n	8004db6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f82d 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e023      	b.n	8004dfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d10e      	bne.n	8004de2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f817 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e00d      	b.n	8004dfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b09c      	sub	sp, #112	; 0x70
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4613      	mov	r3, r2
 8004e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e16:	e0a5      	b.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e1e:	f000 80a1 	beq.w	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e22:	f7fc fa67 	bl	80012f4 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d13e      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e6      	bne.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3308      	adds	r3, #8
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	663b      	str	r3, [r7, #96]	; 0x60
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e5      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e067      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d04f      	beq.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed2:	d147      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004edc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
 8004efe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e6      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3308      	adds	r3, #8
 8004f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f30:	623a      	str	r2, [r7, #32]
 8004f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	69f9      	ldr	r1, [r7, #28]
 8004f36:	6a3a      	ldr	r2, [r7, #32]
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e010      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	f43f af4a 	beq.w	8004e18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3770      	adds	r7, #112	; 0x70
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b095      	sub	sp, #84	; 0x54
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004fb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e6      	bne.n	8004f96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e5      	bne.n	8004fc8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005000:	2b01      	cmp	r3, #1
 8005002:	d118      	bne.n	8005036 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	60bb      	str	r3, [r7, #8]
   return(result);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f023 0310 	bic.w	r3, r3, #16
 8005018:	647b      	str	r3, [r7, #68]	; 0x44
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6979      	ldr	r1, [r7, #20]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	613b      	str	r3, [r7, #16]
   return(result);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e6      	bne.n	8005004 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005048:	bf00      	nop
 800504a:	3754      	adds	r7, #84	; 0x54
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff fb0e 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	60bb      	str	r3, [r7, #8]
   return(result);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6979      	ldr	r1, [r7, #20]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	613b      	str	r3, [r7, #16]
   return(result);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e6      	bne.n	8005088 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff fada 	bl	8004680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050cc:	bf00      	nop
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e8:	b084      	sub	sp, #16
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	f107 001c 	add.w	r0, r7, #28
 80050f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa70 	bl	80055ec <USB_CoreReset>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	639a      	str	r2, [r3, #56]	; 0x38
 8005122:	e005      	b.n	8005130 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800513c:	b004      	add	sp, #16
 800513e:	4770      	bx	lr

08005140 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f023 0201 	bic.w	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d115      	bne.n	80051b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005190:	2001      	movs	r0, #1
 8005192:	f7fc f8bb 	bl	800130c <HAL_Delay>
      ms++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fa17 	bl	80055d0 <USB_GetMode>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d01e      	beq.n	80051e6 <USB_SetCurrentMode+0x84>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b31      	cmp	r3, #49	; 0x31
 80051ac:	d9f0      	bls.n	8005190 <USB_SetCurrentMode+0x2e>
 80051ae:	e01a      	b.n	80051e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d115      	bne.n	80051e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051c2:	2001      	movs	r0, #1
 80051c4:	f7fc f8a2 	bl	800130c <HAL_Delay>
      ms++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3301      	adds	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f9fe 	bl	80055d0 <USB_GetMode>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <USB_SetCurrentMode+0x84>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b31      	cmp	r3, #49	; 0x31
 80051de:	d9f0      	bls.n	80051c2 <USB_SetCurrentMode+0x60>
 80051e0:	e001      	b.n	80051e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e005      	b.n	80051f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b32      	cmp	r3, #50	; 0x32
 80051ea:	d101      	bne.n	80051f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051fc:	b084      	sub	sp, #16
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800520a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	e009      	b.n	8005230 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	3340      	adds	r3, #64	; 0x40
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3301      	adds	r3, #1
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b0e      	cmp	r3, #14
 8005234:	d9f2      	bls.n	800521c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d11c      	bne.n	8005276 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524a:	f043 0302 	orr.w	r3, r3, #2
 800524e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e005      	b.n	8005282 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005288:	461a      	mov	r2, r3
 800528a:	2300      	movs	r3, #0
 800528c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005294:	4619      	mov	r1, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	461a      	mov	r2, r3
 800529e:	680b      	ldr	r3, [r1, #0]
 80052a0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052a2:	2103      	movs	r1, #3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f959 	bl	800555c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052aa:	2110      	movs	r1, #16
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f8f1 	bl	8005494 <USB_FlushTxFifo>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f91d 	bl	80054fc <USB_FlushRxFifo>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d2:	461a      	mov	r2, r3
 80052d4:	2300      	movs	r3, #0
 80052d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	461a      	mov	r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	461a      	mov	r2, r3
 80052ec:	2300      	movs	r3, #0
 80052ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	e043      	b.n	800537e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800530c:	d118      	bne.n	8005340 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	461a      	mov	r2, r3
 8005322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e013      	b.n	8005352 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	461a      	mov	r2, r3
 8005338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e008      	b.n	8005352 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	461a      	mov	r2, r3
 800534e:	2300      	movs	r3, #0
 8005350:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	461a      	mov	r2, r3
 8005360:	2300      	movs	r3, #0
 8005362:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	461a      	mov	r2, r3
 8005372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005376:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3301      	adds	r3, #1
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	429a      	cmp	r2, r3
 8005384:	d3b7      	bcc.n	80052f6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	e043      	b.n	8005414 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a2:	d118      	bne.n	80053d6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b6:	461a      	mov	r2, r3
 80053b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e013      	b.n	80053e8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	461a      	mov	r2, r3
 80053ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e008      	b.n	80053e8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	461a      	mov	r2, r3
 8005408:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800540c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	3301      	adds	r3, #1
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	d3b7      	bcc.n	800538c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800542e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800543c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f043 0210 	orr.w	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	4b10      	ldr	r3, [pc, #64]	; (8005490 <USB_DevInit+0x294>)
 8005450:	4313      	orrs	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f043 0208 	orr.w	r2, r3, #8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005476:	f043 0304 	orr.w	r3, r3, #4
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800548a:	b004      	add	sp, #16
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	803c3800 	.word	0x803c3800

08005494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <USB_FlushTxFifo+0x64>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e01b      	b.n	80054ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	daf2      	bge.n	80054a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	019b      	lsls	r3, r3, #6
 80054c4:	f043 0220 	orr.w	r2, r3, #32
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <USB_FlushTxFifo+0x64>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e006      	b.n	80054ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d0f0      	beq.n	80054cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	00030d40 	.word	0x00030d40

080054fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3301      	adds	r3, #1
 800550c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4a11      	ldr	r2, [pc, #68]	; (8005558 <USB_FlushRxFifo+0x5c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e018      	b.n	800554c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	daf2      	bge.n	8005508 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2210      	movs	r2, #16
 800552a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4a08      	ldr	r2, [pc, #32]	; (8005558 <USB_FlushRxFifo+0x5c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e006      	b.n	800554c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b10      	cmp	r3, #16
 8005548:	d0f0      	beq.n	800552c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	00030d40 	.word	0x00030d40

0800555c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800557c:	4313      	orrs	r3, r2
 800557e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055a8:	f023 0303 	bic.w	r3, r3, #3
 80055ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f003 0301 	and.w	r3, r3, #1
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a13      	ldr	r2, [pc, #76]	; (8005650 <USB_CoreReset+0x64>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e01b      	b.n	8005642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	daf2      	bge.n	80055f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3301      	adds	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a09      	ldr	r2, [pc, #36]	; (8005650 <USB_CoreReset+0x64>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e006      	b.n	8005642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b01      	cmp	r3, #1
 800563e:	d0f0      	beq.n	8005622 <USB_CoreReset+0x36>

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	00030d40 	.word	0x00030d40

08005654 <__errno>:
 8005654:	4b01      	ldr	r3, [pc, #4]	; (800565c <__errno+0x8>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	2000000c 	.word	0x2000000c

08005660 <__libc_init_array>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4d0d      	ldr	r5, [pc, #52]	; (8005698 <__libc_init_array+0x38>)
 8005664:	4c0d      	ldr	r4, [pc, #52]	; (800569c <__libc_init_array+0x3c>)
 8005666:	1b64      	subs	r4, r4, r5
 8005668:	10a4      	asrs	r4, r4, #2
 800566a:	2600      	movs	r6, #0
 800566c:	42a6      	cmp	r6, r4
 800566e:	d109      	bne.n	8005684 <__libc_init_array+0x24>
 8005670:	4d0b      	ldr	r5, [pc, #44]	; (80056a0 <__libc_init_array+0x40>)
 8005672:	4c0c      	ldr	r4, [pc, #48]	; (80056a4 <__libc_init_array+0x44>)
 8005674:	f001 fa1a 	bl	8006aac <_init>
 8005678:	1b64      	subs	r4, r4, r5
 800567a:	10a4      	asrs	r4, r4, #2
 800567c:	2600      	movs	r6, #0
 800567e:	42a6      	cmp	r6, r4
 8005680:	d105      	bne.n	800568e <__libc_init_array+0x2e>
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	f855 3b04 	ldr.w	r3, [r5], #4
 8005688:	4798      	blx	r3
 800568a:	3601      	adds	r6, #1
 800568c:	e7ee      	b.n	800566c <__libc_init_array+0xc>
 800568e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005692:	4798      	blx	r3
 8005694:	3601      	adds	r6, #1
 8005696:	e7f2      	b.n	800567e <__libc_init_array+0x1e>
 8005698:	08006e00 	.word	0x08006e00
 800569c:	08006e00 	.word	0x08006e00
 80056a0:	08006e00 	.word	0x08006e00
 80056a4:	08006e04 	.word	0x08006e04

080056a8 <memcpy>:
 80056a8:	440a      	add	r2, r1
 80056aa:	4291      	cmp	r1, r2
 80056ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80056b0:	d100      	bne.n	80056b4 <memcpy+0xc>
 80056b2:	4770      	bx	lr
 80056b4:	b510      	push	{r4, lr}
 80056b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056be:	4291      	cmp	r1, r2
 80056c0:	d1f9      	bne.n	80056b6 <memcpy+0xe>
 80056c2:	bd10      	pop	{r4, pc}

080056c4 <memset>:
 80056c4:	4402      	add	r2, r0
 80056c6:	4603      	mov	r3, r0
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d100      	bne.n	80056ce <memset+0xa>
 80056cc:	4770      	bx	lr
 80056ce:	f803 1b01 	strb.w	r1, [r3], #1
 80056d2:	e7f9      	b.n	80056c8 <memset+0x4>

080056d4 <iprintf>:
 80056d4:	b40f      	push	{r0, r1, r2, r3}
 80056d6:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <iprintf+0x2c>)
 80056d8:	b513      	push	{r0, r1, r4, lr}
 80056da:	681c      	ldr	r4, [r3, #0]
 80056dc:	b124      	cbz	r4, 80056e8 <iprintf+0x14>
 80056de:	69a3      	ldr	r3, [r4, #24]
 80056e0:	b913      	cbnz	r3, 80056e8 <iprintf+0x14>
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 fa98 	bl	8005c18 <__sinit>
 80056e8:	ab05      	add	r3, sp, #20
 80056ea:	9a04      	ldr	r2, [sp, #16]
 80056ec:	68a1      	ldr	r1, [r4, #8]
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 fdfd 	bl	80062f0 <_vfiprintf_r>
 80056f6:	b002      	add	sp, #8
 80056f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056fc:	b004      	add	sp, #16
 80056fe:	4770      	bx	lr
 8005700:	2000000c 	.word	0x2000000c

08005704 <_puts_r>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	460e      	mov	r6, r1
 8005708:	4605      	mov	r5, r0
 800570a:	b118      	cbz	r0, 8005714 <_puts_r+0x10>
 800570c:	6983      	ldr	r3, [r0, #24]
 800570e:	b90b      	cbnz	r3, 8005714 <_puts_r+0x10>
 8005710:	f000 fa82 	bl	8005c18 <__sinit>
 8005714:	69ab      	ldr	r3, [r5, #24]
 8005716:	68ac      	ldr	r4, [r5, #8]
 8005718:	b913      	cbnz	r3, 8005720 <_puts_r+0x1c>
 800571a:	4628      	mov	r0, r5
 800571c:	f000 fa7c 	bl	8005c18 <__sinit>
 8005720:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <_puts_r+0xd0>)
 8005722:	429c      	cmp	r4, r3
 8005724:	d120      	bne.n	8005768 <_puts_r+0x64>
 8005726:	686c      	ldr	r4, [r5, #4]
 8005728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800572a:	07db      	lsls	r3, r3, #31
 800572c:	d405      	bmi.n	800573a <_puts_r+0x36>
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	0598      	lsls	r0, r3, #22
 8005732:	d402      	bmi.n	800573a <_puts_r+0x36>
 8005734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005736:	f000 fb0d 	bl	8005d54 <__retarget_lock_acquire_recursive>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	0719      	lsls	r1, r3, #28
 800573e:	d51d      	bpl.n	800577c <_puts_r+0x78>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	b1db      	cbz	r3, 800577c <_puts_r+0x78>
 8005744:	3e01      	subs	r6, #1
 8005746:	68a3      	ldr	r3, [r4, #8]
 8005748:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800574c:	3b01      	subs	r3, #1
 800574e:	60a3      	str	r3, [r4, #8]
 8005750:	bb39      	cbnz	r1, 80057a2 <_puts_r+0x9e>
 8005752:	2b00      	cmp	r3, #0
 8005754:	da38      	bge.n	80057c8 <_puts_r+0xc4>
 8005756:	4622      	mov	r2, r4
 8005758:	210a      	movs	r1, #10
 800575a:	4628      	mov	r0, r5
 800575c:	f000 f882 	bl	8005864 <__swbuf_r>
 8005760:	3001      	adds	r0, #1
 8005762:	d011      	beq.n	8005788 <_puts_r+0x84>
 8005764:	250a      	movs	r5, #10
 8005766:	e011      	b.n	800578c <_puts_r+0x88>
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <_puts_r+0xd4>)
 800576a:	429c      	cmp	r4, r3
 800576c:	d101      	bne.n	8005772 <_puts_r+0x6e>
 800576e:	68ac      	ldr	r4, [r5, #8]
 8005770:	e7da      	b.n	8005728 <_puts_r+0x24>
 8005772:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <_puts_r+0xd8>)
 8005774:	429c      	cmp	r4, r3
 8005776:	bf08      	it	eq
 8005778:	68ec      	ldreq	r4, [r5, #12]
 800577a:	e7d5      	b.n	8005728 <_puts_r+0x24>
 800577c:	4621      	mov	r1, r4
 800577e:	4628      	mov	r0, r5
 8005780:	f000 f8c2 	bl	8005908 <__swsetup_r>
 8005784:	2800      	cmp	r0, #0
 8005786:	d0dd      	beq.n	8005744 <_puts_r+0x40>
 8005788:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800578c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800578e:	07da      	lsls	r2, r3, #31
 8005790:	d405      	bmi.n	800579e <_puts_r+0x9a>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	059b      	lsls	r3, r3, #22
 8005796:	d402      	bmi.n	800579e <_puts_r+0x9a>
 8005798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800579a:	f000 fadc 	bl	8005d56 <__retarget_lock_release_recursive>
 800579e:	4628      	mov	r0, r5
 80057a0:	bd70      	pop	{r4, r5, r6, pc}
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da04      	bge.n	80057b0 <_puts_r+0xac>
 80057a6:	69a2      	ldr	r2, [r4, #24]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	dc06      	bgt.n	80057ba <_puts_r+0xb6>
 80057ac:	290a      	cmp	r1, #10
 80057ae:	d004      	beq.n	80057ba <_puts_r+0xb6>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	6022      	str	r2, [r4, #0]
 80057b6:	7019      	strb	r1, [r3, #0]
 80057b8:	e7c5      	b.n	8005746 <_puts_r+0x42>
 80057ba:	4622      	mov	r2, r4
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 f851 	bl	8005864 <__swbuf_r>
 80057c2:	3001      	adds	r0, #1
 80057c4:	d1bf      	bne.n	8005746 <_puts_r+0x42>
 80057c6:	e7df      	b.n	8005788 <_puts_r+0x84>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	250a      	movs	r5, #10
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	6022      	str	r2, [r4, #0]
 80057d0:	701d      	strb	r5, [r3, #0]
 80057d2:	e7db      	b.n	800578c <_puts_r+0x88>
 80057d4:	08006d84 	.word	0x08006d84
 80057d8:	08006da4 	.word	0x08006da4
 80057dc:	08006d64 	.word	0x08006d64

080057e0 <puts>:
 80057e0:	4b02      	ldr	r3, [pc, #8]	; (80057ec <puts+0xc>)
 80057e2:	4601      	mov	r1, r0
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	f7ff bf8d 	b.w	8005704 <_puts_r>
 80057ea:	bf00      	nop
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <_vsniprintf_r>:
 80057f0:	b530      	push	{r4, r5, lr}
 80057f2:	4614      	mov	r4, r2
 80057f4:	2c00      	cmp	r4, #0
 80057f6:	b09b      	sub	sp, #108	; 0x6c
 80057f8:	4605      	mov	r5, r0
 80057fa:	461a      	mov	r2, r3
 80057fc:	da05      	bge.n	800580a <_vsniprintf_r+0x1a>
 80057fe:	238b      	movs	r3, #139	; 0x8b
 8005800:	6003      	str	r3, [r0, #0]
 8005802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005806:	b01b      	add	sp, #108	; 0x6c
 8005808:	bd30      	pop	{r4, r5, pc}
 800580a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800580e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005812:	bf14      	ite	ne
 8005814:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005818:	4623      	moveq	r3, r4
 800581a:	9302      	str	r3, [sp, #8]
 800581c:	9305      	str	r3, [sp, #20]
 800581e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005822:	9100      	str	r1, [sp, #0]
 8005824:	9104      	str	r1, [sp, #16]
 8005826:	f8ad 300e 	strh.w	r3, [sp, #14]
 800582a:	4669      	mov	r1, sp
 800582c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800582e:	f000 fc35 	bl	800609c <_svfiprintf_r>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	bfbc      	itt	lt
 8005836:	238b      	movlt	r3, #139	; 0x8b
 8005838:	602b      	strlt	r3, [r5, #0]
 800583a:	2c00      	cmp	r4, #0
 800583c:	d0e3      	beq.n	8005806 <_vsniprintf_r+0x16>
 800583e:	9b00      	ldr	r3, [sp, #0]
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	e7df      	b.n	8005806 <_vsniprintf_r+0x16>
	...

08005848 <vsniprintf>:
 8005848:	b507      	push	{r0, r1, r2, lr}
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	460a      	mov	r2, r1
 8005850:	4601      	mov	r1, r0
 8005852:	4803      	ldr	r0, [pc, #12]	; (8005860 <vsniprintf+0x18>)
 8005854:	6800      	ldr	r0, [r0, #0]
 8005856:	f7ff ffcb 	bl	80057f0 <_vsniprintf_r>
 800585a:	b003      	add	sp, #12
 800585c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005860:	2000000c 	.word	0x2000000c

08005864 <__swbuf_r>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	460e      	mov	r6, r1
 8005868:	4614      	mov	r4, r2
 800586a:	4605      	mov	r5, r0
 800586c:	b118      	cbz	r0, 8005876 <__swbuf_r+0x12>
 800586e:	6983      	ldr	r3, [r0, #24]
 8005870:	b90b      	cbnz	r3, 8005876 <__swbuf_r+0x12>
 8005872:	f000 f9d1 	bl	8005c18 <__sinit>
 8005876:	4b21      	ldr	r3, [pc, #132]	; (80058fc <__swbuf_r+0x98>)
 8005878:	429c      	cmp	r4, r3
 800587a:	d12b      	bne.n	80058d4 <__swbuf_r+0x70>
 800587c:	686c      	ldr	r4, [r5, #4]
 800587e:	69a3      	ldr	r3, [r4, #24]
 8005880:	60a3      	str	r3, [r4, #8]
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	071a      	lsls	r2, r3, #28
 8005886:	d52f      	bpl.n	80058e8 <__swbuf_r+0x84>
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	b36b      	cbz	r3, 80058e8 <__swbuf_r+0x84>
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	1ac0      	subs	r0, r0, r3
 8005892:	6963      	ldr	r3, [r4, #20]
 8005894:	b2f6      	uxtb	r6, r6
 8005896:	4283      	cmp	r3, r0
 8005898:	4637      	mov	r7, r6
 800589a:	dc04      	bgt.n	80058a6 <__swbuf_r+0x42>
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f926 	bl	8005af0 <_fflush_r>
 80058a4:	bb30      	cbnz	r0, 80058f4 <__swbuf_r+0x90>
 80058a6:	68a3      	ldr	r3, [r4, #8]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	60a3      	str	r3, [r4, #8]
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	6022      	str	r2, [r4, #0]
 80058b2:	701e      	strb	r6, [r3, #0]
 80058b4:	6963      	ldr	r3, [r4, #20]
 80058b6:	3001      	adds	r0, #1
 80058b8:	4283      	cmp	r3, r0
 80058ba:	d004      	beq.n	80058c6 <__swbuf_r+0x62>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	07db      	lsls	r3, r3, #31
 80058c0:	d506      	bpl.n	80058d0 <__swbuf_r+0x6c>
 80058c2:	2e0a      	cmp	r6, #10
 80058c4:	d104      	bne.n	80058d0 <__swbuf_r+0x6c>
 80058c6:	4621      	mov	r1, r4
 80058c8:	4628      	mov	r0, r5
 80058ca:	f000 f911 	bl	8005af0 <_fflush_r>
 80058ce:	b988      	cbnz	r0, 80058f4 <__swbuf_r+0x90>
 80058d0:	4638      	mov	r0, r7
 80058d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <__swbuf_r+0x9c>)
 80058d6:	429c      	cmp	r4, r3
 80058d8:	d101      	bne.n	80058de <__swbuf_r+0x7a>
 80058da:	68ac      	ldr	r4, [r5, #8]
 80058dc:	e7cf      	b.n	800587e <__swbuf_r+0x1a>
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <__swbuf_r+0xa0>)
 80058e0:	429c      	cmp	r4, r3
 80058e2:	bf08      	it	eq
 80058e4:	68ec      	ldreq	r4, [r5, #12]
 80058e6:	e7ca      	b.n	800587e <__swbuf_r+0x1a>
 80058e8:	4621      	mov	r1, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f80c 	bl	8005908 <__swsetup_r>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0cb      	beq.n	800588c <__swbuf_r+0x28>
 80058f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80058f8:	e7ea      	b.n	80058d0 <__swbuf_r+0x6c>
 80058fa:	bf00      	nop
 80058fc:	08006d84 	.word	0x08006d84
 8005900:	08006da4 	.word	0x08006da4
 8005904:	08006d64 	.word	0x08006d64

08005908 <__swsetup_r>:
 8005908:	4b32      	ldr	r3, [pc, #200]	; (80059d4 <__swsetup_r+0xcc>)
 800590a:	b570      	push	{r4, r5, r6, lr}
 800590c:	681d      	ldr	r5, [r3, #0]
 800590e:	4606      	mov	r6, r0
 8005910:	460c      	mov	r4, r1
 8005912:	b125      	cbz	r5, 800591e <__swsetup_r+0x16>
 8005914:	69ab      	ldr	r3, [r5, #24]
 8005916:	b913      	cbnz	r3, 800591e <__swsetup_r+0x16>
 8005918:	4628      	mov	r0, r5
 800591a:	f000 f97d 	bl	8005c18 <__sinit>
 800591e:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <__swsetup_r+0xd0>)
 8005920:	429c      	cmp	r4, r3
 8005922:	d10f      	bne.n	8005944 <__swsetup_r+0x3c>
 8005924:	686c      	ldr	r4, [r5, #4]
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800592c:	0719      	lsls	r1, r3, #28
 800592e:	d42c      	bmi.n	800598a <__swsetup_r+0x82>
 8005930:	06dd      	lsls	r5, r3, #27
 8005932:	d411      	bmi.n	8005958 <__swsetup_r+0x50>
 8005934:	2309      	movs	r3, #9
 8005936:	6033      	str	r3, [r6, #0]
 8005938:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005942:	e03e      	b.n	80059c2 <__swsetup_r+0xba>
 8005944:	4b25      	ldr	r3, [pc, #148]	; (80059dc <__swsetup_r+0xd4>)
 8005946:	429c      	cmp	r4, r3
 8005948:	d101      	bne.n	800594e <__swsetup_r+0x46>
 800594a:	68ac      	ldr	r4, [r5, #8]
 800594c:	e7eb      	b.n	8005926 <__swsetup_r+0x1e>
 800594e:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <__swsetup_r+0xd8>)
 8005950:	429c      	cmp	r4, r3
 8005952:	bf08      	it	eq
 8005954:	68ec      	ldreq	r4, [r5, #12]
 8005956:	e7e6      	b.n	8005926 <__swsetup_r+0x1e>
 8005958:	0758      	lsls	r0, r3, #29
 800595a:	d512      	bpl.n	8005982 <__swsetup_r+0x7a>
 800595c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800595e:	b141      	cbz	r1, 8005972 <__swsetup_r+0x6a>
 8005960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005964:	4299      	cmp	r1, r3
 8005966:	d002      	beq.n	800596e <__swsetup_r+0x66>
 8005968:	4630      	mov	r0, r6
 800596a:	f000 fa5b 	bl	8005e24 <_free_r>
 800596e:	2300      	movs	r3, #0
 8005970:	6363      	str	r3, [r4, #52]	; 0x34
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	2300      	movs	r3, #0
 800597c:	6063      	str	r3, [r4, #4]
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	f043 0308 	orr.w	r3, r3, #8
 8005988:	81a3      	strh	r3, [r4, #12]
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	b94b      	cbnz	r3, 80059a2 <__swsetup_r+0x9a>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d003      	beq.n	80059a2 <__swsetup_r+0x9a>
 800599a:	4621      	mov	r1, r4
 800599c:	4630      	mov	r0, r6
 800599e:	f000 fa01 	bl	8005da4 <__smakebuf_r>
 80059a2:	89a0      	ldrh	r0, [r4, #12]
 80059a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059a8:	f010 0301 	ands.w	r3, r0, #1
 80059ac:	d00a      	beq.n	80059c4 <__swsetup_r+0xbc>
 80059ae:	2300      	movs	r3, #0
 80059b0:	60a3      	str	r3, [r4, #8]
 80059b2:	6963      	ldr	r3, [r4, #20]
 80059b4:	425b      	negs	r3, r3
 80059b6:	61a3      	str	r3, [r4, #24]
 80059b8:	6923      	ldr	r3, [r4, #16]
 80059ba:	b943      	cbnz	r3, 80059ce <__swsetup_r+0xc6>
 80059bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059c0:	d1ba      	bne.n	8005938 <__swsetup_r+0x30>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	0781      	lsls	r1, r0, #30
 80059c6:	bf58      	it	pl
 80059c8:	6963      	ldrpl	r3, [r4, #20]
 80059ca:	60a3      	str	r3, [r4, #8]
 80059cc:	e7f4      	b.n	80059b8 <__swsetup_r+0xb0>
 80059ce:	2000      	movs	r0, #0
 80059d0:	e7f7      	b.n	80059c2 <__swsetup_r+0xba>
 80059d2:	bf00      	nop
 80059d4:	2000000c 	.word	0x2000000c
 80059d8:	08006d84 	.word	0x08006d84
 80059dc:	08006da4 	.word	0x08006da4
 80059e0:	08006d64 	.word	0x08006d64

080059e4 <__sflush_r>:
 80059e4:	898a      	ldrh	r2, [r1, #12]
 80059e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ea:	4605      	mov	r5, r0
 80059ec:	0710      	lsls	r0, r2, #28
 80059ee:	460c      	mov	r4, r1
 80059f0:	d458      	bmi.n	8005aa4 <__sflush_r+0xc0>
 80059f2:	684b      	ldr	r3, [r1, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dc05      	bgt.n	8005a04 <__sflush_r+0x20>
 80059f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	dc02      	bgt.n	8005a04 <__sflush_r+0x20>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	d0f9      	beq.n	80059fe <__sflush_r+0x1a>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a10:	682f      	ldr	r7, [r5, #0]
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	d032      	beq.n	8005a7c <__sflush_r+0x98>
 8005a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	075a      	lsls	r2, r3, #29
 8005a1c:	d505      	bpl.n	8005a2a <__sflush_r+0x46>
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	1ac0      	subs	r0, r0, r3
 8005a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a24:	b10b      	cbz	r3, 8005a2a <__sflush_r+0x46>
 8005a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a28:	1ac0      	subs	r0, r0, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a30:	6a21      	ldr	r1, [r4, #32]
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b0      	blx	r6
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	d106      	bne.n	8005a4a <__sflush_r+0x66>
 8005a3c:	6829      	ldr	r1, [r5, #0]
 8005a3e:	291d      	cmp	r1, #29
 8005a40:	d82c      	bhi.n	8005a9c <__sflush_r+0xb8>
 8005a42:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <__sflush_r+0x108>)
 8005a44:	40ca      	lsrs	r2, r1
 8005a46:	07d6      	lsls	r6, r2, #31
 8005a48:	d528      	bpl.n	8005a9c <__sflush_r+0xb8>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	6062      	str	r2, [r4, #4]
 8005a4e:	04d9      	lsls	r1, r3, #19
 8005a50:	6922      	ldr	r2, [r4, #16]
 8005a52:	6022      	str	r2, [r4, #0]
 8005a54:	d504      	bpl.n	8005a60 <__sflush_r+0x7c>
 8005a56:	1c42      	adds	r2, r0, #1
 8005a58:	d101      	bne.n	8005a5e <__sflush_r+0x7a>
 8005a5a:	682b      	ldr	r3, [r5, #0]
 8005a5c:	b903      	cbnz	r3, 8005a60 <__sflush_r+0x7c>
 8005a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a62:	602f      	str	r7, [r5, #0]
 8005a64:	2900      	cmp	r1, #0
 8005a66:	d0ca      	beq.n	80059fe <__sflush_r+0x1a>
 8005a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <__sflush_r+0x92>
 8005a70:	4628      	mov	r0, r5
 8005a72:	f000 f9d7 	bl	8005e24 <_free_r>
 8005a76:	2000      	movs	r0, #0
 8005a78:	6360      	str	r0, [r4, #52]	; 0x34
 8005a7a:	e7c1      	b.n	8005a00 <__sflush_r+0x1c>
 8005a7c:	6a21      	ldr	r1, [r4, #32]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b0      	blx	r6
 8005a84:	1c41      	adds	r1, r0, #1
 8005a86:	d1c7      	bne.n	8005a18 <__sflush_r+0x34>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0c4      	beq.n	8005a18 <__sflush_r+0x34>
 8005a8e:	2b1d      	cmp	r3, #29
 8005a90:	d001      	beq.n	8005a96 <__sflush_r+0xb2>
 8005a92:	2b16      	cmp	r3, #22
 8005a94:	d101      	bne.n	8005a9a <__sflush_r+0xb6>
 8005a96:	602f      	str	r7, [r5, #0]
 8005a98:	e7b1      	b.n	80059fe <__sflush_r+0x1a>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	e7ad      	b.n	8005a00 <__sflush_r+0x1c>
 8005aa4:	690f      	ldr	r7, [r1, #16]
 8005aa6:	2f00      	cmp	r7, #0
 8005aa8:	d0a9      	beq.n	80059fe <__sflush_r+0x1a>
 8005aaa:	0793      	lsls	r3, r2, #30
 8005aac:	680e      	ldr	r6, [r1, #0]
 8005aae:	bf08      	it	eq
 8005ab0:	694b      	ldreq	r3, [r1, #20]
 8005ab2:	600f      	str	r7, [r1, #0]
 8005ab4:	bf18      	it	ne
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	eba6 0807 	sub.w	r8, r6, r7
 8005abc:	608b      	str	r3, [r1, #8]
 8005abe:	f1b8 0f00 	cmp.w	r8, #0
 8005ac2:	dd9c      	ble.n	80059fe <__sflush_r+0x1a>
 8005ac4:	6a21      	ldr	r1, [r4, #32]
 8005ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ac8:	4643      	mov	r3, r8
 8005aca:	463a      	mov	r2, r7
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b0      	blx	r6
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	dc06      	bgt.n	8005ae2 <__sflush_r+0xfe>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ae0:	e78e      	b.n	8005a00 <__sflush_r+0x1c>
 8005ae2:	4407      	add	r7, r0
 8005ae4:	eba8 0800 	sub.w	r8, r8, r0
 8005ae8:	e7e9      	b.n	8005abe <__sflush_r+0xda>
 8005aea:	bf00      	nop
 8005aec:	20400001 	.word	0x20400001

08005af0 <_fflush_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	690b      	ldr	r3, [r1, #16]
 8005af4:	4605      	mov	r5, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	b913      	cbnz	r3, 8005b00 <_fflush_r+0x10>
 8005afa:	2500      	movs	r5, #0
 8005afc:	4628      	mov	r0, r5
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	b118      	cbz	r0, 8005b0a <_fflush_r+0x1a>
 8005b02:	6983      	ldr	r3, [r0, #24]
 8005b04:	b90b      	cbnz	r3, 8005b0a <_fflush_r+0x1a>
 8005b06:	f000 f887 	bl	8005c18 <__sinit>
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <_fflush_r+0x6c>)
 8005b0c:	429c      	cmp	r4, r3
 8005b0e:	d11b      	bne.n	8005b48 <_fflush_r+0x58>
 8005b10:	686c      	ldr	r4, [r5, #4]
 8005b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0ef      	beq.n	8005afa <_fflush_r+0xa>
 8005b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b1c:	07d0      	lsls	r0, r2, #31
 8005b1e:	d404      	bmi.n	8005b2a <_fflush_r+0x3a>
 8005b20:	0599      	lsls	r1, r3, #22
 8005b22:	d402      	bmi.n	8005b2a <_fflush_r+0x3a>
 8005b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b26:	f000 f915 	bl	8005d54 <__retarget_lock_acquire_recursive>
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f7ff ff59 	bl	80059e4 <__sflush_r>
 8005b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b34:	07da      	lsls	r2, r3, #31
 8005b36:	4605      	mov	r5, r0
 8005b38:	d4e0      	bmi.n	8005afc <_fflush_r+0xc>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	059b      	lsls	r3, r3, #22
 8005b3e:	d4dd      	bmi.n	8005afc <_fflush_r+0xc>
 8005b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b42:	f000 f908 	bl	8005d56 <__retarget_lock_release_recursive>
 8005b46:	e7d9      	b.n	8005afc <_fflush_r+0xc>
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <_fflush_r+0x70>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	d101      	bne.n	8005b52 <_fflush_r+0x62>
 8005b4e:	68ac      	ldr	r4, [r5, #8]
 8005b50:	e7df      	b.n	8005b12 <_fflush_r+0x22>
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <_fflush_r+0x74>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	bf08      	it	eq
 8005b58:	68ec      	ldreq	r4, [r5, #12]
 8005b5a:	e7da      	b.n	8005b12 <_fflush_r+0x22>
 8005b5c:	08006d84 	.word	0x08006d84
 8005b60:	08006da4 	.word	0x08006da4
 8005b64:	08006d64 	.word	0x08006d64

08005b68 <std>:
 8005b68:	2300      	movs	r3, #0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b76:	6083      	str	r3, [r0, #8]
 8005b78:	8181      	strh	r1, [r0, #12]
 8005b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b7c:	81c2      	strh	r2, [r0, #14]
 8005b7e:	6183      	str	r3, [r0, #24]
 8005b80:	4619      	mov	r1, r3
 8005b82:	2208      	movs	r2, #8
 8005b84:	305c      	adds	r0, #92	; 0x5c
 8005b86:	f7ff fd9d 	bl	80056c4 <memset>
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x38>)
 8005b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x3c>)
 8005b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <std+0x40>)
 8005b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <std+0x44>)
 8005b98:	6224      	str	r4, [r4, #32]
 8005b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08006899 	.word	0x08006899
 8005ba4:	080068bb 	.word	0x080068bb
 8005ba8:	080068f3 	.word	0x080068f3
 8005bac:	08006917 	.word	0x08006917

08005bb0 <_cleanup_r>:
 8005bb0:	4901      	ldr	r1, [pc, #4]	; (8005bb8 <_cleanup_r+0x8>)
 8005bb2:	f000 b8af 	b.w	8005d14 <_fwalk_reent>
 8005bb6:	bf00      	nop
 8005bb8:	08005af1 	.word	0x08005af1

08005bbc <__sfmoreglue>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	2268      	movs	r2, #104	; 0x68
 8005bc0:	1e4d      	subs	r5, r1, #1
 8005bc2:	4355      	muls	r5, r2
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bca:	f000 f997 	bl	8005efc <_malloc_r>
 8005bce:	4604      	mov	r4, r0
 8005bd0:	b140      	cbz	r0, 8005be4 <__sfmoreglue+0x28>
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005bd8:	300c      	adds	r0, #12
 8005bda:	60a0      	str	r0, [r4, #8]
 8005bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005be0:	f7ff fd70 	bl	80056c4 <memset>
 8005be4:	4620      	mov	r0, r4
 8005be6:	bd70      	pop	{r4, r5, r6, pc}

08005be8 <__sfp_lock_acquire>:
 8005be8:	4801      	ldr	r0, [pc, #4]	; (8005bf0 <__sfp_lock_acquire+0x8>)
 8005bea:	f000 b8b3 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005bee:	bf00      	nop
 8005bf0:	20000745 	.word	0x20000745

08005bf4 <__sfp_lock_release>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__sfp_lock_release+0x8>)
 8005bf6:	f000 b8ae 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	20000745 	.word	0x20000745

08005c00 <__sinit_lock_acquire>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__sinit_lock_acquire+0x8>)
 8005c02:	f000 b8a7 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005c06:	bf00      	nop
 8005c08:	20000746 	.word	0x20000746

08005c0c <__sinit_lock_release>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	; (8005c14 <__sinit_lock_release+0x8>)
 8005c0e:	f000 b8a2 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005c12:	bf00      	nop
 8005c14:	20000746 	.word	0x20000746

08005c18 <__sinit>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	f7ff fff0 	bl	8005c00 <__sinit_lock_acquire>
 8005c20:	69a3      	ldr	r3, [r4, #24]
 8005c22:	b11b      	cbz	r3, 8005c2c <__sinit+0x14>
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	f7ff bff0 	b.w	8005c0c <__sinit_lock_release>
 8005c2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c30:	6523      	str	r3, [r4, #80]	; 0x50
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <__sinit+0x68>)
 8005c34:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <__sinit+0x6c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	bf04      	itt	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	61a3      	streq	r3, [r4, #24]
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f820 	bl	8005c88 <__sfp>
 8005c48:	6060      	str	r0, [r4, #4]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 f81c 	bl	8005c88 <__sfp>
 8005c50:	60a0      	str	r0, [r4, #8]
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 f818 	bl	8005c88 <__sfp>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	60e0      	str	r0, [r4, #12]
 8005c5c:	2104      	movs	r1, #4
 8005c5e:	6860      	ldr	r0, [r4, #4]
 8005c60:	f7ff ff82 	bl	8005b68 <std>
 8005c64:	68a0      	ldr	r0, [r4, #8]
 8005c66:	2201      	movs	r2, #1
 8005c68:	2109      	movs	r1, #9
 8005c6a:	f7ff ff7d 	bl	8005b68 <std>
 8005c6e:	68e0      	ldr	r0, [r4, #12]
 8005c70:	2202      	movs	r2, #2
 8005c72:	2112      	movs	r1, #18
 8005c74:	f7ff ff78 	bl	8005b68 <std>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61a3      	str	r3, [r4, #24]
 8005c7c:	e7d2      	b.n	8005c24 <__sinit+0xc>
 8005c7e:	bf00      	nop
 8005c80:	08006d60 	.word	0x08006d60
 8005c84:	08005bb1 	.word	0x08005bb1

08005c88 <__sfp>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	f7ff ffac 	bl	8005be8 <__sfp_lock_acquire>
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <__sfp+0x84>)
 8005c92:	681e      	ldr	r6, [r3, #0]
 8005c94:	69b3      	ldr	r3, [r6, #24]
 8005c96:	b913      	cbnz	r3, 8005c9e <__sfp+0x16>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7ff ffbd 	bl	8005c18 <__sinit>
 8005c9e:	3648      	adds	r6, #72	; 0x48
 8005ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	d503      	bpl.n	8005cb0 <__sfp+0x28>
 8005ca8:	6833      	ldr	r3, [r6, #0]
 8005caa:	b30b      	cbz	r3, 8005cf0 <__sfp+0x68>
 8005cac:	6836      	ldr	r6, [r6, #0]
 8005cae:	e7f7      	b.n	8005ca0 <__sfp+0x18>
 8005cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cb4:	b9d5      	cbnz	r5, 8005cec <__sfp+0x64>
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <__sfp+0x88>)
 8005cb8:	60e3      	str	r3, [r4, #12]
 8005cba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cbe:	6665      	str	r5, [r4, #100]	; 0x64
 8005cc0:	f000 f847 	bl	8005d52 <__retarget_lock_init_recursive>
 8005cc4:	f7ff ff96 	bl	8005bf4 <__sfp_lock_release>
 8005cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cd0:	6025      	str	r5, [r4, #0]
 8005cd2:	61a5      	str	r5, [r4, #24]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cdc:	f7ff fcf2 	bl	80056c4 <memset>
 8005ce0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ce4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ce8:	4620      	mov	r0, r4
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cec:	3468      	adds	r4, #104	; 0x68
 8005cee:	e7d9      	b.n	8005ca4 <__sfp+0x1c>
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f7ff ff62 	bl	8005bbc <__sfmoreglue>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	6030      	str	r0, [r6, #0]
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d1d5      	bne.n	8005cac <__sfp+0x24>
 8005d00:	f7ff ff78 	bl	8005bf4 <__sfp_lock_release>
 8005d04:	230c      	movs	r3, #12
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	e7ee      	b.n	8005ce8 <__sfp+0x60>
 8005d0a:	bf00      	nop
 8005d0c:	08006d60 	.word	0x08006d60
 8005d10:	ffff0001 	.word	0xffff0001

08005d14 <_fwalk_reent>:
 8005d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d18:	4606      	mov	r6, r0
 8005d1a:	4688      	mov	r8, r1
 8005d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d20:	2700      	movs	r7, #0
 8005d22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d26:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2a:	d505      	bpl.n	8005d38 <_fwalk_reent+0x24>
 8005d2c:	6824      	ldr	r4, [r4, #0]
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d1f7      	bne.n	8005d22 <_fwalk_reent+0xe>
 8005d32:	4638      	mov	r0, r7
 8005d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d38:	89ab      	ldrh	r3, [r5, #12]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d907      	bls.n	8005d4e <_fwalk_reent+0x3a>
 8005d3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d42:	3301      	adds	r3, #1
 8005d44:	d003      	beq.n	8005d4e <_fwalk_reent+0x3a>
 8005d46:	4629      	mov	r1, r5
 8005d48:	4630      	mov	r0, r6
 8005d4a:	47c0      	blx	r8
 8005d4c:	4307      	orrs	r7, r0
 8005d4e:	3568      	adds	r5, #104	; 0x68
 8005d50:	e7e9      	b.n	8005d26 <_fwalk_reent+0x12>

08005d52 <__retarget_lock_init_recursive>:
 8005d52:	4770      	bx	lr

08005d54 <__retarget_lock_acquire_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <__retarget_lock_release_recursive>:
 8005d56:	4770      	bx	lr

08005d58 <__swhatbuf_r>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	460e      	mov	r6, r1
 8005d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d60:	2900      	cmp	r1, #0
 8005d62:	b096      	sub	sp, #88	; 0x58
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	da08      	bge.n	8005d7c <__swhatbuf_r+0x24>
 8005d6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	602a      	str	r2, [r5, #0]
 8005d72:	061a      	lsls	r2, r3, #24
 8005d74:	d410      	bmi.n	8005d98 <__swhatbuf_r+0x40>
 8005d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d7a:	e00e      	b.n	8005d9a <__swhatbuf_r+0x42>
 8005d7c:	466a      	mov	r2, sp
 8005d7e:	f000 fdf1 	bl	8006964 <_fstat_r>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	dbf1      	blt.n	8005d6a <__swhatbuf_r+0x12>
 8005d86:	9a01      	ldr	r2, [sp, #4]
 8005d88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d90:	425a      	negs	r2, r3
 8005d92:	415a      	adcs	r2, r3
 8005d94:	602a      	str	r2, [r5, #0]
 8005d96:	e7ee      	b.n	8005d76 <__swhatbuf_r+0x1e>
 8005d98:	2340      	movs	r3, #64	; 0x40
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	b016      	add	sp, #88	; 0x58
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005da4 <__smakebuf_r>:
 8005da4:	898b      	ldrh	r3, [r1, #12]
 8005da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005da8:	079d      	lsls	r5, r3, #30
 8005daa:	4606      	mov	r6, r0
 8005dac:	460c      	mov	r4, r1
 8005dae:	d507      	bpl.n	8005dc0 <__smakebuf_r+0x1c>
 8005db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	2301      	movs	r3, #1
 8005dba:	6163      	str	r3, [r4, #20]
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	ab01      	add	r3, sp, #4
 8005dc2:	466a      	mov	r2, sp
 8005dc4:	f7ff ffc8 	bl	8005d58 <__swhatbuf_r>
 8005dc8:	9900      	ldr	r1, [sp, #0]
 8005dca:	4605      	mov	r5, r0
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f000 f895 	bl	8005efc <_malloc_r>
 8005dd2:	b948      	cbnz	r0, 8005de8 <__smakebuf_r+0x44>
 8005dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd8:	059a      	lsls	r2, r3, #22
 8005dda:	d4ef      	bmi.n	8005dbc <__smakebuf_r+0x18>
 8005ddc:	f023 0303 	bic.w	r3, r3, #3
 8005de0:	f043 0302 	orr.w	r3, r3, #2
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	e7e3      	b.n	8005db0 <__smakebuf_r+0xc>
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <__smakebuf_r+0x7c>)
 8005dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	6163      	str	r3, [r4, #20]
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	6120      	str	r0, [r4, #16]
 8005dfe:	b15b      	cbz	r3, 8005e18 <__smakebuf_r+0x74>
 8005e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e04:	4630      	mov	r0, r6
 8005e06:	f000 fdbf 	bl	8006988 <_isatty_r>
 8005e0a:	b128      	cbz	r0, 8005e18 <__smakebuf_r+0x74>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	89a0      	ldrh	r0, [r4, #12]
 8005e1a:	4305      	orrs	r5, r0
 8005e1c:	81a5      	strh	r5, [r4, #12]
 8005e1e:	e7cd      	b.n	8005dbc <__smakebuf_r+0x18>
 8005e20:	08005bb1 	.word	0x08005bb1

08005e24 <_free_r>:
 8005e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e26:	2900      	cmp	r1, #0
 8005e28:	d044      	beq.n	8005eb4 <_free_r+0x90>
 8005e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e2e:	9001      	str	r0, [sp, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f1a1 0404 	sub.w	r4, r1, #4
 8005e36:	bfb8      	it	lt
 8005e38:	18e4      	addlt	r4, r4, r3
 8005e3a:	f000 fde1 	bl	8006a00 <__malloc_lock>
 8005e3e:	4a1e      	ldr	r2, [pc, #120]	; (8005eb8 <_free_r+0x94>)
 8005e40:	9801      	ldr	r0, [sp, #4]
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	b933      	cbnz	r3, 8005e54 <_free_r+0x30>
 8005e46:	6063      	str	r3, [r4, #4]
 8005e48:	6014      	str	r4, [r2, #0]
 8005e4a:	b003      	add	sp, #12
 8005e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e50:	f000 bddc 	b.w	8006a0c <__malloc_unlock>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d908      	bls.n	8005e6a <_free_r+0x46>
 8005e58:	6825      	ldr	r5, [r4, #0]
 8005e5a:	1961      	adds	r1, r4, r5
 8005e5c:	428b      	cmp	r3, r1
 8005e5e:	bf01      	itttt	eq
 8005e60:	6819      	ldreq	r1, [r3, #0]
 8005e62:	685b      	ldreq	r3, [r3, #4]
 8005e64:	1949      	addeq	r1, r1, r5
 8005e66:	6021      	streq	r1, [r4, #0]
 8005e68:	e7ed      	b.n	8005e46 <_free_r+0x22>
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	b10b      	cbz	r3, 8005e74 <_free_r+0x50>
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d9fa      	bls.n	8005e6a <_free_r+0x46>
 8005e74:	6811      	ldr	r1, [r2, #0]
 8005e76:	1855      	adds	r5, r2, r1
 8005e78:	42a5      	cmp	r5, r4
 8005e7a:	d10b      	bne.n	8005e94 <_free_r+0x70>
 8005e7c:	6824      	ldr	r4, [r4, #0]
 8005e7e:	4421      	add	r1, r4
 8005e80:	1854      	adds	r4, r2, r1
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	6011      	str	r1, [r2, #0]
 8005e86:	d1e0      	bne.n	8005e4a <_free_r+0x26>
 8005e88:	681c      	ldr	r4, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	6053      	str	r3, [r2, #4]
 8005e8e:	4421      	add	r1, r4
 8005e90:	6011      	str	r1, [r2, #0]
 8005e92:	e7da      	b.n	8005e4a <_free_r+0x26>
 8005e94:	d902      	bls.n	8005e9c <_free_r+0x78>
 8005e96:	230c      	movs	r3, #12
 8005e98:	6003      	str	r3, [r0, #0]
 8005e9a:	e7d6      	b.n	8005e4a <_free_r+0x26>
 8005e9c:	6825      	ldr	r5, [r4, #0]
 8005e9e:	1961      	adds	r1, r4, r5
 8005ea0:	428b      	cmp	r3, r1
 8005ea2:	bf04      	itt	eq
 8005ea4:	6819      	ldreq	r1, [r3, #0]
 8005ea6:	685b      	ldreq	r3, [r3, #4]
 8005ea8:	6063      	str	r3, [r4, #4]
 8005eaa:	bf04      	itt	eq
 8005eac:	1949      	addeq	r1, r1, r5
 8005eae:	6021      	streq	r1, [r4, #0]
 8005eb0:	6054      	str	r4, [r2, #4]
 8005eb2:	e7ca      	b.n	8005e4a <_free_r+0x26>
 8005eb4:	b003      	add	sp, #12
 8005eb6:	bd30      	pop	{r4, r5, pc}
 8005eb8:	20000748 	.word	0x20000748

08005ebc <sbrk_aligned>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	4e0e      	ldr	r6, [pc, #56]	; (8005ef8 <sbrk_aligned+0x3c>)
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	6831      	ldr	r1, [r6, #0]
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	b911      	cbnz	r1, 8005ece <sbrk_aligned+0x12>
 8005ec8:	f000 fcd6 	bl	8006878 <_sbrk_r>
 8005ecc:	6030      	str	r0, [r6, #0]
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f000 fcd1 	bl	8006878 <_sbrk_r>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	d00a      	beq.n	8005ef0 <sbrk_aligned+0x34>
 8005eda:	1cc4      	adds	r4, r0, #3
 8005edc:	f024 0403 	bic.w	r4, r4, #3
 8005ee0:	42a0      	cmp	r0, r4
 8005ee2:	d007      	beq.n	8005ef4 <sbrk_aligned+0x38>
 8005ee4:	1a21      	subs	r1, r4, r0
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 fcc6 	bl	8006878 <_sbrk_r>
 8005eec:	3001      	adds	r0, #1
 8005eee:	d101      	bne.n	8005ef4 <sbrk_aligned+0x38>
 8005ef0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	2000074c 	.word	0x2000074c

08005efc <_malloc_r>:
 8005efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	1ccd      	adds	r5, r1, #3
 8005f02:	f025 0503 	bic.w	r5, r5, #3
 8005f06:	3508      	adds	r5, #8
 8005f08:	2d0c      	cmp	r5, #12
 8005f0a:	bf38      	it	cc
 8005f0c:	250c      	movcc	r5, #12
 8005f0e:	2d00      	cmp	r5, #0
 8005f10:	4607      	mov	r7, r0
 8005f12:	db01      	blt.n	8005f18 <_malloc_r+0x1c>
 8005f14:	42a9      	cmp	r1, r5
 8005f16:	d905      	bls.n	8005f24 <_malloc_r+0x28>
 8005f18:	230c      	movs	r3, #12
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	4630      	mov	r0, r6
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f24:	4e2e      	ldr	r6, [pc, #184]	; (8005fe0 <_malloc_r+0xe4>)
 8005f26:	f000 fd6b 	bl	8006a00 <__malloc_lock>
 8005f2a:	6833      	ldr	r3, [r6, #0]
 8005f2c:	461c      	mov	r4, r3
 8005f2e:	bb34      	cbnz	r4, 8005f7e <_malloc_r+0x82>
 8005f30:	4629      	mov	r1, r5
 8005f32:	4638      	mov	r0, r7
 8005f34:	f7ff ffc2 	bl	8005ebc <sbrk_aligned>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	d14d      	bne.n	8005fda <_malloc_r+0xde>
 8005f3e:	6834      	ldr	r4, [r6, #0]
 8005f40:	4626      	mov	r6, r4
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	d140      	bne.n	8005fc8 <_malloc_r+0xcc>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	eb04 0803 	add.w	r8, r4, r3
 8005f50:	f000 fc92 	bl	8006878 <_sbrk_r>
 8005f54:	4580      	cmp	r8, r0
 8005f56:	d13a      	bne.n	8005fce <_malloc_r+0xd2>
 8005f58:	6821      	ldr	r1, [r4, #0]
 8005f5a:	3503      	adds	r5, #3
 8005f5c:	1a6d      	subs	r5, r5, r1
 8005f5e:	f025 0503 	bic.w	r5, r5, #3
 8005f62:	3508      	adds	r5, #8
 8005f64:	2d0c      	cmp	r5, #12
 8005f66:	bf38      	it	cc
 8005f68:	250c      	movcc	r5, #12
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	f7ff ffa5 	bl	8005ebc <sbrk_aligned>
 8005f72:	3001      	adds	r0, #1
 8005f74:	d02b      	beq.n	8005fce <_malloc_r+0xd2>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	442b      	add	r3, r5
 8005f7a:	6023      	str	r3, [r4, #0]
 8005f7c:	e00e      	b.n	8005f9c <_malloc_r+0xa0>
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	1b52      	subs	r2, r2, r5
 8005f82:	d41e      	bmi.n	8005fc2 <_malloc_r+0xc6>
 8005f84:	2a0b      	cmp	r2, #11
 8005f86:	d916      	bls.n	8005fb6 <_malloc_r+0xba>
 8005f88:	1961      	adds	r1, r4, r5
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	6025      	str	r5, [r4, #0]
 8005f8e:	bf18      	it	ne
 8005f90:	6059      	strne	r1, [r3, #4]
 8005f92:	6863      	ldr	r3, [r4, #4]
 8005f94:	bf08      	it	eq
 8005f96:	6031      	streq	r1, [r6, #0]
 8005f98:	5162      	str	r2, [r4, r5]
 8005f9a:	604b      	str	r3, [r1, #4]
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f104 060b 	add.w	r6, r4, #11
 8005fa2:	f000 fd33 	bl	8006a0c <__malloc_unlock>
 8005fa6:	f026 0607 	bic.w	r6, r6, #7
 8005faa:	1d23      	adds	r3, r4, #4
 8005fac:	1af2      	subs	r2, r6, r3
 8005fae:	d0b6      	beq.n	8005f1e <_malloc_r+0x22>
 8005fb0:	1b9b      	subs	r3, r3, r6
 8005fb2:	50a3      	str	r3, [r4, r2]
 8005fb4:	e7b3      	b.n	8005f1e <_malloc_r+0x22>
 8005fb6:	6862      	ldr	r2, [r4, #4]
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	bf0c      	ite	eq
 8005fbc:	6032      	streq	r2, [r6, #0]
 8005fbe:	605a      	strne	r2, [r3, #4]
 8005fc0:	e7ec      	b.n	8005f9c <_malloc_r+0xa0>
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	6864      	ldr	r4, [r4, #4]
 8005fc6:	e7b2      	b.n	8005f2e <_malloc_r+0x32>
 8005fc8:	4634      	mov	r4, r6
 8005fca:	6876      	ldr	r6, [r6, #4]
 8005fcc:	e7b9      	b.n	8005f42 <_malloc_r+0x46>
 8005fce:	230c      	movs	r3, #12
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f000 fd1a 	bl	8006a0c <__malloc_unlock>
 8005fd8:	e7a1      	b.n	8005f1e <_malloc_r+0x22>
 8005fda:	6025      	str	r5, [r4, #0]
 8005fdc:	e7de      	b.n	8005f9c <_malloc_r+0xa0>
 8005fde:	bf00      	nop
 8005fe0:	20000748 	.word	0x20000748

08005fe4 <__ssputs_r>:
 8005fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe8:	688e      	ldr	r6, [r1, #8]
 8005fea:	429e      	cmp	r6, r3
 8005fec:	4682      	mov	sl, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	4690      	mov	r8, r2
 8005ff2:	461f      	mov	r7, r3
 8005ff4:	d838      	bhi.n	8006068 <__ssputs_r+0x84>
 8005ff6:	898a      	ldrh	r2, [r1, #12]
 8005ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ffc:	d032      	beq.n	8006064 <__ssputs_r+0x80>
 8005ffe:	6825      	ldr	r5, [r4, #0]
 8006000:	6909      	ldr	r1, [r1, #16]
 8006002:	eba5 0901 	sub.w	r9, r5, r1
 8006006:	6965      	ldr	r5, [r4, #20]
 8006008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800600c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006010:	3301      	adds	r3, #1
 8006012:	444b      	add	r3, r9
 8006014:	106d      	asrs	r5, r5, #1
 8006016:	429d      	cmp	r5, r3
 8006018:	bf38      	it	cc
 800601a:	461d      	movcc	r5, r3
 800601c:	0553      	lsls	r3, r2, #21
 800601e:	d531      	bpl.n	8006084 <__ssputs_r+0xa0>
 8006020:	4629      	mov	r1, r5
 8006022:	f7ff ff6b 	bl	8005efc <_malloc_r>
 8006026:	4606      	mov	r6, r0
 8006028:	b950      	cbnz	r0, 8006040 <__ssputs_r+0x5c>
 800602a:	230c      	movs	r3, #12
 800602c:	f8ca 3000 	str.w	r3, [sl]
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006040:	6921      	ldr	r1, [r4, #16]
 8006042:	464a      	mov	r2, r9
 8006044:	f7ff fb30 	bl	80056a8 <memcpy>
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	6126      	str	r6, [r4, #16]
 8006056:	6165      	str	r5, [r4, #20]
 8006058:	444e      	add	r6, r9
 800605a:	eba5 0509 	sub.w	r5, r5, r9
 800605e:	6026      	str	r6, [r4, #0]
 8006060:	60a5      	str	r5, [r4, #8]
 8006062:	463e      	mov	r6, r7
 8006064:	42be      	cmp	r6, r7
 8006066:	d900      	bls.n	800606a <__ssputs_r+0x86>
 8006068:	463e      	mov	r6, r7
 800606a:	6820      	ldr	r0, [r4, #0]
 800606c:	4632      	mov	r2, r6
 800606e:	4641      	mov	r1, r8
 8006070:	f000 fcac 	bl	80069cc <memmove>
 8006074:	68a3      	ldr	r3, [r4, #8]
 8006076:	1b9b      	subs	r3, r3, r6
 8006078:	60a3      	str	r3, [r4, #8]
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	4433      	add	r3, r6
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	2000      	movs	r0, #0
 8006082:	e7db      	b.n	800603c <__ssputs_r+0x58>
 8006084:	462a      	mov	r2, r5
 8006086:	f000 fcc7 	bl	8006a18 <_realloc_r>
 800608a:	4606      	mov	r6, r0
 800608c:	2800      	cmp	r0, #0
 800608e:	d1e1      	bne.n	8006054 <__ssputs_r+0x70>
 8006090:	6921      	ldr	r1, [r4, #16]
 8006092:	4650      	mov	r0, sl
 8006094:	f7ff fec6 	bl	8005e24 <_free_r>
 8006098:	e7c7      	b.n	800602a <__ssputs_r+0x46>
	...

0800609c <_svfiprintf_r>:
 800609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	4698      	mov	r8, r3
 80060a2:	898b      	ldrh	r3, [r1, #12]
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	b09d      	sub	sp, #116	; 0x74
 80060a8:	4607      	mov	r7, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	d50e      	bpl.n	80060ce <_svfiprintf_r+0x32>
 80060b0:	690b      	ldr	r3, [r1, #16]
 80060b2:	b963      	cbnz	r3, 80060ce <_svfiprintf_r+0x32>
 80060b4:	2140      	movs	r1, #64	; 0x40
 80060b6:	f7ff ff21 	bl	8005efc <_malloc_r>
 80060ba:	6028      	str	r0, [r5, #0]
 80060bc:	6128      	str	r0, [r5, #16]
 80060be:	b920      	cbnz	r0, 80060ca <_svfiprintf_r+0x2e>
 80060c0:	230c      	movs	r3, #12
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060c8:	e0d1      	b.n	800626e <_svfiprintf_r+0x1d2>
 80060ca:	2340      	movs	r3, #64	; 0x40
 80060cc:	616b      	str	r3, [r5, #20]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9309      	str	r3, [sp, #36]	; 0x24
 80060d2:	2320      	movs	r3, #32
 80060d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060dc:	2330      	movs	r3, #48	; 0x30
 80060de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006288 <_svfiprintf_r+0x1ec>
 80060e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060e6:	f04f 0901 	mov.w	r9, #1
 80060ea:	4623      	mov	r3, r4
 80060ec:	469a      	mov	sl, r3
 80060ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060f2:	b10a      	cbz	r2, 80060f8 <_svfiprintf_r+0x5c>
 80060f4:	2a25      	cmp	r2, #37	; 0x25
 80060f6:	d1f9      	bne.n	80060ec <_svfiprintf_r+0x50>
 80060f8:	ebba 0b04 	subs.w	fp, sl, r4
 80060fc:	d00b      	beq.n	8006116 <_svfiprintf_r+0x7a>
 80060fe:	465b      	mov	r3, fp
 8006100:	4622      	mov	r2, r4
 8006102:	4629      	mov	r1, r5
 8006104:	4638      	mov	r0, r7
 8006106:	f7ff ff6d 	bl	8005fe4 <__ssputs_r>
 800610a:	3001      	adds	r0, #1
 800610c:	f000 80aa 	beq.w	8006264 <_svfiprintf_r+0x1c8>
 8006110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006112:	445a      	add	r2, fp
 8006114:	9209      	str	r2, [sp, #36]	; 0x24
 8006116:	f89a 3000 	ldrb.w	r3, [sl]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80a2 	beq.w	8006264 <_svfiprintf_r+0x1c8>
 8006120:	2300      	movs	r3, #0
 8006122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800612a:	f10a 0a01 	add.w	sl, sl, #1
 800612e:	9304      	str	r3, [sp, #16]
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006136:	931a      	str	r3, [sp, #104]	; 0x68
 8006138:	4654      	mov	r4, sl
 800613a:	2205      	movs	r2, #5
 800613c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006140:	4851      	ldr	r0, [pc, #324]	; (8006288 <_svfiprintf_r+0x1ec>)
 8006142:	f7fa f855 	bl	80001f0 <memchr>
 8006146:	9a04      	ldr	r2, [sp, #16]
 8006148:	b9d8      	cbnz	r0, 8006182 <_svfiprintf_r+0xe6>
 800614a:	06d0      	lsls	r0, r2, #27
 800614c:	bf44      	itt	mi
 800614e:	2320      	movmi	r3, #32
 8006150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006154:	0711      	lsls	r1, r2, #28
 8006156:	bf44      	itt	mi
 8006158:	232b      	movmi	r3, #43	; 0x2b
 800615a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800615e:	f89a 3000 	ldrb.w	r3, [sl]
 8006162:	2b2a      	cmp	r3, #42	; 0x2a
 8006164:	d015      	beq.n	8006192 <_svfiprintf_r+0xf6>
 8006166:	9a07      	ldr	r2, [sp, #28]
 8006168:	4654      	mov	r4, sl
 800616a:	2000      	movs	r0, #0
 800616c:	f04f 0c0a 	mov.w	ip, #10
 8006170:	4621      	mov	r1, r4
 8006172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006176:	3b30      	subs	r3, #48	; 0x30
 8006178:	2b09      	cmp	r3, #9
 800617a:	d94e      	bls.n	800621a <_svfiprintf_r+0x17e>
 800617c:	b1b0      	cbz	r0, 80061ac <_svfiprintf_r+0x110>
 800617e:	9207      	str	r2, [sp, #28]
 8006180:	e014      	b.n	80061ac <_svfiprintf_r+0x110>
 8006182:	eba0 0308 	sub.w	r3, r0, r8
 8006186:	fa09 f303 	lsl.w	r3, r9, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	46a2      	mov	sl, r4
 8006190:	e7d2      	b.n	8006138 <_svfiprintf_r+0x9c>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	1d19      	adds	r1, r3, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	9103      	str	r1, [sp, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfbb      	ittet	lt
 800619e:	425b      	neglt	r3, r3
 80061a0:	f042 0202 	orrlt.w	r2, r2, #2
 80061a4:	9307      	strge	r3, [sp, #28]
 80061a6:	9307      	strlt	r3, [sp, #28]
 80061a8:	bfb8      	it	lt
 80061aa:	9204      	strlt	r2, [sp, #16]
 80061ac:	7823      	ldrb	r3, [r4, #0]
 80061ae:	2b2e      	cmp	r3, #46	; 0x2e
 80061b0:	d10c      	bne.n	80061cc <_svfiprintf_r+0x130>
 80061b2:	7863      	ldrb	r3, [r4, #1]
 80061b4:	2b2a      	cmp	r3, #42	; 0x2a
 80061b6:	d135      	bne.n	8006224 <_svfiprintf_r+0x188>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	1d1a      	adds	r2, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	9203      	str	r2, [sp, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bfb8      	it	lt
 80061c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061c8:	3402      	adds	r4, #2
 80061ca:	9305      	str	r3, [sp, #20]
 80061cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006298 <_svfiprintf_r+0x1fc>
 80061d0:	7821      	ldrb	r1, [r4, #0]
 80061d2:	2203      	movs	r2, #3
 80061d4:	4650      	mov	r0, sl
 80061d6:	f7fa f80b 	bl	80001f0 <memchr>
 80061da:	b140      	cbz	r0, 80061ee <_svfiprintf_r+0x152>
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	eba0 000a 	sub.w	r0, r0, sl
 80061e2:	fa03 f000 	lsl.w	r0, r3, r0
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	4303      	orrs	r3, r0
 80061ea:	3401      	adds	r4, #1
 80061ec:	9304      	str	r3, [sp, #16]
 80061ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f2:	4826      	ldr	r0, [pc, #152]	; (800628c <_svfiprintf_r+0x1f0>)
 80061f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061f8:	2206      	movs	r2, #6
 80061fa:	f7f9 fff9 	bl	80001f0 <memchr>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d038      	beq.n	8006274 <_svfiprintf_r+0x1d8>
 8006202:	4b23      	ldr	r3, [pc, #140]	; (8006290 <_svfiprintf_r+0x1f4>)
 8006204:	bb1b      	cbnz	r3, 800624e <_svfiprintf_r+0x1b2>
 8006206:	9b03      	ldr	r3, [sp, #12]
 8006208:	3307      	adds	r3, #7
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	3308      	adds	r3, #8
 8006210:	9303      	str	r3, [sp, #12]
 8006212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006214:	4433      	add	r3, r6
 8006216:	9309      	str	r3, [sp, #36]	; 0x24
 8006218:	e767      	b.n	80060ea <_svfiprintf_r+0x4e>
 800621a:	fb0c 3202 	mla	r2, ip, r2, r3
 800621e:	460c      	mov	r4, r1
 8006220:	2001      	movs	r0, #1
 8006222:	e7a5      	b.n	8006170 <_svfiprintf_r+0xd4>
 8006224:	2300      	movs	r3, #0
 8006226:	3401      	adds	r4, #1
 8006228:	9305      	str	r3, [sp, #20]
 800622a:	4619      	mov	r1, r3
 800622c:	f04f 0c0a 	mov.w	ip, #10
 8006230:	4620      	mov	r0, r4
 8006232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006236:	3a30      	subs	r2, #48	; 0x30
 8006238:	2a09      	cmp	r2, #9
 800623a:	d903      	bls.n	8006244 <_svfiprintf_r+0x1a8>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0c5      	beq.n	80061cc <_svfiprintf_r+0x130>
 8006240:	9105      	str	r1, [sp, #20]
 8006242:	e7c3      	b.n	80061cc <_svfiprintf_r+0x130>
 8006244:	fb0c 2101 	mla	r1, ip, r1, r2
 8006248:	4604      	mov	r4, r0
 800624a:	2301      	movs	r3, #1
 800624c:	e7f0      	b.n	8006230 <_svfiprintf_r+0x194>
 800624e:	ab03      	add	r3, sp, #12
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	462a      	mov	r2, r5
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <_svfiprintf_r+0x1f8>)
 8006256:	a904      	add	r1, sp, #16
 8006258:	4638      	mov	r0, r7
 800625a:	f3af 8000 	nop.w
 800625e:	1c42      	adds	r2, r0, #1
 8006260:	4606      	mov	r6, r0
 8006262:	d1d6      	bne.n	8006212 <_svfiprintf_r+0x176>
 8006264:	89ab      	ldrh	r3, [r5, #12]
 8006266:	065b      	lsls	r3, r3, #25
 8006268:	f53f af2c 	bmi.w	80060c4 <_svfiprintf_r+0x28>
 800626c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800626e:	b01d      	add	sp, #116	; 0x74
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	ab03      	add	r3, sp, #12
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	462a      	mov	r2, r5
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <_svfiprintf_r+0x1f8>)
 800627c:	a904      	add	r1, sp, #16
 800627e:	4638      	mov	r0, r7
 8006280:	f000 f9d4 	bl	800662c <_printf_i>
 8006284:	e7eb      	b.n	800625e <_svfiprintf_r+0x1c2>
 8006286:	bf00      	nop
 8006288:	08006dc4 	.word	0x08006dc4
 800628c:	08006dce 	.word	0x08006dce
 8006290:	00000000 	.word	0x00000000
 8006294:	08005fe5 	.word	0x08005fe5
 8006298:	08006dca 	.word	0x08006dca

0800629c <__sfputc_r>:
 800629c:	6893      	ldr	r3, [r2, #8]
 800629e:	3b01      	subs	r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	b410      	push	{r4}
 80062a4:	6093      	str	r3, [r2, #8]
 80062a6:	da08      	bge.n	80062ba <__sfputc_r+0x1e>
 80062a8:	6994      	ldr	r4, [r2, #24]
 80062aa:	42a3      	cmp	r3, r4
 80062ac:	db01      	blt.n	80062b2 <__sfputc_r+0x16>
 80062ae:	290a      	cmp	r1, #10
 80062b0:	d103      	bne.n	80062ba <__sfputc_r+0x1e>
 80062b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062b6:	f7ff bad5 	b.w	8005864 <__swbuf_r>
 80062ba:	6813      	ldr	r3, [r2, #0]
 80062bc:	1c58      	adds	r0, r3, #1
 80062be:	6010      	str	r0, [r2, #0]
 80062c0:	7019      	strb	r1, [r3, #0]
 80062c2:	4608      	mov	r0, r1
 80062c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <__sfputs_r>:
 80062ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062cc:	4606      	mov	r6, r0
 80062ce:	460f      	mov	r7, r1
 80062d0:	4614      	mov	r4, r2
 80062d2:	18d5      	adds	r5, r2, r3
 80062d4:	42ac      	cmp	r4, r5
 80062d6:	d101      	bne.n	80062dc <__sfputs_r+0x12>
 80062d8:	2000      	movs	r0, #0
 80062da:	e007      	b.n	80062ec <__sfputs_r+0x22>
 80062dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e0:	463a      	mov	r2, r7
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7ff ffda 	bl	800629c <__sfputc_r>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d1f3      	bne.n	80062d4 <__sfputs_r+0xa>
 80062ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062f0 <_vfiprintf_r>:
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	460d      	mov	r5, r1
 80062f6:	b09d      	sub	sp, #116	; 0x74
 80062f8:	4614      	mov	r4, r2
 80062fa:	4698      	mov	r8, r3
 80062fc:	4606      	mov	r6, r0
 80062fe:	b118      	cbz	r0, 8006308 <_vfiprintf_r+0x18>
 8006300:	6983      	ldr	r3, [r0, #24]
 8006302:	b90b      	cbnz	r3, 8006308 <_vfiprintf_r+0x18>
 8006304:	f7ff fc88 	bl	8005c18 <__sinit>
 8006308:	4b89      	ldr	r3, [pc, #548]	; (8006530 <_vfiprintf_r+0x240>)
 800630a:	429d      	cmp	r5, r3
 800630c:	d11b      	bne.n	8006346 <_vfiprintf_r+0x56>
 800630e:	6875      	ldr	r5, [r6, #4]
 8006310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006312:	07d9      	lsls	r1, r3, #31
 8006314:	d405      	bmi.n	8006322 <_vfiprintf_r+0x32>
 8006316:	89ab      	ldrh	r3, [r5, #12]
 8006318:	059a      	lsls	r2, r3, #22
 800631a:	d402      	bmi.n	8006322 <_vfiprintf_r+0x32>
 800631c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800631e:	f7ff fd19 	bl	8005d54 <__retarget_lock_acquire_recursive>
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	071b      	lsls	r3, r3, #28
 8006326:	d501      	bpl.n	800632c <_vfiprintf_r+0x3c>
 8006328:	692b      	ldr	r3, [r5, #16]
 800632a:	b9eb      	cbnz	r3, 8006368 <_vfiprintf_r+0x78>
 800632c:	4629      	mov	r1, r5
 800632e:	4630      	mov	r0, r6
 8006330:	f7ff faea 	bl	8005908 <__swsetup_r>
 8006334:	b1c0      	cbz	r0, 8006368 <_vfiprintf_r+0x78>
 8006336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006338:	07dc      	lsls	r4, r3, #31
 800633a:	d50e      	bpl.n	800635a <_vfiprintf_r+0x6a>
 800633c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006340:	b01d      	add	sp, #116	; 0x74
 8006342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006346:	4b7b      	ldr	r3, [pc, #492]	; (8006534 <_vfiprintf_r+0x244>)
 8006348:	429d      	cmp	r5, r3
 800634a:	d101      	bne.n	8006350 <_vfiprintf_r+0x60>
 800634c:	68b5      	ldr	r5, [r6, #8]
 800634e:	e7df      	b.n	8006310 <_vfiprintf_r+0x20>
 8006350:	4b79      	ldr	r3, [pc, #484]	; (8006538 <_vfiprintf_r+0x248>)
 8006352:	429d      	cmp	r5, r3
 8006354:	bf08      	it	eq
 8006356:	68f5      	ldreq	r5, [r6, #12]
 8006358:	e7da      	b.n	8006310 <_vfiprintf_r+0x20>
 800635a:	89ab      	ldrh	r3, [r5, #12]
 800635c:	0598      	lsls	r0, r3, #22
 800635e:	d4ed      	bmi.n	800633c <_vfiprintf_r+0x4c>
 8006360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006362:	f7ff fcf8 	bl	8005d56 <__retarget_lock_release_recursive>
 8006366:	e7e9      	b.n	800633c <_vfiprintf_r+0x4c>
 8006368:	2300      	movs	r3, #0
 800636a:	9309      	str	r3, [sp, #36]	; 0x24
 800636c:	2320      	movs	r3, #32
 800636e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006372:	f8cd 800c 	str.w	r8, [sp, #12]
 8006376:	2330      	movs	r3, #48	; 0x30
 8006378:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800653c <_vfiprintf_r+0x24c>
 800637c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006380:	f04f 0901 	mov.w	r9, #1
 8006384:	4623      	mov	r3, r4
 8006386:	469a      	mov	sl, r3
 8006388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800638c:	b10a      	cbz	r2, 8006392 <_vfiprintf_r+0xa2>
 800638e:	2a25      	cmp	r2, #37	; 0x25
 8006390:	d1f9      	bne.n	8006386 <_vfiprintf_r+0x96>
 8006392:	ebba 0b04 	subs.w	fp, sl, r4
 8006396:	d00b      	beq.n	80063b0 <_vfiprintf_r+0xc0>
 8006398:	465b      	mov	r3, fp
 800639a:	4622      	mov	r2, r4
 800639c:	4629      	mov	r1, r5
 800639e:	4630      	mov	r0, r6
 80063a0:	f7ff ff93 	bl	80062ca <__sfputs_r>
 80063a4:	3001      	adds	r0, #1
 80063a6:	f000 80aa 	beq.w	80064fe <_vfiprintf_r+0x20e>
 80063aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ac:	445a      	add	r2, fp
 80063ae:	9209      	str	r2, [sp, #36]	; 0x24
 80063b0:	f89a 3000 	ldrb.w	r3, [sl]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80a2 	beq.w	80064fe <_vfiprintf_r+0x20e>
 80063ba:	2300      	movs	r3, #0
 80063bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063c4:	f10a 0a01 	add.w	sl, sl, #1
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	9307      	str	r3, [sp, #28]
 80063cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063d0:	931a      	str	r3, [sp, #104]	; 0x68
 80063d2:	4654      	mov	r4, sl
 80063d4:	2205      	movs	r2, #5
 80063d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063da:	4858      	ldr	r0, [pc, #352]	; (800653c <_vfiprintf_r+0x24c>)
 80063dc:	f7f9 ff08 	bl	80001f0 <memchr>
 80063e0:	9a04      	ldr	r2, [sp, #16]
 80063e2:	b9d8      	cbnz	r0, 800641c <_vfiprintf_r+0x12c>
 80063e4:	06d1      	lsls	r1, r2, #27
 80063e6:	bf44      	itt	mi
 80063e8:	2320      	movmi	r3, #32
 80063ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ee:	0713      	lsls	r3, r2, #28
 80063f0:	bf44      	itt	mi
 80063f2:	232b      	movmi	r3, #43	; 0x2b
 80063f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063f8:	f89a 3000 	ldrb.w	r3, [sl]
 80063fc:	2b2a      	cmp	r3, #42	; 0x2a
 80063fe:	d015      	beq.n	800642c <_vfiprintf_r+0x13c>
 8006400:	9a07      	ldr	r2, [sp, #28]
 8006402:	4654      	mov	r4, sl
 8006404:	2000      	movs	r0, #0
 8006406:	f04f 0c0a 	mov.w	ip, #10
 800640a:	4621      	mov	r1, r4
 800640c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006410:	3b30      	subs	r3, #48	; 0x30
 8006412:	2b09      	cmp	r3, #9
 8006414:	d94e      	bls.n	80064b4 <_vfiprintf_r+0x1c4>
 8006416:	b1b0      	cbz	r0, 8006446 <_vfiprintf_r+0x156>
 8006418:	9207      	str	r2, [sp, #28]
 800641a:	e014      	b.n	8006446 <_vfiprintf_r+0x156>
 800641c:	eba0 0308 	sub.w	r3, r0, r8
 8006420:	fa09 f303 	lsl.w	r3, r9, r3
 8006424:	4313      	orrs	r3, r2
 8006426:	9304      	str	r3, [sp, #16]
 8006428:	46a2      	mov	sl, r4
 800642a:	e7d2      	b.n	80063d2 <_vfiprintf_r+0xe2>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	1d19      	adds	r1, r3, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	9103      	str	r1, [sp, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	bfbb      	ittet	lt
 8006438:	425b      	neglt	r3, r3
 800643a:	f042 0202 	orrlt.w	r2, r2, #2
 800643e:	9307      	strge	r3, [sp, #28]
 8006440:	9307      	strlt	r3, [sp, #28]
 8006442:	bfb8      	it	lt
 8006444:	9204      	strlt	r2, [sp, #16]
 8006446:	7823      	ldrb	r3, [r4, #0]
 8006448:	2b2e      	cmp	r3, #46	; 0x2e
 800644a:	d10c      	bne.n	8006466 <_vfiprintf_r+0x176>
 800644c:	7863      	ldrb	r3, [r4, #1]
 800644e:	2b2a      	cmp	r3, #42	; 0x2a
 8006450:	d135      	bne.n	80064be <_vfiprintf_r+0x1ce>
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	1d1a      	adds	r2, r3, #4
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	9203      	str	r2, [sp, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	bfb8      	it	lt
 800645e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006462:	3402      	adds	r4, #2
 8006464:	9305      	str	r3, [sp, #20]
 8006466:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800654c <_vfiprintf_r+0x25c>
 800646a:	7821      	ldrb	r1, [r4, #0]
 800646c:	2203      	movs	r2, #3
 800646e:	4650      	mov	r0, sl
 8006470:	f7f9 febe 	bl	80001f0 <memchr>
 8006474:	b140      	cbz	r0, 8006488 <_vfiprintf_r+0x198>
 8006476:	2340      	movs	r3, #64	; 0x40
 8006478:	eba0 000a 	sub.w	r0, r0, sl
 800647c:	fa03 f000 	lsl.w	r0, r3, r0
 8006480:	9b04      	ldr	r3, [sp, #16]
 8006482:	4303      	orrs	r3, r0
 8006484:	3401      	adds	r4, #1
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648c:	482c      	ldr	r0, [pc, #176]	; (8006540 <_vfiprintf_r+0x250>)
 800648e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006492:	2206      	movs	r2, #6
 8006494:	f7f9 feac 	bl	80001f0 <memchr>
 8006498:	2800      	cmp	r0, #0
 800649a:	d03f      	beq.n	800651c <_vfiprintf_r+0x22c>
 800649c:	4b29      	ldr	r3, [pc, #164]	; (8006544 <_vfiprintf_r+0x254>)
 800649e:	bb1b      	cbnz	r3, 80064e8 <_vfiprintf_r+0x1f8>
 80064a0:	9b03      	ldr	r3, [sp, #12]
 80064a2:	3307      	adds	r3, #7
 80064a4:	f023 0307 	bic.w	r3, r3, #7
 80064a8:	3308      	adds	r3, #8
 80064aa:	9303      	str	r3, [sp, #12]
 80064ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ae:	443b      	add	r3, r7
 80064b0:	9309      	str	r3, [sp, #36]	; 0x24
 80064b2:	e767      	b.n	8006384 <_vfiprintf_r+0x94>
 80064b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064b8:	460c      	mov	r4, r1
 80064ba:	2001      	movs	r0, #1
 80064bc:	e7a5      	b.n	800640a <_vfiprintf_r+0x11a>
 80064be:	2300      	movs	r3, #0
 80064c0:	3401      	adds	r4, #1
 80064c2:	9305      	str	r3, [sp, #20]
 80064c4:	4619      	mov	r1, r3
 80064c6:	f04f 0c0a 	mov.w	ip, #10
 80064ca:	4620      	mov	r0, r4
 80064cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064d0:	3a30      	subs	r2, #48	; 0x30
 80064d2:	2a09      	cmp	r2, #9
 80064d4:	d903      	bls.n	80064de <_vfiprintf_r+0x1ee>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0c5      	beq.n	8006466 <_vfiprintf_r+0x176>
 80064da:	9105      	str	r1, [sp, #20]
 80064dc:	e7c3      	b.n	8006466 <_vfiprintf_r+0x176>
 80064de:	fb0c 2101 	mla	r1, ip, r1, r2
 80064e2:	4604      	mov	r4, r0
 80064e4:	2301      	movs	r3, #1
 80064e6:	e7f0      	b.n	80064ca <_vfiprintf_r+0x1da>
 80064e8:	ab03      	add	r3, sp, #12
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	462a      	mov	r2, r5
 80064ee:	4b16      	ldr	r3, [pc, #88]	; (8006548 <_vfiprintf_r+0x258>)
 80064f0:	a904      	add	r1, sp, #16
 80064f2:	4630      	mov	r0, r6
 80064f4:	f3af 8000 	nop.w
 80064f8:	4607      	mov	r7, r0
 80064fa:	1c78      	adds	r0, r7, #1
 80064fc:	d1d6      	bne.n	80064ac <_vfiprintf_r+0x1bc>
 80064fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006500:	07d9      	lsls	r1, r3, #31
 8006502:	d405      	bmi.n	8006510 <_vfiprintf_r+0x220>
 8006504:	89ab      	ldrh	r3, [r5, #12]
 8006506:	059a      	lsls	r2, r3, #22
 8006508:	d402      	bmi.n	8006510 <_vfiprintf_r+0x220>
 800650a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800650c:	f7ff fc23 	bl	8005d56 <__retarget_lock_release_recursive>
 8006510:	89ab      	ldrh	r3, [r5, #12]
 8006512:	065b      	lsls	r3, r3, #25
 8006514:	f53f af12 	bmi.w	800633c <_vfiprintf_r+0x4c>
 8006518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800651a:	e711      	b.n	8006340 <_vfiprintf_r+0x50>
 800651c:	ab03      	add	r3, sp, #12
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	462a      	mov	r2, r5
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <_vfiprintf_r+0x258>)
 8006524:	a904      	add	r1, sp, #16
 8006526:	4630      	mov	r0, r6
 8006528:	f000 f880 	bl	800662c <_printf_i>
 800652c:	e7e4      	b.n	80064f8 <_vfiprintf_r+0x208>
 800652e:	bf00      	nop
 8006530:	08006d84 	.word	0x08006d84
 8006534:	08006da4 	.word	0x08006da4
 8006538:	08006d64 	.word	0x08006d64
 800653c:	08006dc4 	.word	0x08006dc4
 8006540:	08006dce 	.word	0x08006dce
 8006544:	00000000 	.word	0x00000000
 8006548:	080062cb 	.word	0x080062cb
 800654c:	08006dca 	.word	0x08006dca

08006550 <_printf_common>:
 8006550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006554:	4616      	mov	r6, r2
 8006556:	4699      	mov	r9, r3
 8006558:	688a      	ldr	r2, [r1, #8]
 800655a:	690b      	ldr	r3, [r1, #16]
 800655c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006560:	4293      	cmp	r3, r2
 8006562:	bfb8      	it	lt
 8006564:	4613      	movlt	r3, r2
 8006566:	6033      	str	r3, [r6, #0]
 8006568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800656c:	4607      	mov	r7, r0
 800656e:	460c      	mov	r4, r1
 8006570:	b10a      	cbz	r2, 8006576 <_printf_common+0x26>
 8006572:	3301      	adds	r3, #1
 8006574:	6033      	str	r3, [r6, #0]
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	0699      	lsls	r1, r3, #26
 800657a:	bf42      	ittt	mi
 800657c:	6833      	ldrmi	r3, [r6, #0]
 800657e:	3302      	addmi	r3, #2
 8006580:	6033      	strmi	r3, [r6, #0]
 8006582:	6825      	ldr	r5, [r4, #0]
 8006584:	f015 0506 	ands.w	r5, r5, #6
 8006588:	d106      	bne.n	8006598 <_printf_common+0x48>
 800658a:	f104 0a19 	add.w	sl, r4, #25
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	6832      	ldr	r2, [r6, #0]
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	42ab      	cmp	r3, r5
 8006596:	dc26      	bgt.n	80065e6 <_printf_common+0x96>
 8006598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800659c:	1e13      	subs	r3, r2, #0
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	bf18      	it	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	0692      	lsls	r2, r2, #26
 80065a6:	d42b      	bmi.n	8006600 <_printf_common+0xb0>
 80065a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ac:	4649      	mov	r1, r9
 80065ae:	4638      	mov	r0, r7
 80065b0:	47c0      	blx	r8
 80065b2:	3001      	adds	r0, #1
 80065b4:	d01e      	beq.n	80065f4 <_printf_common+0xa4>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	68e5      	ldr	r5, [r4, #12]
 80065ba:	6832      	ldr	r2, [r6, #0]
 80065bc:	f003 0306 	and.w	r3, r3, #6
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	bf08      	it	eq
 80065c4:	1aad      	subeq	r5, r5, r2
 80065c6:	68a3      	ldr	r3, [r4, #8]
 80065c8:	6922      	ldr	r2, [r4, #16]
 80065ca:	bf0c      	ite	eq
 80065cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d0:	2500      	movne	r5, #0
 80065d2:	4293      	cmp	r3, r2
 80065d4:	bfc4      	itt	gt
 80065d6:	1a9b      	subgt	r3, r3, r2
 80065d8:	18ed      	addgt	r5, r5, r3
 80065da:	2600      	movs	r6, #0
 80065dc:	341a      	adds	r4, #26
 80065de:	42b5      	cmp	r5, r6
 80065e0:	d11a      	bne.n	8006618 <_printf_common+0xc8>
 80065e2:	2000      	movs	r0, #0
 80065e4:	e008      	b.n	80065f8 <_printf_common+0xa8>
 80065e6:	2301      	movs	r3, #1
 80065e8:	4652      	mov	r2, sl
 80065ea:	4649      	mov	r1, r9
 80065ec:	4638      	mov	r0, r7
 80065ee:	47c0      	blx	r8
 80065f0:	3001      	adds	r0, #1
 80065f2:	d103      	bne.n	80065fc <_printf_common+0xac>
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fc:	3501      	adds	r5, #1
 80065fe:	e7c6      	b.n	800658e <_printf_common+0x3e>
 8006600:	18e1      	adds	r1, r4, r3
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	2030      	movs	r0, #48	; 0x30
 8006606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800660a:	4422      	add	r2, r4
 800660c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006614:	3302      	adds	r3, #2
 8006616:	e7c7      	b.n	80065a8 <_printf_common+0x58>
 8006618:	2301      	movs	r3, #1
 800661a:	4622      	mov	r2, r4
 800661c:	4649      	mov	r1, r9
 800661e:	4638      	mov	r0, r7
 8006620:	47c0      	blx	r8
 8006622:	3001      	adds	r0, #1
 8006624:	d0e6      	beq.n	80065f4 <_printf_common+0xa4>
 8006626:	3601      	adds	r6, #1
 8006628:	e7d9      	b.n	80065de <_printf_common+0x8e>
	...

0800662c <_printf_i>:
 800662c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	7e0f      	ldrb	r7, [r1, #24]
 8006632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006634:	2f78      	cmp	r7, #120	; 0x78
 8006636:	4691      	mov	r9, r2
 8006638:	4680      	mov	r8, r0
 800663a:	460c      	mov	r4, r1
 800663c:	469a      	mov	sl, r3
 800663e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006642:	d807      	bhi.n	8006654 <_printf_i+0x28>
 8006644:	2f62      	cmp	r7, #98	; 0x62
 8006646:	d80a      	bhi.n	800665e <_printf_i+0x32>
 8006648:	2f00      	cmp	r7, #0
 800664a:	f000 80d8 	beq.w	80067fe <_printf_i+0x1d2>
 800664e:	2f58      	cmp	r7, #88	; 0x58
 8006650:	f000 80a3 	beq.w	800679a <_printf_i+0x16e>
 8006654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800665c:	e03a      	b.n	80066d4 <_printf_i+0xa8>
 800665e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006662:	2b15      	cmp	r3, #21
 8006664:	d8f6      	bhi.n	8006654 <_printf_i+0x28>
 8006666:	a101      	add	r1, pc, #4	; (adr r1, 800666c <_printf_i+0x40>)
 8006668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800666c:	080066c5 	.word	0x080066c5
 8006670:	080066d9 	.word	0x080066d9
 8006674:	08006655 	.word	0x08006655
 8006678:	08006655 	.word	0x08006655
 800667c:	08006655 	.word	0x08006655
 8006680:	08006655 	.word	0x08006655
 8006684:	080066d9 	.word	0x080066d9
 8006688:	08006655 	.word	0x08006655
 800668c:	08006655 	.word	0x08006655
 8006690:	08006655 	.word	0x08006655
 8006694:	08006655 	.word	0x08006655
 8006698:	080067e5 	.word	0x080067e5
 800669c:	08006709 	.word	0x08006709
 80066a0:	080067c7 	.word	0x080067c7
 80066a4:	08006655 	.word	0x08006655
 80066a8:	08006655 	.word	0x08006655
 80066ac:	08006807 	.word	0x08006807
 80066b0:	08006655 	.word	0x08006655
 80066b4:	08006709 	.word	0x08006709
 80066b8:	08006655 	.word	0x08006655
 80066bc:	08006655 	.word	0x08006655
 80066c0:	080067cf 	.word	0x080067cf
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	1d1a      	adds	r2, r3, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	602a      	str	r2, [r5, #0]
 80066cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0a3      	b.n	8006820 <_printf_i+0x1f4>
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	6829      	ldr	r1, [r5, #0]
 80066dc:	0606      	lsls	r6, r0, #24
 80066de:	f101 0304 	add.w	r3, r1, #4
 80066e2:	d50a      	bpl.n	80066fa <_printf_i+0xce>
 80066e4:	680e      	ldr	r6, [r1, #0]
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	2e00      	cmp	r6, #0
 80066ea:	da03      	bge.n	80066f4 <_printf_i+0xc8>
 80066ec:	232d      	movs	r3, #45	; 0x2d
 80066ee:	4276      	negs	r6, r6
 80066f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f4:	485e      	ldr	r0, [pc, #376]	; (8006870 <_printf_i+0x244>)
 80066f6:	230a      	movs	r3, #10
 80066f8:	e019      	b.n	800672e <_printf_i+0x102>
 80066fa:	680e      	ldr	r6, [r1, #0]
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006702:	bf18      	it	ne
 8006704:	b236      	sxthne	r6, r6
 8006706:	e7ef      	b.n	80066e8 <_printf_i+0xbc>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	6820      	ldr	r0, [r4, #0]
 800670c:	1d19      	adds	r1, r3, #4
 800670e:	6029      	str	r1, [r5, #0]
 8006710:	0601      	lsls	r1, r0, #24
 8006712:	d501      	bpl.n	8006718 <_printf_i+0xec>
 8006714:	681e      	ldr	r6, [r3, #0]
 8006716:	e002      	b.n	800671e <_printf_i+0xf2>
 8006718:	0646      	lsls	r6, r0, #25
 800671a:	d5fb      	bpl.n	8006714 <_printf_i+0xe8>
 800671c:	881e      	ldrh	r6, [r3, #0]
 800671e:	4854      	ldr	r0, [pc, #336]	; (8006870 <_printf_i+0x244>)
 8006720:	2f6f      	cmp	r7, #111	; 0x6f
 8006722:	bf0c      	ite	eq
 8006724:	2308      	moveq	r3, #8
 8006726:	230a      	movne	r3, #10
 8006728:	2100      	movs	r1, #0
 800672a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800672e:	6865      	ldr	r5, [r4, #4]
 8006730:	60a5      	str	r5, [r4, #8]
 8006732:	2d00      	cmp	r5, #0
 8006734:	bfa2      	ittt	ge
 8006736:	6821      	ldrge	r1, [r4, #0]
 8006738:	f021 0104 	bicge.w	r1, r1, #4
 800673c:	6021      	strge	r1, [r4, #0]
 800673e:	b90e      	cbnz	r6, 8006744 <_printf_i+0x118>
 8006740:	2d00      	cmp	r5, #0
 8006742:	d04d      	beq.n	80067e0 <_printf_i+0x1b4>
 8006744:	4615      	mov	r5, r2
 8006746:	fbb6 f1f3 	udiv	r1, r6, r3
 800674a:	fb03 6711 	mls	r7, r3, r1, r6
 800674e:	5dc7      	ldrb	r7, [r0, r7]
 8006750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006754:	4637      	mov	r7, r6
 8006756:	42bb      	cmp	r3, r7
 8006758:	460e      	mov	r6, r1
 800675a:	d9f4      	bls.n	8006746 <_printf_i+0x11a>
 800675c:	2b08      	cmp	r3, #8
 800675e:	d10b      	bne.n	8006778 <_printf_i+0x14c>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	07de      	lsls	r6, r3, #31
 8006764:	d508      	bpl.n	8006778 <_printf_i+0x14c>
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	6861      	ldr	r1, [r4, #4]
 800676a:	4299      	cmp	r1, r3
 800676c:	bfde      	ittt	le
 800676e:	2330      	movle	r3, #48	; 0x30
 8006770:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006774:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006778:	1b52      	subs	r2, r2, r5
 800677a:	6122      	str	r2, [r4, #16]
 800677c:	f8cd a000 	str.w	sl, [sp]
 8006780:	464b      	mov	r3, r9
 8006782:	aa03      	add	r2, sp, #12
 8006784:	4621      	mov	r1, r4
 8006786:	4640      	mov	r0, r8
 8006788:	f7ff fee2 	bl	8006550 <_printf_common>
 800678c:	3001      	adds	r0, #1
 800678e:	d14c      	bne.n	800682a <_printf_i+0x1fe>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006794:	b004      	add	sp, #16
 8006796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679a:	4835      	ldr	r0, [pc, #212]	; (8006870 <_printf_i+0x244>)
 800679c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067a0:	6829      	ldr	r1, [r5, #0]
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80067a8:	6029      	str	r1, [r5, #0]
 80067aa:	061d      	lsls	r5, r3, #24
 80067ac:	d514      	bpl.n	80067d8 <_printf_i+0x1ac>
 80067ae:	07df      	lsls	r7, r3, #31
 80067b0:	bf44      	itt	mi
 80067b2:	f043 0320 	orrmi.w	r3, r3, #32
 80067b6:	6023      	strmi	r3, [r4, #0]
 80067b8:	b91e      	cbnz	r6, 80067c2 <_printf_i+0x196>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	f023 0320 	bic.w	r3, r3, #32
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	2310      	movs	r3, #16
 80067c4:	e7b0      	b.n	8006728 <_printf_i+0xfc>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	f043 0320 	orr.w	r3, r3, #32
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	2378      	movs	r3, #120	; 0x78
 80067d0:	4828      	ldr	r0, [pc, #160]	; (8006874 <_printf_i+0x248>)
 80067d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067d6:	e7e3      	b.n	80067a0 <_printf_i+0x174>
 80067d8:	0659      	lsls	r1, r3, #25
 80067da:	bf48      	it	mi
 80067dc:	b2b6      	uxthmi	r6, r6
 80067de:	e7e6      	b.n	80067ae <_printf_i+0x182>
 80067e0:	4615      	mov	r5, r2
 80067e2:	e7bb      	b.n	800675c <_printf_i+0x130>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	6826      	ldr	r6, [r4, #0]
 80067e8:	6961      	ldr	r1, [r4, #20]
 80067ea:	1d18      	adds	r0, r3, #4
 80067ec:	6028      	str	r0, [r5, #0]
 80067ee:	0635      	lsls	r5, r6, #24
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	d501      	bpl.n	80067f8 <_printf_i+0x1cc>
 80067f4:	6019      	str	r1, [r3, #0]
 80067f6:	e002      	b.n	80067fe <_printf_i+0x1d2>
 80067f8:	0670      	lsls	r0, r6, #25
 80067fa:	d5fb      	bpl.n	80067f4 <_printf_i+0x1c8>
 80067fc:	8019      	strh	r1, [r3, #0]
 80067fe:	2300      	movs	r3, #0
 8006800:	6123      	str	r3, [r4, #16]
 8006802:	4615      	mov	r5, r2
 8006804:	e7ba      	b.n	800677c <_printf_i+0x150>
 8006806:	682b      	ldr	r3, [r5, #0]
 8006808:	1d1a      	adds	r2, r3, #4
 800680a:	602a      	str	r2, [r5, #0]
 800680c:	681d      	ldr	r5, [r3, #0]
 800680e:	6862      	ldr	r2, [r4, #4]
 8006810:	2100      	movs	r1, #0
 8006812:	4628      	mov	r0, r5
 8006814:	f7f9 fcec 	bl	80001f0 <memchr>
 8006818:	b108      	cbz	r0, 800681e <_printf_i+0x1f2>
 800681a:	1b40      	subs	r0, r0, r5
 800681c:	6060      	str	r0, [r4, #4]
 800681e:	6863      	ldr	r3, [r4, #4]
 8006820:	6123      	str	r3, [r4, #16]
 8006822:	2300      	movs	r3, #0
 8006824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006828:	e7a8      	b.n	800677c <_printf_i+0x150>
 800682a:	6923      	ldr	r3, [r4, #16]
 800682c:	462a      	mov	r2, r5
 800682e:	4649      	mov	r1, r9
 8006830:	4640      	mov	r0, r8
 8006832:	47d0      	blx	sl
 8006834:	3001      	adds	r0, #1
 8006836:	d0ab      	beq.n	8006790 <_printf_i+0x164>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	079b      	lsls	r3, r3, #30
 800683c:	d413      	bmi.n	8006866 <_printf_i+0x23a>
 800683e:	68e0      	ldr	r0, [r4, #12]
 8006840:	9b03      	ldr	r3, [sp, #12]
 8006842:	4298      	cmp	r0, r3
 8006844:	bfb8      	it	lt
 8006846:	4618      	movlt	r0, r3
 8006848:	e7a4      	b.n	8006794 <_printf_i+0x168>
 800684a:	2301      	movs	r3, #1
 800684c:	4632      	mov	r2, r6
 800684e:	4649      	mov	r1, r9
 8006850:	4640      	mov	r0, r8
 8006852:	47d0      	blx	sl
 8006854:	3001      	adds	r0, #1
 8006856:	d09b      	beq.n	8006790 <_printf_i+0x164>
 8006858:	3501      	adds	r5, #1
 800685a:	68e3      	ldr	r3, [r4, #12]
 800685c:	9903      	ldr	r1, [sp, #12]
 800685e:	1a5b      	subs	r3, r3, r1
 8006860:	42ab      	cmp	r3, r5
 8006862:	dcf2      	bgt.n	800684a <_printf_i+0x21e>
 8006864:	e7eb      	b.n	800683e <_printf_i+0x212>
 8006866:	2500      	movs	r5, #0
 8006868:	f104 0619 	add.w	r6, r4, #25
 800686c:	e7f5      	b.n	800685a <_printf_i+0x22e>
 800686e:	bf00      	nop
 8006870:	08006dd5 	.word	0x08006dd5
 8006874:	08006de6 	.word	0x08006de6

08006878 <_sbrk_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4d06      	ldr	r5, [pc, #24]	; (8006894 <_sbrk_r+0x1c>)
 800687c:	2300      	movs	r3, #0
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fa fc5c 	bl	8001140 <_sbrk>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_sbrk_r+0x1a>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_sbrk_r+0x1a>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	20000750 	.word	0x20000750

08006898 <__sread>:
 8006898:	b510      	push	{r4, lr}
 800689a:	460c      	mov	r4, r1
 800689c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a0:	f000 f8ea 	bl	8006a78 <_read_r>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	bfab      	itete	ge
 80068a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068aa:	89a3      	ldrhlt	r3, [r4, #12]
 80068ac:	181b      	addge	r3, r3, r0
 80068ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068b2:	bfac      	ite	ge
 80068b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068b6:	81a3      	strhlt	r3, [r4, #12]
 80068b8:	bd10      	pop	{r4, pc}

080068ba <__swrite>:
 80068ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068be:	461f      	mov	r7, r3
 80068c0:	898b      	ldrh	r3, [r1, #12]
 80068c2:	05db      	lsls	r3, r3, #23
 80068c4:	4605      	mov	r5, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	4616      	mov	r6, r2
 80068ca:	d505      	bpl.n	80068d8 <__swrite+0x1e>
 80068cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d0:	2302      	movs	r3, #2
 80068d2:	2200      	movs	r2, #0
 80068d4:	f000 f868 	bl	80069a8 <_lseek_r>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e2:	81a3      	strh	r3, [r4, #12]
 80068e4:	4632      	mov	r2, r6
 80068e6:	463b      	mov	r3, r7
 80068e8:	4628      	mov	r0, r5
 80068ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ee:	f000 b817 	b.w	8006920 <_write_r>

080068f2 <__sseek>:
 80068f2:	b510      	push	{r4, lr}
 80068f4:	460c      	mov	r4, r1
 80068f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fa:	f000 f855 	bl	80069a8 <_lseek_r>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	bf15      	itete	ne
 8006904:	6560      	strne	r0, [r4, #84]	; 0x54
 8006906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800690a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800690e:	81a3      	strheq	r3, [r4, #12]
 8006910:	bf18      	it	ne
 8006912:	81a3      	strhne	r3, [r4, #12]
 8006914:	bd10      	pop	{r4, pc}

08006916 <__sclose>:
 8006916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691a:	f000 b813 	b.w	8006944 <_close_r>
	...

08006920 <_write_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d07      	ldr	r5, [pc, #28]	; (8006940 <_write_r+0x20>)
 8006924:	4604      	mov	r4, r0
 8006926:	4608      	mov	r0, r1
 8006928:	4611      	mov	r1, r2
 800692a:	2200      	movs	r2, #0
 800692c:	602a      	str	r2, [r5, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f7fa fbb5 	bl	800109e <_write>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_write_r+0x1e>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_write_r+0x1e>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	20000750 	.word	0x20000750

08006944 <_close_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4d06      	ldr	r5, [pc, #24]	; (8006960 <_close_r+0x1c>)
 8006948:	2300      	movs	r3, #0
 800694a:	4604      	mov	r4, r0
 800694c:	4608      	mov	r0, r1
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	f7fa fbc1 	bl	80010d6 <_close>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_close_r+0x1a>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	b103      	cbz	r3, 800695e <_close_r+0x1a>
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20000750 	.word	0x20000750

08006964 <_fstat_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4d07      	ldr	r5, [pc, #28]	; (8006984 <_fstat_r+0x20>)
 8006968:	2300      	movs	r3, #0
 800696a:	4604      	mov	r4, r0
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	602b      	str	r3, [r5, #0]
 8006972:	f7fa fbbc 	bl	80010ee <_fstat>
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	d102      	bne.n	8006980 <_fstat_r+0x1c>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	b103      	cbz	r3, 8006980 <_fstat_r+0x1c>
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	bd38      	pop	{r3, r4, r5, pc}
 8006982:	bf00      	nop
 8006984:	20000750 	.word	0x20000750

08006988 <_isatty_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d06      	ldr	r5, [pc, #24]	; (80069a4 <_isatty_r+0x1c>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fa fbbb 	bl	800110e <_isatty>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_isatty_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_isatty_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	20000750 	.word	0x20000750

080069a8 <_lseek_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4d07      	ldr	r5, [pc, #28]	; (80069c8 <_lseek_r+0x20>)
 80069ac:	4604      	mov	r4, r0
 80069ae:	4608      	mov	r0, r1
 80069b0:	4611      	mov	r1, r2
 80069b2:	2200      	movs	r2, #0
 80069b4:	602a      	str	r2, [r5, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	f7fa fbb4 	bl	8001124 <_lseek>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d102      	bne.n	80069c6 <_lseek_r+0x1e>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	b103      	cbz	r3, 80069c6 <_lseek_r+0x1e>
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	20000750 	.word	0x20000750

080069cc <memmove>:
 80069cc:	4288      	cmp	r0, r1
 80069ce:	b510      	push	{r4, lr}
 80069d0:	eb01 0402 	add.w	r4, r1, r2
 80069d4:	d902      	bls.n	80069dc <memmove+0x10>
 80069d6:	4284      	cmp	r4, r0
 80069d8:	4623      	mov	r3, r4
 80069da:	d807      	bhi.n	80069ec <memmove+0x20>
 80069dc:	1e43      	subs	r3, r0, #1
 80069de:	42a1      	cmp	r1, r4
 80069e0:	d008      	beq.n	80069f4 <memmove+0x28>
 80069e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ea:	e7f8      	b.n	80069de <memmove+0x12>
 80069ec:	4402      	add	r2, r0
 80069ee:	4601      	mov	r1, r0
 80069f0:	428a      	cmp	r2, r1
 80069f2:	d100      	bne.n	80069f6 <memmove+0x2a>
 80069f4:	bd10      	pop	{r4, pc}
 80069f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069fe:	e7f7      	b.n	80069f0 <memmove+0x24>

08006a00 <__malloc_lock>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__malloc_lock+0x8>)
 8006a02:	f7ff b9a7 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8006a06:	bf00      	nop
 8006a08:	20000744 	.word	0x20000744

08006a0c <__malloc_unlock>:
 8006a0c:	4801      	ldr	r0, [pc, #4]	; (8006a14 <__malloc_unlock+0x8>)
 8006a0e:	f7ff b9a2 	b.w	8005d56 <__retarget_lock_release_recursive>
 8006a12:	bf00      	nop
 8006a14:	20000744 	.word	0x20000744

08006a18 <_realloc_r>:
 8006a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	4614      	mov	r4, r2
 8006a20:	460e      	mov	r6, r1
 8006a22:	b921      	cbnz	r1, 8006a2e <_realloc_r+0x16>
 8006a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a28:	4611      	mov	r1, r2
 8006a2a:	f7ff ba67 	b.w	8005efc <_malloc_r>
 8006a2e:	b92a      	cbnz	r2, 8006a3c <_realloc_r+0x24>
 8006a30:	f7ff f9f8 	bl	8005e24 <_free_r>
 8006a34:	4625      	mov	r5, r4
 8006a36:	4628      	mov	r0, r5
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3c:	f000 f82e 	bl	8006a9c <_malloc_usable_size_r>
 8006a40:	4284      	cmp	r4, r0
 8006a42:	4607      	mov	r7, r0
 8006a44:	d802      	bhi.n	8006a4c <_realloc_r+0x34>
 8006a46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a4a:	d812      	bhi.n	8006a72 <_realloc_r+0x5a>
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7ff fa54 	bl	8005efc <_malloc_r>
 8006a54:	4605      	mov	r5, r0
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d0ed      	beq.n	8006a36 <_realloc_r+0x1e>
 8006a5a:	42bc      	cmp	r4, r7
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	4631      	mov	r1, r6
 8006a60:	bf28      	it	cs
 8006a62:	463a      	movcs	r2, r7
 8006a64:	f7fe fe20 	bl	80056a8 <memcpy>
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	f7ff f9da 	bl	8005e24 <_free_r>
 8006a70:	e7e1      	b.n	8006a36 <_realloc_r+0x1e>
 8006a72:	4635      	mov	r5, r6
 8006a74:	e7df      	b.n	8006a36 <_realloc_r+0x1e>
	...

08006a78 <_read_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	; (8006a98 <_read_r+0x20>)
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	602a      	str	r2, [r5, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fa faec 	bl	8001064 <_read>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_read_r+0x1e>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_read_r+0x1e>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	20000750 	.word	0x20000750

08006a9c <_malloc_usable_size_r>:
 8006a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa0:	1f18      	subs	r0, r3, #4
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bfbc      	itt	lt
 8006aa6:	580b      	ldrlt	r3, [r1, r0]
 8006aa8:	18c0      	addlt	r0, r0, r3
 8006aaa:	4770      	bx	lr

08006aac <_init>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	bf00      	nop
 8006ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab2:	bc08      	pop	{r3}
 8006ab4:	469e      	mov	lr, r3
 8006ab6:	4770      	bx	lr

08006ab8 <_fini>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	bf00      	nop
 8006abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006abe:	bc08      	pop	{r3}
 8006ac0:	469e      	mov	lr, r3
 8006ac2:	4770      	bx	lr
