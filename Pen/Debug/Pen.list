
Pen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004660  08004660  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004668  08004668  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  080046e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080046e0  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b32e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000198b  00000000  00000000  0002b3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002cd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002d700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c91  00000000  00000000  0002dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4ee  00000000  00000000  00056c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f73f4  00000000  00000000  00062177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015956b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee8  00000000  00000000  001595bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004548 	.word	0x08004548

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004548 	.word	0x08004548

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t MSG[7] = {'h', 'e', 'l', 'l', 'o', '\r', '\n'};
 800059a:	4a22      	ldr	r2, [pc, #136]	; (8000624 <main+0x90>)
 800059c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	3304      	adds	r3, #4
 80005a8:	8019      	strh	r1, [r3, #0]
 80005aa:	3302      	adds	r3, #2
 80005ac:	0c0a      	lsrs	r2, r1, #16
 80005ae:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[35] = {'\0'};
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	221f      	movs	r2, #31
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 ff4d 	bl	800345c <memset>
	  uint8_t X = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fb15 	bl	8000bf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f834 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8b6 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f884 	bl	80006e0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOB, LD2_Blue_Pin);
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0x94>)
 80005dc:	f000 fe34 	bl	8001248 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);
 80005e0:	2064      	movs	r0, #100	; 0x64
 80005e2:	f000 fb7d 	bl	8000ce0 <HAL_Delay>
	  printf("HELLO\r\n");
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <main+0x98>)
 80005e8:	f002 ffae 	bl	8003548 <puts>

	  sprintf(buffer, "Hello! X = %d\r\n", X);
 80005ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	490f      	ldr	r1, [pc, #60]	; (8000630 <main+0x9c>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 ffaf 	bl	8003558 <siprintf>
	  HAL_Delay(1000);
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f000 fb6f 	bl	8000ce0 <HAL_Delay>
	   HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
 8000602:	1d39      	adds	r1, r7, #4
 8000604:	2364      	movs	r3, #100	; 0x64
 8000606:	2223      	movs	r2, #35	; 0x23
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <main+0xa0>)
 800060a:	f002 fa01 	bl	8002a10 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 800060e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000612:	f000 fb65 	bl	8000ce0 <HAL_Delay>
	   X++;
 8000616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800061a:	3301      	adds	r3, #1
 800061c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  HAL_GPIO_TogglePin (GPIOB, LD2_Blue_Pin);
 8000620:	e7da      	b.n	80005d8 <main+0x44>
 8000622:	bf00      	nop
 8000624:	08004578 	.word	0x08004578
 8000628:	48000400 	.word	0x48000400
 800062c:	08004560 	.word	0x08004560
 8000630:	08004568 	.word	0x08004568
 8000634:	2000008c 	.word	0x2000008c

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	; 0x58
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2244      	movs	r2, #68	; 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 ff08 	bl	800345c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065e:	f000 fe1b 	bl	8001298 <HAL_PWREx_ControlVoltageScaling>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000668:	f000 f936 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800066c:	2310      	movs	r3, #16
 800066e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000678:	2360      	movs	r3, #96	; 0x60
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000680:	2301      	movs	r3, #1
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000688:	2310      	movs	r3, #16
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fe61 	bl	8001364 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006a8:	f000 f916 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa66 	bl	8001b98 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d2:	f000 f901 	bl	80008d8 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3758      	adds	r7, #88	; 0x58
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MX_USART2_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000724:	f002 f926 	bl	8002974 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 f8d3 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000008c 	.word	0x2000008c
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b53      	ldr	r3, [pc, #332]	; (80008a4 <MX_GPIO_Init+0x164>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a52      	ldr	r2, [pc, #328]	; (80008a4 <MX_GPIO_Init+0x164>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b50      	ldr	r3, [pc, #320]	; (80008a4 <MX_GPIO_Init+0x164>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b4d      	ldr	r3, [pc, #308]	; (80008a4 <MX_GPIO_Init+0x164>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a4c      	ldr	r2, [pc, #304]	; (80008a4 <MX_GPIO_Init+0x164>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b4a      	ldr	r3, [pc, #296]	; (80008a4 <MX_GPIO_Init+0x164>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <MX_GPIO_Init+0x164>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <MX_GPIO_Init+0x164>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <MX_GPIO_Init+0x164>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <MX_GPIO_Init+0x164>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a40      	ldr	r2, [pc, #256]	; (80008a4 <MX_GPIO_Init+0x164>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <MX_GPIO_Init+0x164>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b6:	4b3b      	ldr	r3, [pc, #236]	; (80008a4 <MX_GPIO_Init+0x164>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a3a      	ldr	r2, [pc, #232]	; (80008a4 <MX_GPIO_Init+0x164>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <MX_GPIO_Init+0x164>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80007ce:	f000 fdb9 	bl	8001344 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007d8:	4833      	ldr	r0, [pc, #204]	; (80008a8 <MX_GPIO_Init+0x168>)
 80007da:	f000 fd1d 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2140      	movs	r1, #64	; 0x40
 80007e2:	4832      	ldr	r0, [pc, #200]	; (80008ac <MX_GPIO_Init+0x16c>)
 80007e4:	f000 fd18 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	482c      	ldr	r0, [pc, #176]	; (80008b0 <MX_GPIO_Init+0x170>)
 8000800:	f000 fb78 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Blue_Pin;
 8000804:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4822      	ldr	r0, [pc, #136]	; (80008a8 <MX_GPIO_Init+0x168>)
 800081e:	f000 fb69 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000822:	2320      	movs	r3, #32
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	481d      	ldr	r0, [pc, #116]	; (80008ac <MX_GPIO_Init+0x16c>)
 8000836:	f000 fb5d 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4816      	ldr	r0, [pc, #88]	; (80008ac <MX_GPIO_Init+0x16c>)
 8000852:	f000 fb4f 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000856:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000868:	2308      	movs	r3, #8
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_GPIO_Init+0x16c>)
 8000874:	f000 fb3e 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000878:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800088a:	230a      	movs	r3, #10
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f000 fb2c 	bl	8000ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000400 	.word	0x48000400
 80008ac:	48001800 	.word	0x48001800
 80008b0:	48000800 	.word	0x48000800

080008b4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80008bc:	1d39      	adds	r1, r7, #4
 80008be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c2:	2201      	movs	r2, #1
 80008c4:	4803      	ldr	r0, [pc, #12]	; (80008d4 <__io_putchar+0x20>)
 80008c6:	f002 f8a3 	bl	8002a10 <HAL_UART_Transmit>

  return ch;
 80008ca:	687b      	ldr	r3, [r7, #4]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000008c 	.word	0x2000008c

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	; 0x60
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0ac      	sub	sp, #176	; 0xb0
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	228c      	movs	r2, #140	; 0x8c
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fd85 	bl	800345c <memset>
  if(huart->Instance==USART2)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a21      	ldr	r2, [pc, #132]	; (80009dc <HAL_UART_MspInit+0xb0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d13b      	bne.n	80009d4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000960:	2300      	movs	r3, #0
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fb39 	bl	8001fe0 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000974:	f7ff ffb0 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_UART_MspInit+0xb4>)
 800097a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097c:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <HAL_UART_MspInit+0xb4>)
 800097e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000982:	6593      	str	r3, [r2, #88]	; 0x58
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_UART_MspInit+0xb4>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_UART_MspInit+0xb4>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <HAL_UART_MspInit+0xb4>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_UART_MspInit+0xb4>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a8:	230c      	movs	r3, #12
 80009aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c0:	2307      	movs	r3, #7
 80009c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f000 fa90 	bl	8000ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	37b0      	adds	r7, #176	; 0xb0
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40004400 	.word	0x40004400
 80009e0:	40021000 	.word	0x40021000

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f936 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	e00a      	b.n	8000a60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4a:	f3af 8000 	nop.w
 8000a4e:	4601      	mov	r1, r0
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	b2ca      	uxtb	r2, r1
 8000a58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbf0      	blt.n	8000a4a <_read+0x12>
  }

  return len;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e009      	b.n	8000a98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	60ba      	str	r2, [r7, #8]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff11 	bl	80008b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf1      	blt.n	8000a84 <_write+0x12>
  }
  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_close>:

int _close(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_isatty>:

int _isatty(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f002 fc60 	bl	8003408 <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20050000 	.word	0x20050000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	20000110 	.word	0x20000110
 8000b7c:	20000128 	.word	0x20000128

08000b80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba8:	f7ff ffea 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	; (8000be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <LoopForever+0xe>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	; (8000bf0 <LoopForever+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f002 fc1f 	bl	8003414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd6:	f7ff fcdd 	bl	8000594 <main>

08000bda <LoopForever>:

LoopForever:
    b LoopForever
 8000bda:	e7fe      	b.n	8000bda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bdc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000be8:	08004670 	.word	0x08004670
  ldr r2, =_sbss
 8000bec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf0:	20000128 	.word	0x20000128

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>

08000bf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f943 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f80e 	bl	8000c28 <HAL_InitTick>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	e001      	b.n	8000c1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c18:	f7ff fe64 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_InitTick+0x6c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d023      	beq.n	8000c84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_InitTick+0x70>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_InitTick+0x6c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f941 	bl	8000eda <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d10f      	bne.n	8000c7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d809      	bhi.n	8000c78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 f919 	bl	8000ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_InitTick+0x74>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e007      	b.n	8000c88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
 8000c7c:	e004      	b.n	8000c88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	e001      	b.n	8000c88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000114 	.word	0x20000114

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000114 	.word	0x20000114

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff47 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff5c 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffb0 	bl	8000e48 <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e166      	b.n	80011d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8158 	beq.w	80011cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d005      	beq.n	8000f34 <HAL_GPIO_Init+0x40>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d130      	bne.n	8000f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	f003 0201 	and.w	r2, r3, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d017      	beq.n	8000fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d123      	bne.n	8001026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0203 	and.w	r2, r3, #3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 80b2 	beq.w	80011cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001068:	4b61      	ldr	r3, [pc, #388]	; (80011f0 <HAL_GPIO_Init+0x2fc>)
 800106a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106c:	4a60      	ldr	r2, [pc, #384]	; (80011f0 <HAL_GPIO_Init+0x2fc>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6613      	str	r3, [r2, #96]	; 0x60
 8001074:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <HAL_GPIO_Init+0x2fc>)
 8001076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001080:	4a5c      	ldr	r2, [pc, #368]	; (80011f4 <HAL_GPIO_Init+0x300>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010aa:	d02b      	beq.n	8001104 <HAL_GPIO_Init+0x210>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_GPIO_Init+0x304>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d025      	beq.n	8001100 <HAL_GPIO_Init+0x20c>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a51      	ldr	r2, [pc, #324]	; (80011fc <HAL_GPIO_Init+0x308>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d01f      	beq.n	80010fc <HAL_GPIO_Init+0x208>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a50      	ldr	r2, [pc, #320]	; (8001200 <HAL_GPIO_Init+0x30c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d019      	beq.n	80010f8 <HAL_GPIO_Init+0x204>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <HAL_GPIO_Init+0x310>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d013      	beq.n	80010f4 <HAL_GPIO_Init+0x200>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <HAL_GPIO_Init+0x314>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00d      	beq.n	80010f0 <HAL_GPIO_Init+0x1fc>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a4d      	ldr	r2, [pc, #308]	; (800120c <HAL_GPIO_Init+0x318>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x1f8>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_GPIO_Init+0x31c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d101      	bne.n	80010e8 <HAL_GPIO_Init+0x1f4>
 80010e4:	2307      	movs	r3, #7
 80010e6:	e00e      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010e8:	2308      	movs	r3, #8
 80010ea:	e00c      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010ec:	2306      	movs	r3, #6
 80010ee:	e00a      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010f0:	2305      	movs	r3, #5
 80010f2:	e008      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010f4:	2304      	movs	r3, #4
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010f8:	2303      	movs	r3, #3
 80010fa:	e004      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e002      	b.n	8001106 <HAL_GPIO_Init+0x212>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_GPIO_Init+0x212>
 8001104:	2300      	movs	r3, #0
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	f002 0203 	and.w	r2, r2, #3
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	4093      	lsls	r3, r2
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001116:	4937      	ldr	r1, [pc, #220]	; (80011f4 <HAL_GPIO_Init+0x300>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001124:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_GPIO_Init+0x320>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001148:	4a32      	ldr	r2, [pc, #200]	; (8001214 <HAL_GPIO_Init+0x320>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <HAL_GPIO_Init+0x320>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001172:	4a28      	ldr	r2, [pc, #160]	; (8001214 <HAL_GPIO_Init+0x320>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_GPIO_Init+0x320>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_GPIO_Init+0x320>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_GPIO_Init+0x320>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <HAL_GPIO_Init+0x320>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f47f ae91 	bne.w	8000f04 <HAL_GPIO_Init+0x10>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000
 80011f8:	48000400 	.word	0x48000400
 80011fc:	48000800 	.word	0x48000800
 8001200:	48000c00 	.word	0x48000c00
 8001204:	48001000 	.word	0x48001000
 8001208:	48001400 	.word	0x48001400
 800120c:	48001800 	.word	0x48001800
 8001210:	48001c00 	.word	0x48001c00
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001234:	e002      	b.n	800123c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4013      	ands	r3, r2
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43d9      	mvns	r1, r3
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	400b      	ands	r3, r1
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_PWREx_GetVoltageRange+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40007000 	.word	0x40007000

08001298 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a6:	d130      	bne.n	800130a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b4:	d038      	beq.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2232      	movs	r2, #50	; 0x32
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012dc:	e002      	b.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f0:	d102      	bne.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f2      	bne.n	80012de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001304:	d110      	bne.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e00f      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001316:	d007      	beq.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001326:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40007000 	.word	0x40007000
 800133c:	20000000 	.word	0x20000000
 8001340:	431bde83 	.word	0x431bde83

08001344 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_PWREx_EnableVddIO2+0x1c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_PWREx_EnableVddIO2+0x1c>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001352:	6053      	str	r3, [r2, #4]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40007000 	.word	0x40007000

08001364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f000 bc08 	b.w	8001b88 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001378:	4b96      	ldr	r3, [pc, #600]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001382:	4b94      	ldr	r3, [pc, #592]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80e4 	beq.w	8001562 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4c>
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	f040 808b 	bne.w	80014be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	f040 8087 	bne.w	80014be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b0:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_RCC_OscConfig+0x64>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e3df      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <HAL_RCC_OscConfig+0x7e>
 80013d8:	4b7e      	ldr	r3, [pc, #504]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013e0:	e005      	b.n	80013ee <HAL_RCC_OscConfig+0x8a>
 80013e2:	4b7c      	ldr	r3, [pc, #496]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d223      	bcs.n	800143a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fd92 	bl	8001f20 <RCC_SetFlashLatencyFromMSIRange>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e3c0      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001406:	4b73      	ldr	r3, [pc, #460]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a72      	ldr	r2, [pc, #456]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	496d      	ldr	r1, [pc, #436]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001424:	4b6b      	ldr	r3, [pc, #428]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	4968      	ldr	r1, [pc, #416]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
 8001438:	e025      	b.n	8001486 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143a:	4b66      	ldr	r3, [pc, #408]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a65      	ldr	r2, [pc, #404]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4960      	ldr	r1, [pc, #384]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001458:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	495b      	ldr	r1, [pc, #364]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fd52 	bl	8001f20 <RCC_SetFlashLatencyFromMSIRange>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e380      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001486:	f000 fc87 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 800148a:	4602      	mov	r2, r0
 800148c:	4b51      	ldr	r3, [pc, #324]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	4950      	ldr	r1, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 8001498:	5ccb      	ldrb	r3, [r1, r3]
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	4a4e      	ldr	r2, [pc, #312]	; (80015dc <HAL_RCC_OscConfig+0x278>)
 80014a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014a6:	4b4e      	ldr	r3, [pc, #312]	; (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fbbc 	bl	8000c28 <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d052      	beq.n	8001560 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	e364      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d032      	beq.n	800152c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014c6:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a42      	ldr	r2, [pc, #264]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fbf9 	bl	8000cc8 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014da:	f7ff fbf5 	bl	8000cc8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e34d      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a35      	ldr	r2, [pc, #212]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4930      	ldr	r1, [pc, #192]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	492b      	ldr	r1, [pc, #172]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
 800152a:	e01a      	b.n	8001562 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001538:	f7ff fbc6 	bl	8000cc8 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001540:	f7ff fbc2 	bl	8000cc8 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e31a      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1dc>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d073      	beq.n	8001656 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b08      	cmp	r3, #8
 8001572:	d005      	beq.n	8001580 <HAL_RCC_OscConfig+0x21c>
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2b0c      	cmp	r3, #12
 8001578:	d10e      	bne.n	8001598 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d10b      	bne.n	8001598 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d063      	beq.n	8001654 <HAL_RCC_OscConfig+0x2f0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d15f      	bne.n	8001654 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e2f7      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x24c>
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e025      	b.n	80015fc <HAL_RCC_OscConfig+0x298>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b8:	d114      	bne.n	80015e4 <HAL_RCC_OscConfig+0x280>
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a02      	ldr	r2, [pc, #8]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e013      	b.n	80015fc <HAL_RCC_OscConfig+0x298>
 80015d4:	40021000 	.word	0x40021000
 80015d8:	08004580 	.word	0x08004580
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000004 	.word	0x20000004
 80015e4:	4ba0      	ldr	r3, [pc, #640]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a9f      	ldr	r2, [pc, #636]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b9d      	ldr	r3, [pc, #628]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a9c      	ldr	r2, [pc, #624]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fb60 	bl	8000cc8 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fb5c 	bl	8000cc8 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e2b4      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161e:	4b92      	ldr	r3, [pc, #584]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x2a8>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fb4c 	bl	8000cc8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fb48 	bl	8000cc8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e2a0      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001646:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x2d0>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d060      	beq.n	8001724 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b04      	cmp	r3, #4
 8001666:	d005      	beq.n	8001674 <HAL_RCC_OscConfig+0x310>
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d119      	bne.n	80016a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d116      	bne.n	80016a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001674:	4b7c      	ldr	r3, [pc, #496]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_OscConfig+0x328>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e27d      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168c:	4b76      	ldr	r3, [pc, #472]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	4973      	ldr	r1, [pc, #460]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a0:	e040      	b.n	8001724 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d023      	beq.n	80016f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016aa:	4b6f      	ldr	r3, [pc, #444]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6e      	ldr	r2, [pc, #440]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb07 	bl	8000cc8 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff fb03 	bl	8000cc8 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e25b      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d0:	4b65      	ldr	r3, [pc, #404]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b62      	ldr	r3, [pc, #392]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	495f      	ldr	r1, [pc, #380]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e018      	b.n	8001724 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f2:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a5c      	ldr	r2, [pc, #368]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fae3 	bl	8000cc8 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fadf 	bl	8000cc8 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e237      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001718:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d03c      	beq.n	80017aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01c      	beq.n	8001772 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001738:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173e:	4a4a      	ldr	r2, [pc, #296]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff fabe 	bl	8000cc8 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001750:	f7ff faba 	bl	8000cc8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e212      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 8001764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ef      	beq.n	8001750 <HAL_RCC_OscConfig+0x3ec>
 8001770:	e01b      	b.n	80017aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 8001774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001778:	4a3b      	ldr	r2, [pc, #236]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001782:	f7ff faa1 	bl	8000cc8 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fa9d 	bl	8000cc8 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e1f5      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179c:	4b32      	ldr	r3, [pc, #200]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 800179e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1ef      	bne.n	800178a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80a6 	beq.w	8001904 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10d      	bne.n	80017e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a26      	ldr	r2, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_RCC_OscConfig+0x508>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d118      	bne.n	8001822 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_OscConfig+0x508>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_RCC_OscConfig+0x508>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa64 	bl	8000cc8 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001804:	f7ff fa60 	bl	8000cc8 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1b8      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_RCC_OscConfig+0x508>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_RCC_OscConfig+0x4d8>
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800183a:	e029      	b.n	8001890 <HAL_RCC_OscConfig+0x52c>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d115      	bne.n	8001870 <HAL_RCC_OscConfig+0x50c>
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	4a03      	ldr	r2, [pc, #12]	; (8001868 <HAL_RCC_OscConfig+0x504>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001864:	e014      	b.n	8001890 <HAL_RCC_OscConfig+0x52c>
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40007000 	.word	0x40007000
 8001870:	4b9d      	ldr	r3, [pc, #628]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	4a9c      	ldr	r2, [pc, #624]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001880:	4b99      	ldr	r3, [pc, #612]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a98      	ldr	r2, [pc, #608]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d016      	beq.n	80018c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fa16 	bl	8000cc8 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f7ff fa12 	bl	8000cc8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e168      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b6:	4b8c      	ldr	r3, [pc, #560]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 80018b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ed      	beq.n	80018a0 <HAL_RCC_OscConfig+0x53c>
 80018c4:	e015      	b.n	80018f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff f9ff 	bl	8000cc8 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff f9fb 	bl	8000cc8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e151      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e4:	4b80      	ldr	r3, [pc, #512]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ed      	bne.n	80018ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f2:	7ffb      	ldrb	r3, [r7, #31]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f8:	4b7b      	ldr	r3, [pc, #492]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	4a7a      	ldr	r2, [pc, #488]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 80018fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001902:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b00      	cmp	r3, #0
 800190e:	d03c      	beq.n	800198a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01c      	beq.n	8001952 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001918:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 800191a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800191e:	4a72      	ldr	r2, [pc, #456]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff f9ce 	bl	8000cc8 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001930:	f7ff f9ca 	bl	8000cc8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e122      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001942:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ef      	beq.n	8001930 <HAL_RCC_OscConfig+0x5cc>
 8001950:	e01b      	b.n	800198a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001952:	4b65      	ldr	r3, [pc, #404]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001958:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7ff f9b1 	bl	8000cc8 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800196a:	f7ff f9ad 	bl	8000cc8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e105      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800197c:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 800197e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ef      	bne.n	800196a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80f9 	beq.w	8001b86 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	2b02      	cmp	r3, #2
 800199a:	f040 80cf 	bne.w	8001b3c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800199e:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0203 	and.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d12c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	3b01      	subs	r3, #1
 80019be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d123      	bne.n	8001a0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d11b      	bne.n	8001a0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d113      	bne.n	8001a0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	085b      	lsrs	r3, r3, #1
 80019f0:	3b01      	subs	r3, #1
 80019f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d109      	bne.n	8001a0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d071      	beq.n	8001af0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d068      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a12:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d105      	bne.n	8001a2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a1e:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0ac      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2d      	ldr	r2, [pc, #180]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a3a:	f7ff f945 	bl	8000cc8 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7ff f941 	bl	8000cc8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e099      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f0      	bne.n	8001a42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCC_OscConfig+0x788>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a70:	3a01      	subs	r2, #1
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	4311      	orrs	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a7a:	0212      	lsls	r2, r2, #8
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a82:	0852      	lsrs	r2, r2, #1
 8001a84:	3a01      	subs	r2, #1
 8001a86:	0552      	lsls	r2, r2, #21
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a8e:	0852      	lsrs	r2, r2, #1
 8001a90:	3a01      	subs	r2, #1
 8001a92:	0652      	lsls	r2, r2, #25
 8001a94:	4311      	orrs	r1, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a9a:	06d2      	lsls	r2, r2, #27
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	4912      	ldr	r1, [pc, #72]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001abc:	f7ff f904 	bl	8000cc8 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f900 	bl	8000cc8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e058      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <HAL_RCC_OscConfig+0x784>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae2:	e050      	b.n	8001b86 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e04f      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d144      	bne.n	8001b86 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b14:	f7ff f8d8 	bl	8000cc8 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff f8d4 	bl	8000cc8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e02c      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x7b8>
 8001b3a:	e024      	b.n	8001b86 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d01f      	beq.n	8001b82 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f8bb 	bl	8000cc8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff f8b7 	bl	8000cc8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e00f      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4905      	ldr	r1, [pc, #20]	; (8001b90 <HAL_RCC_OscConfig+0x82c>)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x830>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
 8001b80:	e001      	b.n	8001b86 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	feeefffc 	.word	0xfeeefffc

08001b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0e7      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bac:	4b75      	ldr	r3, [pc, #468]	; (8001d84 <HAL_RCC_ClockConfig+0x1ec>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d910      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b72      	ldr	r3, [pc, #456]	; (8001d84 <HAL_RCC_ClockConfig+0x1ec>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 0207 	bic.w	r2, r3, #7
 8001bc2:	4970      	ldr	r1, [pc, #448]	; (8001d84 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b6e      	ldr	r3, [pc, #440]	; (8001d84 <HAL_RCC_ClockConfig+0x1ec>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0cf      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d010      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d908      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4960      	ldr	r1, [pc, #384]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d04c      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d121      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0a6      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c36:	4b54      	ldr	r3, [pc, #336]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d115      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e09a      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c4e:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e08e      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5e:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e086      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4943      	ldr	r1, [pc, #268]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c80:	f7ff f822 	bl	8000cc8 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7ff f81e 	bl	8000cc8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e06e      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d010      	beq.n	8001cde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d208      	bcs.n	8001cde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	492b      	ldr	r1, [pc, #172]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cde:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d210      	bcs.n	8001d0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_RCC_ClockConfig+0x1ec>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 0207 	bic.w	r2, r3, #7
 8001cf4:	4923      	ldr	r1, [pc, #140]	; (8001d84 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <HAL_RCC_ClockConfig+0x1ec>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e036      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4918      	ldr	r1, [pc, #96]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4910      	ldr	r1, [pc, #64]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d4c:	f000 f824 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	490b      	ldr	r1, [pc, #44]	; (8001d8c <HAL_RCC_ClockConfig+0x1f4>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	4a09      	ldr	r2, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1fc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ff59 	bl	8000c28 <HAL_InitTick>
 8001d76:	4603      	mov	r3, r0
 8001d78:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40022000 	.word	0x40022000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08004580 	.word	0x08004580
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da6:	4b3e      	ldr	r3, [pc, #248]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db0:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x34>
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d121      	bne.n	8001e0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d11e      	bne.n	8001e0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dcc:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dd8:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e005      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001df4:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10d      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d102      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e004      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_RCC_GetSysClockFreq+0x114>)
 8001e1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	2b0c      	cmp	r3, #12
 8001e24:	d134      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d003      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0xac>
 8001e3c:	e005      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e40:	617b      	str	r3, [r7, #20]
      break;
 8001e42:	e005      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_GetSysClockFreq+0x114>)
 8001e46:	617b      	str	r3, [r7, #20]
      break;
 8001e48:	e002      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	617b      	str	r3, [r7, #20]
      break;
 8001e4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	fb03 f202 	mul.w	r2, r3, r2
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	0e5b      	lsrs	r3, r3, #25
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	3301      	adds	r3, #1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e90:	69bb      	ldr	r3, [r7, #24]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08004598 	.word	0x08004598
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	007a1200 	.word	0x007a1200

08001eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08004590 	.word	0x08004590

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ef8:	f7ff ffda 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0adb      	lsrs	r3, r3, #11
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4904      	ldr	r1, [pc, #16]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08004590 	.word	0x08004590

08001f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f38:	f7ff f9a0 	bl	800127c <HAL_PWREx_GetVoltageRange>
 8001f3c:	6178      	str	r0, [r7, #20]
 8001f3e:	e014      	b.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f58:	f7ff f990 	bl	800127c <HAL_PWREx_GetVoltageRange>
 8001f5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f70:	d10b      	bne.n	8001f8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d919      	bls.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f7c:	d902      	bls.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f7e:	2302      	movs	r3, #2
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e013      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f84:	2301      	movs	r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	e010      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d902      	bls.n	8001f96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f90:	2303      	movs	r3, #3
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	e00a      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d102      	bne.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	e004      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b70      	cmp	r3, #112	; 0x70
 8001fa6:	d101      	bne.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 0207 	bic.w	r2, r3, #7
 8001fb4:	4909      	ldr	r1, [pc, #36]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fe8:	2300      	movs	r3, #0
 8001fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fec:	2300      	movs	r3, #0
 8001fee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d041      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002004:	d02a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800200a:	d824      	bhi.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800200c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002010:	d008      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002016:	d81e      	bhi.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800201c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002020:	d010      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002022:	e018      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002024:	4b86      	ldr	r3, [pc, #536]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a85      	ldr	r2, [pc, #532]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002030:	e015      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f000 facd 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 800203e:	4603      	mov	r3, r0
 8002040:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002042:	e00c      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3320      	adds	r3, #32
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fbb6 	bl	80027bc <RCCEx_PLLSAI2_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002054:	e003      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	74fb      	strb	r3, [r7, #19]
      break;
 800205a:	e000      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800205c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10b      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002064:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002072:	4973      	ldr	r1, [pc, #460]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800207a:	e001      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d041      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002090:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002094:	d02a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002096:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800209a:	d824      	bhi.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800209c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020a0:	d008      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020a6:	d81e      	bhi.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d010      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020b2:	e018      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020b4:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a61      	ldr	r2, [pc, #388]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020c0:	e015      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fa85 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 80020ce:	4603      	mov	r3, r0
 80020d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020d2:	e00c      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3320      	adds	r3, #32
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fb6e 	bl	80027bc <RCCEx_PLLSAI2_Config>
 80020e0:	4603      	mov	r3, r0
 80020e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020e4:	e003      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	74fb      	strb	r3, [r7, #19]
      break;
 80020ea:	e000      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020f4:	4b52      	ldr	r3, [pc, #328]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002102:	494f      	ldr	r1, [pc, #316]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800210a:	e001      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80a0 	beq.w	800225e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a40      	ldr	r2, [pc, #256]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
 8002144:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002150:	2301      	movs	r3, #1
 8002152:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002154:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002160:	f7fe fdb2 	bl	8000cc8 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002166:	e009      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7fe fdae 	bl	8000cc8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d902      	bls.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	74fb      	strb	r3, [r7, #19]
        break;
 800217a:	e005      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800217c:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ef      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d15c      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800218e:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002198:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01f      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d019      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	4a20      	ldr	r2, [pc, #128]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d016      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7fe fd6d 	bl	8000cc8 <HAL_GetTick>
 80021ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f0:	e00b      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fd69 	bl	8000cc8 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d902      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	74fb      	strb	r3, [r7, #19]
            break;
 8002208:	e006      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ec      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4904      	ldr	r1, [pc, #16]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002236:	e009      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	74bb      	strb	r3, [r7, #18]
 800223c:	e006      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800224c:	7c7b      	ldrb	r3, [r7, #17]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4ba6      	ldr	r3, [pc, #664]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	4aa5      	ldr	r2, [pc, #660]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800226a:	4ba0      	ldr	r3, [pc, #640]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f023 0203 	bic.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	499c      	ldr	r1, [pc, #624]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800228c:	4b97      	ldr	r3, [pc, #604]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f023 020c 	bic.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	4994      	ldr	r1, [pc, #592]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ae:	4b8f      	ldr	r3, [pc, #572]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	498b      	ldr	r1, [pc, #556]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022d0:	4b86      	ldr	r3, [pc, #536]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4983      	ldr	r1, [pc, #524]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022f2:	4b7e      	ldr	r3, [pc, #504]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002300:	497a      	ldr	r1, [pc, #488]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002314:	4b75      	ldr	r3, [pc, #468]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	4972      	ldr	r1, [pc, #456]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	4969      	ldr	r1, [pc, #420]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002366:	4961      	ldr	r1, [pc, #388]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237a:	4b5c      	ldr	r3, [pc, #368]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002388:	4958      	ldr	r1, [pc, #352]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	4950      	ldr	r1, [pc, #320]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023be:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	4947      	ldr	r1, [pc, #284]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023e0:	4b42      	ldr	r3, [pc, #264]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	493f      	ldr	r1, [pc, #252]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002402:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4936      	ldr	r1, [pc, #216]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002420:	d106      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002422:	4b32      	ldr	r3, [pc, #200]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4a31      	ldr	r2, [pc, #196]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242c:	60d3      	str	r3, [r2, #12]
 800242e:	e011      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f8c9 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d028      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246e:	491f      	ldr	r1, [pc, #124]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800247e:	d106      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248a:	60d3      	str	r3, [r2, #12]
 800248c:	e011      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002496:	d10c      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	2101      	movs	r1, #1
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f89a 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d02a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024cc:	4907      	ldr	r1, [pc, #28]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024dc:	d108      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024de:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	4a02      	ldr	r2, [pc, #8]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e8:	60d3      	str	r3, [r2, #12]
 80024ea:	e013      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80024ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024f8:	d10c      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2101      	movs	r1, #1
 8002500:	4618      	mov	r0, r3
 8002502:	f000 f869 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 8002506:	4603      	mov	r3, r0
 8002508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d02f      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800252e:	4929      	ldr	r1, [pc, #164]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800253e:	d10d      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	2102      	movs	r1, #2
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f846 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d014      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	74bb      	strb	r3, [r7, #18]
 800255a:	e011      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002564:	d10c      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3320      	adds	r3, #32
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f925 	bl	80027bc <RCCEx_PLLSAI2_Config>
 8002572:	4603      	mov	r3, r0
 8002574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800259c:	490d      	ldr	r1, [pc, #52]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00b      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c0:	4904      	ldr	r1, [pc, #16]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000

080025d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025e6:	4b74      	ldr	r3, [pc, #464]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025f2:	4b71      	ldr	r3, [pc, #452]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0203 	and.w	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d10d      	bne.n	800261e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
       ||
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800260a:	4b6b      	ldr	r3, [pc, #428]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
       ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d047      	beq.n	80026ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e044      	b.n	80026ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d018      	beq.n	800265e <RCCEx_PLLSAI1_Config+0x86>
 800262c:	2b03      	cmp	r3, #3
 800262e:	d825      	bhi.n	800267c <RCCEx_PLLSAI1_Config+0xa4>
 8002630:	2b01      	cmp	r3, #1
 8002632:	d002      	beq.n	800263a <RCCEx_PLLSAI1_Config+0x62>
 8002634:	2b02      	cmp	r3, #2
 8002636:	d009      	beq.n	800264c <RCCEx_PLLSAI1_Config+0x74>
 8002638:	e020      	b.n	800267c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800263a:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11d      	bne.n	8002682 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264a:	e01a      	b.n	8002682 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800264c:	4b5a      	ldr	r3, [pc, #360]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d116      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265c:	e013      	b.n	8002686 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800265e:	4b56      	ldr	r3, [pc, #344]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800266a:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800267a:	e006      	b.n	800268a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e004      	b.n	800268c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002682:	bf00      	nop
 8002684:	e002      	b.n	800268c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002686:	bf00      	nop
 8002688:	e000      	b.n	800268c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800268a:	bf00      	nop
    }

    if(status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002692:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	430b      	orrs	r3, r1
 80026a8:	4943      	ldr	r1, [pc, #268]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d17c      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026b4:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a3f      	ldr	r2, [pc, #252]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe fb02 	bl	8000cc8 <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c6:	e009      	b.n	80026dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c8:	f7fe fafe 	bl	8000cc8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d902      	bls.n	80026dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	73fb      	strb	r3, [r7, #15]
        break;
 80026da:	e005      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ef      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d15f      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d110      	bne.n	8002716 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f4:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80026fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6892      	ldr	r2, [r2, #8]
 8002704:	0211      	lsls	r1, r2, #8
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68d2      	ldr	r2, [r2, #12]
 800270a:	06d2      	lsls	r2, r2, #27
 800270c:	430a      	orrs	r2, r1
 800270e:	492a      	ldr	r1, [pc, #168]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002710:	4313      	orrs	r3, r2
 8002712:	610b      	str	r3, [r1, #16]
 8002714:	e027      	b.n	8002766 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d112      	bne.n	8002742 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800271c:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002724:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6892      	ldr	r2, [r2, #8]
 800272c:	0211      	lsls	r1, r2, #8
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6912      	ldr	r2, [r2, #16]
 8002732:	0852      	lsrs	r2, r2, #1
 8002734:	3a01      	subs	r2, #1
 8002736:	0552      	lsls	r2, r2, #21
 8002738:	430a      	orrs	r2, r1
 800273a:	491f      	ldr	r1, [pc, #124]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273c:	4313      	orrs	r3, r2
 800273e:	610b      	str	r3, [r1, #16]
 8002740:	e011      	b.n	8002766 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800274a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	0211      	lsls	r1, r2, #8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6952      	ldr	r2, [r2, #20]
 8002758:	0852      	lsrs	r2, r2, #1
 800275a:	3a01      	subs	r2, #1
 800275c:	0652      	lsls	r2, r2, #25
 800275e:	430a      	orrs	r2, r1
 8002760:	4915      	ldr	r1, [pc, #84]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002762:	4313      	orrs	r3, r2
 8002764:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002770:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe faa9 	bl	8000cc8 <HAL_GetTick>
 8002776:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002778:	e009      	b.n	800278e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800277a:	f7fe faa5 	bl	8000cc8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d902      	bls.n	800278e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	73fb      	strb	r3, [r7, #15]
          break;
 800278c:	e005      	b.n	800279a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ef      	beq.n	800277a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	4903      	ldr	r1, [pc, #12]	; (80027b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000

080027bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ca:	4b69      	ldr	r3, [pc, #420]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d018      	beq.n	8002808 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027d6:	4b66      	ldr	r3, [pc, #408]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0203 	and.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d10d      	bne.n	8002802 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
       ||
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027ee:	4b60      	ldr	r3, [pc, #384]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
       ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d047      	beq.n	8002892 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e044      	b.n	8002892 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d018      	beq.n	8002842 <RCCEx_PLLSAI2_Config+0x86>
 8002810:	2b03      	cmp	r3, #3
 8002812:	d825      	bhi.n	8002860 <RCCEx_PLLSAI2_Config+0xa4>
 8002814:	2b01      	cmp	r3, #1
 8002816:	d002      	beq.n	800281e <RCCEx_PLLSAI2_Config+0x62>
 8002818:	2b02      	cmp	r3, #2
 800281a:	d009      	beq.n	8002830 <RCCEx_PLLSAI2_Config+0x74>
 800281c:	e020      	b.n	8002860 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800281e:	4b54      	ldr	r3, [pc, #336]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d11d      	bne.n	8002866 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282e:	e01a      	b.n	8002866 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002830:	4b4f      	ldr	r3, [pc, #316]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d116      	bne.n	800286a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002840:	e013      	b.n	800286a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002842:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800284e:	4b48      	ldr	r3, [pc, #288]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800285e:	e006      	b.n	800286e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      break;
 8002864:	e004      	b.n	8002870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002866:	bf00      	nop
 8002868:	e002      	b.n	8002870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800286e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10d      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002876:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	430b      	orrs	r3, r1
 800288c:	4938      	ldr	r1, [pc, #224]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d166      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002898:	4b35      	ldr	r3, [pc, #212]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a34      	ldr	r2, [pc, #208]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a4:	f7fe fa10 	bl	8000cc8 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028aa:	e009      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ac:	f7fe fa0c 	bl	8000cc8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d902      	bls.n	80028c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	73fb      	strb	r3, [r7, #15]
        break;
 80028be:	e005      	b.n	80028cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ef      	bne.n	80028ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d149      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d110      	bne.n	80028fa <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6892      	ldr	r2, [r2, #8]
 80028e8:	0211      	lsls	r1, r2, #8
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68d2      	ldr	r2, [r2, #12]
 80028ee:	06d2      	lsls	r2, r2, #27
 80028f0:	430a      	orrs	r2, r1
 80028f2:	491f      	ldr	r1, [pc, #124]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	614b      	str	r3, [r1, #20]
 80028f8:	e011      	b.n	800291e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002902:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	0211      	lsls	r1, r2, #8
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6912      	ldr	r2, [r2, #16]
 8002910:	0852      	lsrs	r2, r2, #1
 8002912:	3a01      	subs	r2, #1
 8002914:	0652      	lsls	r2, r2, #25
 8002916:	430a      	orrs	r2, r1
 8002918:	4915      	ldr	r1, [pc, #84]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fe f9cd 	bl	8000cc8 <HAL_GetTick>
 800292e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002930:	e009      	b.n	8002946 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002932:	f7fe f9c9 	bl	8000cc8 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d902      	bls.n	8002946 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	73fb      	strb	r3, [r7, #15]
          break;
 8002944:	e005      	b.n	8002952 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ef      	beq.n	8002932 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	4903      	ldr	r1, [pc, #12]	; (8002970 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e040      	b.n	8002a08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fd ffc8 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8c0 	bl	8002b38 <UART_SetConfig>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e022      	b.n	8002a08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fb6c 	bl	80030a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fbf3 	bl	80031ec <UART_CheckIdleState>
 8002a06:	4603      	mov	r3, r0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	f040 8082 	bne.w	8002b2e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_UART_Transmit+0x26>
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e07a      	b.n	8002b30 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_UART_Transmit+0x38>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e073      	b.n	8002b30 <HAL_UART_Transmit+0x120>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2221      	movs	r2, #33	; 0x21
 8002a5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe f933 	bl	8000cc8 <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	88fa      	ldrh	r2, [r7, #6]
 8002a70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7c:	d108      	bne.n	8002a90 <HAL_UART_Transmit+0x80>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d104      	bne.n	8002a90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	e003      	b.n	8002a98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002aa0:	e02d      	b.n	8002afe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fbe6 	bl	800327e <UART_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e039      	b.n	8002b30 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10b      	bne.n	8002ada <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	881a      	ldrh	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ace:	b292      	uxth	r2, r2
 8002ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	e008      	b.n	8002aec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	b292      	uxth	r2, r2
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1cb      	bne.n	8002aa2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fbb2 	bl	800327e <UART_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e005      	b.n	8002b30 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b3c:	b08a      	sub	sp, #40	; 0x28
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4ba4      	ldr	r3, [pc, #656]	; (8002df8 <UART_SetConfig+0x2c0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a99      	ldr	r2, [pc, #612]	; (8002dfc <UART_SetConfig+0x2c4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a90      	ldr	r2, [pc, #576]	; (8002e00 <UART_SetConfig+0x2c8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d126      	bne.n	8002c10 <UART_SetConfig+0xd8>
 8002bc2:	4b90      	ldr	r3, [pc, #576]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d81b      	bhi.n	8002c08 <UART_SetConfig+0xd0>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <UART_SetConfig+0xa0>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bf9 	.word	0x08002bf9
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002c01 	.word	0x08002c01
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bee:	e116      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bf6:	e112      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bfe:	e10e      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c00:	2308      	movs	r3, #8
 8002c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c06:	e10a      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c08:	2310      	movs	r3, #16
 8002c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c0e:	e106      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a7c      	ldr	r2, [pc, #496]	; (8002e08 <UART_SetConfig+0x2d0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d138      	bne.n	8002c8c <UART_SetConfig+0x154>
 8002c1a:	4b7a      	ldr	r3, [pc, #488]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d82d      	bhi.n	8002c84 <UART_SetConfig+0x14c>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <UART_SetConfig+0xf8>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08002c85 	.word	0x08002c85
 8002c38:	08002c85 	.word	0x08002c85
 8002c3c:	08002c85 	.word	0x08002c85
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08002c85 	.word	0x08002c85
 8002c48:	08002c85 	.word	0x08002c85
 8002c4c:	08002c85 	.word	0x08002c85
 8002c50:	08002c6d 	.word	0x08002c6d
 8002c54:	08002c85 	.word	0x08002c85
 8002c58:	08002c85 	.word	0x08002c85
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	08002c7d 	.word	0x08002c7d
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c6a:	e0d8      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c72:	e0d4      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c74:	2304      	movs	r3, #4
 8002c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7a:	e0d0      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c82:	e0cc      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c84:	2310      	movs	r3, #16
 8002c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8a:	e0c8      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a5e      	ldr	r2, [pc, #376]	; (8002e0c <UART_SetConfig+0x2d4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d125      	bne.n	8002ce2 <UART_SetConfig+0x1aa>
 8002c96:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ca0:	2b30      	cmp	r3, #48	; 0x30
 8002ca2:	d016      	beq.n	8002cd2 <UART_SetConfig+0x19a>
 8002ca4:	2b30      	cmp	r3, #48	; 0x30
 8002ca6:	d818      	bhi.n	8002cda <UART_SetConfig+0x1a2>
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d00a      	beq.n	8002cc2 <UART_SetConfig+0x18a>
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d814      	bhi.n	8002cda <UART_SetConfig+0x1a2>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <UART_SetConfig+0x182>
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d008      	beq.n	8002cca <UART_SetConfig+0x192>
 8002cb8:	e00f      	b.n	8002cda <UART_SetConfig+0x1a2>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc0:	e0ad      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc8:	e0a9      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd0:	e0a5      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd8:	e0a1      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002cda:	2310      	movs	r3, #16
 8002cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ce0:	e09d      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a4a      	ldr	r2, [pc, #296]	; (8002e10 <UART_SetConfig+0x2d8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d125      	bne.n	8002d38 <UART_SetConfig+0x200>
 8002cec:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8002cf8:	d016      	beq.n	8002d28 <UART_SetConfig+0x1f0>
 8002cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8002cfc:	d818      	bhi.n	8002d30 <UART_SetConfig+0x1f8>
 8002cfe:	2b80      	cmp	r3, #128	; 0x80
 8002d00:	d00a      	beq.n	8002d18 <UART_SetConfig+0x1e0>
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d814      	bhi.n	8002d30 <UART_SetConfig+0x1f8>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <UART_SetConfig+0x1d8>
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d008      	beq.n	8002d20 <UART_SetConfig+0x1e8>
 8002d0e:	e00f      	b.n	8002d30 <UART_SetConfig+0x1f8>
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d16:	e082      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1e:	e07e      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d20:	2304      	movs	r3, #4
 8002d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d26:	e07a      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d28:	2308      	movs	r3, #8
 8002d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2e:	e076      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d30:	2310      	movs	r3, #16
 8002d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d36:	e072      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a35      	ldr	r2, [pc, #212]	; (8002e14 <UART_SetConfig+0x2dc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d12a      	bne.n	8002d98 <UART_SetConfig+0x260>
 8002d42:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d50:	d01a      	beq.n	8002d88 <UART_SetConfig+0x250>
 8002d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d56:	d81b      	bhi.n	8002d90 <UART_SetConfig+0x258>
 8002d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5c:	d00c      	beq.n	8002d78 <UART_SetConfig+0x240>
 8002d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d62:	d815      	bhi.n	8002d90 <UART_SetConfig+0x258>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <UART_SetConfig+0x238>
 8002d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6c:	d008      	beq.n	8002d80 <UART_SetConfig+0x248>
 8002d6e:	e00f      	b.n	8002d90 <UART_SetConfig+0x258>
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d76:	e052      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7e:	e04e      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d80:	2304      	movs	r3, #4
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d86:	e04a      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d88:	2308      	movs	r3, #8
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8e:	e046      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d90:	2310      	movs	r3, #16
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d96:	e042      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <UART_SetConfig+0x2c4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d13a      	bne.n	8002e18 <UART_SetConfig+0x2e0>
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002db0:	d01a      	beq.n	8002de8 <UART_SetConfig+0x2b0>
 8002db2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002db6:	d81b      	bhi.n	8002df0 <UART_SetConfig+0x2b8>
 8002db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dbc:	d00c      	beq.n	8002dd8 <UART_SetConfig+0x2a0>
 8002dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc2:	d815      	bhi.n	8002df0 <UART_SetConfig+0x2b8>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <UART_SetConfig+0x298>
 8002dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dcc:	d008      	beq.n	8002de0 <UART_SetConfig+0x2a8>
 8002dce:	e00f      	b.n	8002df0 <UART_SetConfig+0x2b8>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd6:	e022      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dde:	e01e      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002de0:	2304      	movs	r3, #4
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de6:	e01a      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002de8:	2308      	movs	r3, #8
 8002dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dee:	e016      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002df0:	2310      	movs	r3, #16
 8002df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002df6:	e012      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002df8:	efff69f3 	.word	0xefff69f3
 8002dfc:	40008000 	.word	0x40008000
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40004400 	.word	0x40004400
 8002e0c:	40004800 	.word	0x40004800
 8002e10:	40004c00 	.word	0x40004c00
 8002e14:	40005000 	.word	0x40005000
 8002e18:	2310      	movs	r3, #16
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a9f      	ldr	r2, [pc, #636]	; (80030a0 <UART_SetConfig+0x568>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d17a      	bne.n	8002f1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d824      	bhi.n	8002e7a <UART_SetConfig+0x342>
 8002e30:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <UART_SetConfig+0x300>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e5d 	.word	0x08002e5d
 8002e3c:	08002e7b 	.word	0x08002e7b
 8002e40:	08002e65 	.word	0x08002e65
 8002e44:	08002e7b 	.word	0x08002e7b
 8002e48:	08002e6b 	.word	0x08002e6b
 8002e4c:	08002e7b 	.word	0x08002e7b
 8002e50:	08002e7b 	.word	0x08002e7b
 8002e54:	08002e7b 	.word	0x08002e7b
 8002e58:	08002e73 	.word	0x08002e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f7ff f834 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8002e60:	61f8      	str	r0, [r7, #28]
        break;
 8002e62:	e010      	b.n	8002e86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e64:	4b8f      	ldr	r3, [pc, #572]	; (80030a4 <UART_SetConfig+0x56c>)
 8002e66:	61fb      	str	r3, [r7, #28]
        break;
 8002e68:	e00d      	b.n	8002e86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e6a:	f7fe ff95 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8002e6e:	61f8      	str	r0, [r7, #28]
        break;
 8002e70:	e009      	b.n	8002e86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e76:	61fb      	str	r3, [r7, #28]
        break;
 8002e78:	e005      	b.n	8002e86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80fb 	beq.w	8003084 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d305      	bcc.n	8002eaa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d903      	bls.n	8002eb2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002eb0:	e0e8      	b.n	8003084 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	461c      	mov	r4, r3
 8002eb8:	4615      	mov	r5, r2
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	022b      	lsls	r3, r5, #8
 8002ec4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ec8:	0222      	lsls	r2, r4, #8
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	6849      	ldr	r1, [r1, #4]
 8002ece:	0849      	lsrs	r1, r1, #1
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	4688      	mov	r8, r1
 8002ed4:	4681      	mov	r9, r0
 8002ed6:	eb12 0a08 	adds.w	sl, r2, r8
 8002eda:	eb43 0b09 	adc.w	fp, r3, r9
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eec:	4650      	mov	r0, sl
 8002eee:	4659      	mov	r1, fp
 8002ef0:	f7fd f9ce 	bl	8000290 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f02:	d308      	bcc.n	8002f16 <UART_SetConfig+0x3de>
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f0a:	d204      	bcs.n	8002f16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	e0b6      	b.n	8003084 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f1c:	e0b2      	b.n	8003084 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f26:	d15e      	bne.n	8002fe6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d828      	bhi.n	8002f82 <UART_SetConfig+0x44a>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <UART_SetConfig+0x400>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f5d 	.word	0x08002f5d
 8002f3c:	08002f65 	.word	0x08002f65
 8002f40:	08002f6d 	.word	0x08002f6d
 8002f44:	08002f83 	.word	0x08002f83
 8002f48:	08002f73 	.word	0x08002f73
 8002f4c:	08002f83 	.word	0x08002f83
 8002f50:	08002f83 	.word	0x08002f83
 8002f54:	08002f83 	.word	0x08002f83
 8002f58:	08002f7b 	.word	0x08002f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7fe ffb4 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8002f60:	61f8      	str	r0, [r7, #28]
        break;
 8002f62:	e014      	b.n	8002f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f64:	f7fe ffc6 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 8002f68:	61f8      	str	r0, [r7, #28]
        break;
 8002f6a:	e010      	b.n	8002f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f6c:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <UART_SetConfig+0x56c>)
 8002f6e:	61fb      	str	r3, [r7, #28]
        break;
 8002f70:	e00d      	b.n	8002f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f72:	f7fe ff11 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8002f76:	61f8      	str	r0, [r7, #28]
        break;
 8002f78:	e009      	b.n	8002f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f7e:	61fb      	str	r3, [r7, #28]
        break;
 8002f80:	e005      	b.n	8002f8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d077      	beq.n	8003084 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005a      	lsls	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d916      	bls.n	8002fde <UART_SetConfig+0x4a6>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb6:	d212      	bcs.n	8002fde <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f023 030f 	bic.w	r3, r3, #15
 8002fc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	8afb      	ldrh	r3, [r7, #22]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	8afa      	ldrh	r2, [r7, #22]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	e052      	b.n	8003084 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fe4:	e04e      	b.n	8003084 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d827      	bhi.n	800303e <UART_SetConfig+0x506>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <UART_SetConfig+0x4bc>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003019 	.word	0x08003019
 8002ff8:	08003021 	.word	0x08003021
 8002ffc:	08003029 	.word	0x08003029
 8003000:	0800303f 	.word	0x0800303f
 8003004:	0800302f 	.word	0x0800302f
 8003008:	0800303f 	.word	0x0800303f
 800300c:	0800303f 	.word	0x0800303f
 8003010:	0800303f 	.word	0x0800303f
 8003014:	08003037 	.word	0x08003037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003018:	f7fe ff56 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 800301c:	61f8      	str	r0, [r7, #28]
        break;
 800301e:	e014      	b.n	800304a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003020:	f7fe ff68 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 8003024:	61f8      	str	r0, [r7, #28]
        break;
 8003026:	e010      	b.n	800304a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <UART_SetConfig+0x56c>)
 800302a:	61fb      	str	r3, [r7, #28]
        break;
 800302c:	e00d      	b.n	800304a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302e:	f7fe feb3 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8003032:	61f8      	str	r0, [r7, #28]
        break;
 8003034:	e009      	b.n	800304a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303a:	61fb      	str	r3, [r7, #28]
        break;
 800303c:	e005      	b.n	800304a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003048:	bf00      	nop
    }

    if (pclk != 0U)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d019      	beq.n	8003084 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	085a      	lsrs	r2, r3, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	441a      	add	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0f      	cmp	r3, #15
 8003068:	d909      	bls.n	800307e <UART_SetConfig+0x546>
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d205      	bcs.n	800307e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60da      	str	r2, [r3, #12]
 800307c:	e002      	b.n	8003084 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003090:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003094:	4618      	mov	r0, r3
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	40008000 	.word	0x40008000
 80030a4:	00f42400 	.word	0x00f42400

080030a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01a      	beq.n	80031be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a6:	d10a      	bne.n	80031be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	605a      	str	r2, [r3, #4]
  }
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031fc:	f7fd fd64 	bl	8000cc8 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b08      	cmp	r3, #8
 800320e:	d10e      	bne.n	800322e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f82d 	bl	800327e <UART_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e023      	b.n	8003276 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b04      	cmp	r3, #4
 800323a:	d10e      	bne.n	800325a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800323c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f817 	bl	800327e <UART_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e00d      	b.n	8003276 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b09c      	sub	sp, #112	; 0x70
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328e:	e0a5      	b.n	80033dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003296:	f000 80a1 	beq.w	80033dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fd fd15 	bl	8000cc8 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80032aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d13e      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032c4:	667b      	str	r3, [r7, #100]	; 0x64
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032d6:	e841 2300 	strex	r3, r2, [r1]
 80032da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e6      	bne.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3308      	adds	r3, #8
 80032e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	663b      	str	r3, [r7, #96]	; 0x60
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3308      	adds	r3, #8
 8003300:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003302:	64ba      	str	r2, [r7, #72]	; 0x48
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e5      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e067      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d04f      	beq.n	80033dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334a:	d147      	bne.n	80033dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003354:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800336a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
 8003376:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800337a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e6      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3308      	adds	r3, #8
 800338e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	613b      	str	r3, [r7, #16]
   return(result);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	66bb      	str	r3, [r7, #104]	; 0x68
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3308      	adds	r3, #8
 80033a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033a8:	623a      	str	r2, [r7, #32]
 80033aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	69f9      	ldr	r1, [r7, #28]
 80033ae:	6a3a      	ldr	r2, [r7, #32]
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e5      	bne.n	8003388 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e010      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	f43f af4a 	beq.w	8003290 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3770      	adds	r7, #112	; 0x70
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <__errno>:
 8003408:	4b01      	ldr	r3, [pc, #4]	; (8003410 <__errno+0x8>)
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	2000000c 	.word	0x2000000c

08003414 <__libc_init_array>:
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	4d0d      	ldr	r5, [pc, #52]	; (800344c <__libc_init_array+0x38>)
 8003418:	4c0d      	ldr	r4, [pc, #52]	; (8003450 <__libc_init_array+0x3c>)
 800341a:	1b64      	subs	r4, r4, r5
 800341c:	10a4      	asrs	r4, r4, #2
 800341e:	2600      	movs	r6, #0
 8003420:	42a6      	cmp	r6, r4
 8003422:	d109      	bne.n	8003438 <__libc_init_array+0x24>
 8003424:	4d0b      	ldr	r5, [pc, #44]	; (8003454 <__libc_init_array+0x40>)
 8003426:	4c0c      	ldr	r4, [pc, #48]	; (8003458 <__libc_init_array+0x44>)
 8003428:	f001 f88e 	bl	8004548 <_init>
 800342c:	1b64      	subs	r4, r4, r5
 800342e:	10a4      	asrs	r4, r4, #2
 8003430:	2600      	movs	r6, #0
 8003432:	42a6      	cmp	r6, r4
 8003434:	d105      	bne.n	8003442 <__libc_init_array+0x2e>
 8003436:	bd70      	pop	{r4, r5, r6, pc}
 8003438:	f855 3b04 	ldr.w	r3, [r5], #4
 800343c:	4798      	blx	r3
 800343e:	3601      	adds	r6, #1
 8003440:	e7ee      	b.n	8003420 <__libc_init_array+0xc>
 8003442:	f855 3b04 	ldr.w	r3, [r5], #4
 8003446:	4798      	blx	r3
 8003448:	3601      	adds	r6, #1
 800344a:	e7f2      	b.n	8003432 <__libc_init_array+0x1e>
 800344c:	08004668 	.word	0x08004668
 8003450:	08004668 	.word	0x08004668
 8003454:	08004668 	.word	0x08004668
 8003458:	0800466c 	.word	0x0800466c

0800345c <memset>:
 800345c:	4402      	add	r2, r0
 800345e:	4603      	mov	r3, r0
 8003460:	4293      	cmp	r3, r2
 8003462:	d100      	bne.n	8003466 <memset+0xa>
 8003464:	4770      	bx	lr
 8003466:	f803 1b01 	strb.w	r1, [r3], #1
 800346a:	e7f9      	b.n	8003460 <memset+0x4>

0800346c <_puts_r>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	460e      	mov	r6, r1
 8003470:	4605      	mov	r5, r0
 8003472:	b118      	cbz	r0, 800347c <_puts_r+0x10>
 8003474:	6983      	ldr	r3, [r0, #24]
 8003476:	b90b      	cbnz	r3, 800347c <_puts_r+0x10>
 8003478:	f000 fa68 	bl	800394c <__sinit>
 800347c:	69ab      	ldr	r3, [r5, #24]
 800347e:	68ac      	ldr	r4, [r5, #8]
 8003480:	b913      	cbnz	r3, 8003488 <_puts_r+0x1c>
 8003482:	4628      	mov	r0, r5
 8003484:	f000 fa62 	bl	800394c <__sinit>
 8003488:	4b2c      	ldr	r3, [pc, #176]	; (800353c <_puts_r+0xd0>)
 800348a:	429c      	cmp	r4, r3
 800348c:	d120      	bne.n	80034d0 <_puts_r+0x64>
 800348e:	686c      	ldr	r4, [r5, #4]
 8003490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003492:	07db      	lsls	r3, r3, #31
 8003494:	d405      	bmi.n	80034a2 <_puts_r+0x36>
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	0598      	lsls	r0, r3, #22
 800349a:	d402      	bmi.n	80034a2 <_puts_r+0x36>
 800349c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800349e:	f000 faf3 	bl	8003a88 <__retarget_lock_acquire_recursive>
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	0719      	lsls	r1, r3, #28
 80034a6:	d51d      	bpl.n	80034e4 <_puts_r+0x78>
 80034a8:	6923      	ldr	r3, [r4, #16]
 80034aa:	b1db      	cbz	r3, 80034e4 <_puts_r+0x78>
 80034ac:	3e01      	subs	r6, #1
 80034ae:	68a3      	ldr	r3, [r4, #8]
 80034b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034b4:	3b01      	subs	r3, #1
 80034b6:	60a3      	str	r3, [r4, #8]
 80034b8:	bb39      	cbnz	r1, 800350a <_puts_r+0x9e>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da38      	bge.n	8003530 <_puts_r+0xc4>
 80034be:	4622      	mov	r2, r4
 80034c0:	210a      	movs	r1, #10
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 f868 	bl	8003598 <__swbuf_r>
 80034c8:	3001      	adds	r0, #1
 80034ca:	d011      	beq.n	80034f0 <_puts_r+0x84>
 80034cc:	250a      	movs	r5, #10
 80034ce:	e011      	b.n	80034f4 <_puts_r+0x88>
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <_puts_r+0xd4>)
 80034d2:	429c      	cmp	r4, r3
 80034d4:	d101      	bne.n	80034da <_puts_r+0x6e>
 80034d6:	68ac      	ldr	r4, [r5, #8]
 80034d8:	e7da      	b.n	8003490 <_puts_r+0x24>
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <_puts_r+0xd8>)
 80034dc:	429c      	cmp	r4, r3
 80034de:	bf08      	it	eq
 80034e0:	68ec      	ldreq	r4, [r5, #12]
 80034e2:	e7d5      	b.n	8003490 <_puts_r+0x24>
 80034e4:	4621      	mov	r1, r4
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f8a8 	bl	800363c <__swsetup_r>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d0dd      	beq.n	80034ac <_puts_r+0x40>
 80034f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80034f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034f6:	07da      	lsls	r2, r3, #31
 80034f8:	d405      	bmi.n	8003506 <_puts_r+0x9a>
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	059b      	lsls	r3, r3, #22
 80034fe:	d402      	bmi.n	8003506 <_puts_r+0x9a>
 8003500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003502:	f000 fac2 	bl	8003a8a <__retarget_lock_release_recursive>
 8003506:	4628      	mov	r0, r5
 8003508:	bd70      	pop	{r4, r5, r6, pc}
 800350a:	2b00      	cmp	r3, #0
 800350c:	da04      	bge.n	8003518 <_puts_r+0xac>
 800350e:	69a2      	ldr	r2, [r4, #24]
 8003510:	429a      	cmp	r2, r3
 8003512:	dc06      	bgt.n	8003522 <_puts_r+0xb6>
 8003514:	290a      	cmp	r1, #10
 8003516:	d004      	beq.n	8003522 <_puts_r+0xb6>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	6022      	str	r2, [r4, #0]
 800351e:	7019      	strb	r1, [r3, #0]
 8003520:	e7c5      	b.n	80034ae <_puts_r+0x42>
 8003522:	4622      	mov	r2, r4
 8003524:	4628      	mov	r0, r5
 8003526:	f000 f837 	bl	8003598 <__swbuf_r>
 800352a:	3001      	adds	r0, #1
 800352c:	d1bf      	bne.n	80034ae <_puts_r+0x42>
 800352e:	e7df      	b.n	80034f0 <_puts_r+0x84>
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	250a      	movs	r5, #10
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	6022      	str	r2, [r4, #0]
 8003538:	701d      	strb	r5, [r3, #0]
 800353a:	e7db      	b.n	80034f4 <_puts_r+0x88>
 800353c:	080045ec 	.word	0x080045ec
 8003540:	0800460c 	.word	0x0800460c
 8003544:	080045cc 	.word	0x080045cc

08003548 <puts>:
 8003548:	4b02      	ldr	r3, [pc, #8]	; (8003554 <puts+0xc>)
 800354a:	4601      	mov	r1, r0
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	f7ff bf8d 	b.w	800346c <_puts_r>
 8003552:	bf00      	nop
 8003554:	2000000c 	.word	0x2000000c

08003558 <siprintf>:
 8003558:	b40e      	push	{r1, r2, r3}
 800355a:	b500      	push	{lr}
 800355c:	b09c      	sub	sp, #112	; 0x70
 800355e:	ab1d      	add	r3, sp, #116	; 0x74
 8003560:	9002      	str	r0, [sp, #8]
 8003562:	9006      	str	r0, [sp, #24]
 8003564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003568:	4809      	ldr	r0, [pc, #36]	; (8003590 <siprintf+0x38>)
 800356a:	9107      	str	r1, [sp, #28]
 800356c:	9104      	str	r1, [sp, #16]
 800356e:	4909      	ldr	r1, [pc, #36]	; (8003594 <siprintf+0x3c>)
 8003570:	f853 2b04 	ldr.w	r2, [r3], #4
 8003574:	9105      	str	r1, [sp, #20]
 8003576:	6800      	ldr	r0, [r0, #0]
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	a902      	add	r1, sp, #8
 800357c:	f000 fc28 	bl	8003dd0 <_svfiprintf_r>
 8003580:	9b02      	ldr	r3, [sp, #8]
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	b01c      	add	sp, #112	; 0x70
 8003588:	f85d eb04 	ldr.w	lr, [sp], #4
 800358c:	b003      	add	sp, #12
 800358e:	4770      	bx	lr
 8003590:	2000000c 	.word	0x2000000c
 8003594:	ffff0208 	.word	0xffff0208

08003598 <__swbuf_r>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	460e      	mov	r6, r1
 800359c:	4614      	mov	r4, r2
 800359e:	4605      	mov	r5, r0
 80035a0:	b118      	cbz	r0, 80035aa <__swbuf_r+0x12>
 80035a2:	6983      	ldr	r3, [r0, #24]
 80035a4:	b90b      	cbnz	r3, 80035aa <__swbuf_r+0x12>
 80035a6:	f000 f9d1 	bl	800394c <__sinit>
 80035aa:	4b21      	ldr	r3, [pc, #132]	; (8003630 <__swbuf_r+0x98>)
 80035ac:	429c      	cmp	r4, r3
 80035ae:	d12b      	bne.n	8003608 <__swbuf_r+0x70>
 80035b0:	686c      	ldr	r4, [r5, #4]
 80035b2:	69a3      	ldr	r3, [r4, #24]
 80035b4:	60a3      	str	r3, [r4, #8]
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	071a      	lsls	r2, r3, #28
 80035ba:	d52f      	bpl.n	800361c <__swbuf_r+0x84>
 80035bc:	6923      	ldr	r3, [r4, #16]
 80035be:	b36b      	cbz	r3, 800361c <__swbuf_r+0x84>
 80035c0:	6923      	ldr	r3, [r4, #16]
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	1ac0      	subs	r0, r0, r3
 80035c6:	6963      	ldr	r3, [r4, #20]
 80035c8:	b2f6      	uxtb	r6, r6
 80035ca:	4283      	cmp	r3, r0
 80035cc:	4637      	mov	r7, r6
 80035ce:	dc04      	bgt.n	80035da <__swbuf_r+0x42>
 80035d0:	4621      	mov	r1, r4
 80035d2:	4628      	mov	r0, r5
 80035d4:	f000 f926 	bl	8003824 <_fflush_r>
 80035d8:	bb30      	cbnz	r0, 8003628 <__swbuf_r+0x90>
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	3b01      	subs	r3, #1
 80035de:	60a3      	str	r3, [r4, #8]
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	6022      	str	r2, [r4, #0]
 80035e6:	701e      	strb	r6, [r3, #0]
 80035e8:	6963      	ldr	r3, [r4, #20]
 80035ea:	3001      	adds	r0, #1
 80035ec:	4283      	cmp	r3, r0
 80035ee:	d004      	beq.n	80035fa <__swbuf_r+0x62>
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	07db      	lsls	r3, r3, #31
 80035f4:	d506      	bpl.n	8003604 <__swbuf_r+0x6c>
 80035f6:	2e0a      	cmp	r6, #10
 80035f8:	d104      	bne.n	8003604 <__swbuf_r+0x6c>
 80035fa:	4621      	mov	r1, r4
 80035fc:	4628      	mov	r0, r5
 80035fe:	f000 f911 	bl	8003824 <_fflush_r>
 8003602:	b988      	cbnz	r0, 8003628 <__swbuf_r+0x90>
 8003604:	4638      	mov	r0, r7
 8003606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <__swbuf_r+0x9c>)
 800360a:	429c      	cmp	r4, r3
 800360c:	d101      	bne.n	8003612 <__swbuf_r+0x7a>
 800360e:	68ac      	ldr	r4, [r5, #8]
 8003610:	e7cf      	b.n	80035b2 <__swbuf_r+0x1a>
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <__swbuf_r+0xa0>)
 8003614:	429c      	cmp	r4, r3
 8003616:	bf08      	it	eq
 8003618:	68ec      	ldreq	r4, [r5, #12]
 800361a:	e7ca      	b.n	80035b2 <__swbuf_r+0x1a>
 800361c:	4621      	mov	r1, r4
 800361e:	4628      	mov	r0, r5
 8003620:	f000 f80c 	bl	800363c <__swsetup_r>
 8003624:	2800      	cmp	r0, #0
 8003626:	d0cb      	beq.n	80035c0 <__swbuf_r+0x28>
 8003628:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800362c:	e7ea      	b.n	8003604 <__swbuf_r+0x6c>
 800362e:	bf00      	nop
 8003630:	080045ec 	.word	0x080045ec
 8003634:	0800460c 	.word	0x0800460c
 8003638:	080045cc 	.word	0x080045cc

0800363c <__swsetup_r>:
 800363c:	4b32      	ldr	r3, [pc, #200]	; (8003708 <__swsetup_r+0xcc>)
 800363e:	b570      	push	{r4, r5, r6, lr}
 8003640:	681d      	ldr	r5, [r3, #0]
 8003642:	4606      	mov	r6, r0
 8003644:	460c      	mov	r4, r1
 8003646:	b125      	cbz	r5, 8003652 <__swsetup_r+0x16>
 8003648:	69ab      	ldr	r3, [r5, #24]
 800364a:	b913      	cbnz	r3, 8003652 <__swsetup_r+0x16>
 800364c:	4628      	mov	r0, r5
 800364e:	f000 f97d 	bl	800394c <__sinit>
 8003652:	4b2e      	ldr	r3, [pc, #184]	; (800370c <__swsetup_r+0xd0>)
 8003654:	429c      	cmp	r4, r3
 8003656:	d10f      	bne.n	8003678 <__swsetup_r+0x3c>
 8003658:	686c      	ldr	r4, [r5, #4]
 800365a:	89a3      	ldrh	r3, [r4, #12]
 800365c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003660:	0719      	lsls	r1, r3, #28
 8003662:	d42c      	bmi.n	80036be <__swsetup_r+0x82>
 8003664:	06dd      	lsls	r5, r3, #27
 8003666:	d411      	bmi.n	800368c <__swsetup_r+0x50>
 8003668:	2309      	movs	r3, #9
 800366a:	6033      	str	r3, [r6, #0]
 800366c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003670:	81a3      	strh	r3, [r4, #12]
 8003672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003676:	e03e      	b.n	80036f6 <__swsetup_r+0xba>
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <__swsetup_r+0xd4>)
 800367a:	429c      	cmp	r4, r3
 800367c:	d101      	bne.n	8003682 <__swsetup_r+0x46>
 800367e:	68ac      	ldr	r4, [r5, #8]
 8003680:	e7eb      	b.n	800365a <__swsetup_r+0x1e>
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <__swsetup_r+0xd8>)
 8003684:	429c      	cmp	r4, r3
 8003686:	bf08      	it	eq
 8003688:	68ec      	ldreq	r4, [r5, #12]
 800368a:	e7e6      	b.n	800365a <__swsetup_r+0x1e>
 800368c:	0758      	lsls	r0, r3, #29
 800368e:	d512      	bpl.n	80036b6 <__swsetup_r+0x7a>
 8003690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003692:	b141      	cbz	r1, 80036a6 <__swsetup_r+0x6a>
 8003694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003698:	4299      	cmp	r1, r3
 800369a:	d002      	beq.n	80036a2 <__swsetup_r+0x66>
 800369c:	4630      	mov	r0, r6
 800369e:	f000 fa5b 	bl	8003b58 <_free_r>
 80036a2:	2300      	movs	r3, #0
 80036a4:	6363      	str	r3, [r4, #52]	; 0x34
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036ac:	81a3      	strh	r3, [r4, #12]
 80036ae:	2300      	movs	r3, #0
 80036b0:	6063      	str	r3, [r4, #4]
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	f043 0308 	orr.w	r3, r3, #8
 80036bc:	81a3      	strh	r3, [r4, #12]
 80036be:	6923      	ldr	r3, [r4, #16]
 80036c0:	b94b      	cbnz	r3, 80036d6 <__swsetup_r+0x9a>
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036cc:	d003      	beq.n	80036d6 <__swsetup_r+0x9a>
 80036ce:	4621      	mov	r1, r4
 80036d0:	4630      	mov	r0, r6
 80036d2:	f000 fa01 	bl	8003ad8 <__smakebuf_r>
 80036d6:	89a0      	ldrh	r0, [r4, #12]
 80036d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036dc:	f010 0301 	ands.w	r3, r0, #1
 80036e0:	d00a      	beq.n	80036f8 <__swsetup_r+0xbc>
 80036e2:	2300      	movs	r3, #0
 80036e4:	60a3      	str	r3, [r4, #8]
 80036e6:	6963      	ldr	r3, [r4, #20]
 80036e8:	425b      	negs	r3, r3
 80036ea:	61a3      	str	r3, [r4, #24]
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	b943      	cbnz	r3, 8003702 <__swsetup_r+0xc6>
 80036f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036f4:	d1ba      	bne.n	800366c <__swsetup_r+0x30>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	0781      	lsls	r1, r0, #30
 80036fa:	bf58      	it	pl
 80036fc:	6963      	ldrpl	r3, [r4, #20]
 80036fe:	60a3      	str	r3, [r4, #8]
 8003700:	e7f4      	b.n	80036ec <__swsetup_r+0xb0>
 8003702:	2000      	movs	r0, #0
 8003704:	e7f7      	b.n	80036f6 <__swsetup_r+0xba>
 8003706:	bf00      	nop
 8003708:	2000000c 	.word	0x2000000c
 800370c:	080045ec 	.word	0x080045ec
 8003710:	0800460c 	.word	0x0800460c
 8003714:	080045cc 	.word	0x080045cc

08003718 <__sflush_r>:
 8003718:	898a      	ldrh	r2, [r1, #12]
 800371a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800371e:	4605      	mov	r5, r0
 8003720:	0710      	lsls	r0, r2, #28
 8003722:	460c      	mov	r4, r1
 8003724:	d458      	bmi.n	80037d8 <__sflush_r+0xc0>
 8003726:	684b      	ldr	r3, [r1, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	dc05      	bgt.n	8003738 <__sflush_r+0x20>
 800372c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	dc02      	bgt.n	8003738 <__sflush_r+0x20>
 8003732:	2000      	movs	r0, #0
 8003734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800373a:	2e00      	cmp	r6, #0
 800373c:	d0f9      	beq.n	8003732 <__sflush_r+0x1a>
 800373e:	2300      	movs	r3, #0
 8003740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003744:	682f      	ldr	r7, [r5, #0]
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	d032      	beq.n	80037b0 <__sflush_r+0x98>
 800374a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	075a      	lsls	r2, r3, #29
 8003750:	d505      	bpl.n	800375e <__sflush_r+0x46>
 8003752:	6863      	ldr	r3, [r4, #4]
 8003754:	1ac0      	subs	r0, r0, r3
 8003756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003758:	b10b      	cbz	r3, 800375e <__sflush_r+0x46>
 800375a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800375c:	1ac0      	subs	r0, r0, r3
 800375e:	2300      	movs	r3, #0
 8003760:	4602      	mov	r2, r0
 8003762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003764:	6a21      	ldr	r1, [r4, #32]
 8003766:	4628      	mov	r0, r5
 8003768:	47b0      	blx	r6
 800376a:	1c43      	adds	r3, r0, #1
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	d106      	bne.n	800377e <__sflush_r+0x66>
 8003770:	6829      	ldr	r1, [r5, #0]
 8003772:	291d      	cmp	r1, #29
 8003774:	d82c      	bhi.n	80037d0 <__sflush_r+0xb8>
 8003776:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <__sflush_r+0x108>)
 8003778:	40ca      	lsrs	r2, r1
 800377a:	07d6      	lsls	r6, r2, #31
 800377c:	d528      	bpl.n	80037d0 <__sflush_r+0xb8>
 800377e:	2200      	movs	r2, #0
 8003780:	6062      	str	r2, [r4, #4]
 8003782:	04d9      	lsls	r1, r3, #19
 8003784:	6922      	ldr	r2, [r4, #16]
 8003786:	6022      	str	r2, [r4, #0]
 8003788:	d504      	bpl.n	8003794 <__sflush_r+0x7c>
 800378a:	1c42      	adds	r2, r0, #1
 800378c:	d101      	bne.n	8003792 <__sflush_r+0x7a>
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	b903      	cbnz	r3, 8003794 <__sflush_r+0x7c>
 8003792:	6560      	str	r0, [r4, #84]	; 0x54
 8003794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003796:	602f      	str	r7, [r5, #0]
 8003798:	2900      	cmp	r1, #0
 800379a:	d0ca      	beq.n	8003732 <__sflush_r+0x1a>
 800379c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037a0:	4299      	cmp	r1, r3
 80037a2:	d002      	beq.n	80037aa <__sflush_r+0x92>
 80037a4:	4628      	mov	r0, r5
 80037a6:	f000 f9d7 	bl	8003b58 <_free_r>
 80037aa:	2000      	movs	r0, #0
 80037ac:	6360      	str	r0, [r4, #52]	; 0x34
 80037ae:	e7c1      	b.n	8003734 <__sflush_r+0x1c>
 80037b0:	6a21      	ldr	r1, [r4, #32]
 80037b2:	2301      	movs	r3, #1
 80037b4:	4628      	mov	r0, r5
 80037b6:	47b0      	blx	r6
 80037b8:	1c41      	adds	r1, r0, #1
 80037ba:	d1c7      	bne.n	800374c <__sflush_r+0x34>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0c4      	beq.n	800374c <__sflush_r+0x34>
 80037c2:	2b1d      	cmp	r3, #29
 80037c4:	d001      	beq.n	80037ca <__sflush_r+0xb2>
 80037c6:	2b16      	cmp	r3, #22
 80037c8:	d101      	bne.n	80037ce <__sflush_r+0xb6>
 80037ca:	602f      	str	r7, [r5, #0]
 80037cc:	e7b1      	b.n	8003732 <__sflush_r+0x1a>
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	e7ad      	b.n	8003734 <__sflush_r+0x1c>
 80037d8:	690f      	ldr	r7, [r1, #16]
 80037da:	2f00      	cmp	r7, #0
 80037dc:	d0a9      	beq.n	8003732 <__sflush_r+0x1a>
 80037de:	0793      	lsls	r3, r2, #30
 80037e0:	680e      	ldr	r6, [r1, #0]
 80037e2:	bf08      	it	eq
 80037e4:	694b      	ldreq	r3, [r1, #20]
 80037e6:	600f      	str	r7, [r1, #0]
 80037e8:	bf18      	it	ne
 80037ea:	2300      	movne	r3, #0
 80037ec:	eba6 0807 	sub.w	r8, r6, r7
 80037f0:	608b      	str	r3, [r1, #8]
 80037f2:	f1b8 0f00 	cmp.w	r8, #0
 80037f6:	dd9c      	ble.n	8003732 <__sflush_r+0x1a>
 80037f8:	6a21      	ldr	r1, [r4, #32]
 80037fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037fc:	4643      	mov	r3, r8
 80037fe:	463a      	mov	r2, r7
 8003800:	4628      	mov	r0, r5
 8003802:	47b0      	blx	r6
 8003804:	2800      	cmp	r0, #0
 8003806:	dc06      	bgt.n	8003816 <__sflush_r+0xfe>
 8003808:	89a3      	ldrh	r3, [r4, #12]
 800380a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800380e:	81a3      	strh	r3, [r4, #12]
 8003810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003814:	e78e      	b.n	8003734 <__sflush_r+0x1c>
 8003816:	4407      	add	r7, r0
 8003818:	eba8 0800 	sub.w	r8, r8, r0
 800381c:	e7e9      	b.n	80037f2 <__sflush_r+0xda>
 800381e:	bf00      	nop
 8003820:	20400001 	.word	0x20400001

08003824 <_fflush_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	690b      	ldr	r3, [r1, #16]
 8003828:	4605      	mov	r5, r0
 800382a:	460c      	mov	r4, r1
 800382c:	b913      	cbnz	r3, 8003834 <_fflush_r+0x10>
 800382e:	2500      	movs	r5, #0
 8003830:	4628      	mov	r0, r5
 8003832:	bd38      	pop	{r3, r4, r5, pc}
 8003834:	b118      	cbz	r0, 800383e <_fflush_r+0x1a>
 8003836:	6983      	ldr	r3, [r0, #24]
 8003838:	b90b      	cbnz	r3, 800383e <_fflush_r+0x1a>
 800383a:	f000 f887 	bl	800394c <__sinit>
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <_fflush_r+0x6c>)
 8003840:	429c      	cmp	r4, r3
 8003842:	d11b      	bne.n	800387c <_fflush_r+0x58>
 8003844:	686c      	ldr	r4, [r5, #4]
 8003846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ef      	beq.n	800382e <_fflush_r+0xa>
 800384e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003850:	07d0      	lsls	r0, r2, #31
 8003852:	d404      	bmi.n	800385e <_fflush_r+0x3a>
 8003854:	0599      	lsls	r1, r3, #22
 8003856:	d402      	bmi.n	800385e <_fflush_r+0x3a>
 8003858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800385a:	f000 f915 	bl	8003a88 <__retarget_lock_acquire_recursive>
 800385e:	4628      	mov	r0, r5
 8003860:	4621      	mov	r1, r4
 8003862:	f7ff ff59 	bl	8003718 <__sflush_r>
 8003866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003868:	07da      	lsls	r2, r3, #31
 800386a:	4605      	mov	r5, r0
 800386c:	d4e0      	bmi.n	8003830 <_fflush_r+0xc>
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	059b      	lsls	r3, r3, #22
 8003872:	d4dd      	bmi.n	8003830 <_fflush_r+0xc>
 8003874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003876:	f000 f908 	bl	8003a8a <__retarget_lock_release_recursive>
 800387a:	e7d9      	b.n	8003830 <_fflush_r+0xc>
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <_fflush_r+0x70>)
 800387e:	429c      	cmp	r4, r3
 8003880:	d101      	bne.n	8003886 <_fflush_r+0x62>
 8003882:	68ac      	ldr	r4, [r5, #8]
 8003884:	e7df      	b.n	8003846 <_fflush_r+0x22>
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <_fflush_r+0x74>)
 8003888:	429c      	cmp	r4, r3
 800388a:	bf08      	it	eq
 800388c:	68ec      	ldreq	r4, [r5, #12]
 800388e:	e7da      	b.n	8003846 <_fflush_r+0x22>
 8003890:	080045ec 	.word	0x080045ec
 8003894:	0800460c 	.word	0x0800460c
 8003898:	080045cc 	.word	0x080045cc

0800389c <std>:
 800389c:	2300      	movs	r3, #0
 800389e:	b510      	push	{r4, lr}
 80038a0:	4604      	mov	r4, r0
 80038a2:	e9c0 3300 	strd	r3, r3, [r0]
 80038a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038aa:	6083      	str	r3, [r0, #8]
 80038ac:	8181      	strh	r1, [r0, #12]
 80038ae:	6643      	str	r3, [r0, #100]	; 0x64
 80038b0:	81c2      	strh	r2, [r0, #14]
 80038b2:	6183      	str	r3, [r0, #24]
 80038b4:	4619      	mov	r1, r3
 80038b6:	2208      	movs	r2, #8
 80038b8:	305c      	adds	r0, #92	; 0x5c
 80038ba:	f7ff fdcf 	bl	800345c <memset>
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <std+0x38>)
 80038c0:	6263      	str	r3, [r4, #36]	; 0x24
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <std+0x3c>)
 80038c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <std+0x40>)
 80038c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <std+0x44>)
 80038cc:	6224      	str	r4, [r4, #32]
 80038ce:	6323      	str	r3, [r4, #48]	; 0x30
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	bf00      	nop
 80038d4:	08004319 	.word	0x08004319
 80038d8:	0800433b 	.word	0x0800433b
 80038dc:	08004373 	.word	0x08004373
 80038e0:	08004397 	.word	0x08004397

080038e4 <_cleanup_r>:
 80038e4:	4901      	ldr	r1, [pc, #4]	; (80038ec <_cleanup_r+0x8>)
 80038e6:	f000 b8af 	b.w	8003a48 <_fwalk_reent>
 80038ea:	bf00      	nop
 80038ec:	08003825 	.word	0x08003825

080038f0 <__sfmoreglue>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	2268      	movs	r2, #104	; 0x68
 80038f4:	1e4d      	subs	r5, r1, #1
 80038f6:	4355      	muls	r5, r2
 80038f8:	460e      	mov	r6, r1
 80038fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038fe:	f000 f997 	bl	8003c30 <_malloc_r>
 8003902:	4604      	mov	r4, r0
 8003904:	b140      	cbz	r0, 8003918 <__sfmoreglue+0x28>
 8003906:	2100      	movs	r1, #0
 8003908:	e9c0 1600 	strd	r1, r6, [r0]
 800390c:	300c      	adds	r0, #12
 800390e:	60a0      	str	r0, [r4, #8]
 8003910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003914:	f7ff fda2 	bl	800345c <memset>
 8003918:	4620      	mov	r0, r4
 800391a:	bd70      	pop	{r4, r5, r6, pc}

0800391c <__sfp_lock_acquire>:
 800391c:	4801      	ldr	r0, [pc, #4]	; (8003924 <__sfp_lock_acquire+0x8>)
 800391e:	f000 b8b3 	b.w	8003a88 <__retarget_lock_acquire_recursive>
 8003922:	bf00      	nop
 8003924:	20000119 	.word	0x20000119

08003928 <__sfp_lock_release>:
 8003928:	4801      	ldr	r0, [pc, #4]	; (8003930 <__sfp_lock_release+0x8>)
 800392a:	f000 b8ae 	b.w	8003a8a <__retarget_lock_release_recursive>
 800392e:	bf00      	nop
 8003930:	20000119 	.word	0x20000119

08003934 <__sinit_lock_acquire>:
 8003934:	4801      	ldr	r0, [pc, #4]	; (800393c <__sinit_lock_acquire+0x8>)
 8003936:	f000 b8a7 	b.w	8003a88 <__retarget_lock_acquire_recursive>
 800393a:	bf00      	nop
 800393c:	2000011a 	.word	0x2000011a

08003940 <__sinit_lock_release>:
 8003940:	4801      	ldr	r0, [pc, #4]	; (8003948 <__sinit_lock_release+0x8>)
 8003942:	f000 b8a2 	b.w	8003a8a <__retarget_lock_release_recursive>
 8003946:	bf00      	nop
 8003948:	2000011a 	.word	0x2000011a

0800394c <__sinit>:
 800394c:	b510      	push	{r4, lr}
 800394e:	4604      	mov	r4, r0
 8003950:	f7ff fff0 	bl	8003934 <__sinit_lock_acquire>
 8003954:	69a3      	ldr	r3, [r4, #24]
 8003956:	b11b      	cbz	r3, 8003960 <__sinit+0x14>
 8003958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800395c:	f7ff bff0 	b.w	8003940 <__sinit_lock_release>
 8003960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003964:	6523      	str	r3, [r4, #80]	; 0x50
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <__sinit+0x68>)
 8003968:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <__sinit+0x6c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	62a2      	str	r2, [r4, #40]	; 0x28
 800396e:	42a3      	cmp	r3, r4
 8003970:	bf04      	itt	eq
 8003972:	2301      	moveq	r3, #1
 8003974:	61a3      	streq	r3, [r4, #24]
 8003976:	4620      	mov	r0, r4
 8003978:	f000 f820 	bl	80039bc <__sfp>
 800397c:	6060      	str	r0, [r4, #4]
 800397e:	4620      	mov	r0, r4
 8003980:	f000 f81c 	bl	80039bc <__sfp>
 8003984:	60a0      	str	r0, [r4, #8]
 8003986:	4620      	mov	r0, r4
 8003988:	f000 f818 	bl	80039bc <__sfp>
 800398c:	2200      	movs	r2, #0
 800398e:	60e0      	str	r0, [r4, #12]
 8003990:	2104      	movs	r1, #4
 8003992:	6860      	ldr	r0, [r4, #4]
 8003994:	f7ff ff82 	bl	800389c <std>
 8003998:	68a0      	ldr	r0, [r4, #8]
 800399a:	2201      	movs	r2, #1
 800399c:	2109      	movs	r1, #9
 800399e:	f7ff ff7d 	bl	800389c <std>
 80039a2:	68e0      	ldr	r0, [r4, #12]
 80039a4:	2202      	movs	r2, #2
 80039a6:	2112      	movs	r1, #18
 80039a8:	f7ff ff78 	bl	800389c <std>
 80039ac:	2301      	movs	r3, #1
 80039ae:	61a3      	str	r3, [r4, #24]
 80039b0:	e7d2      	b.n	8003958 <__sinit+0xc>
 80039b2:	bf00      	nop
 80039b4:	080045c8 	.word	0x080045c8
 80039b8:	080038e5 	.word	0x080038e5

080039bc <__sfp>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	4607      	mov	r7, r0
 80039c0:	f7ff ffac 	bl	800391c <__sfp_lock_acquire>
 80039c4:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <__sfp+0x84>)
 80039c6:	681e      	ldr	r6, [r3, #0]
 80039c8:	69b3      	ldr	r3, [r6, #24]
 80039ca:	b913      	cbnz	r3, 80039d2 <__sfp+0x16>
 80039cc:	4630      	mov	r0, r6
 80039ce:	f7ff ffbd 	bl	800394c <__sinit>
 80039d2:	3648      	adds	r6, #72	; 0x48
 80039d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039d8:	3b01      	subs	r3, #1
 80039da:	d503      	bpl.n	80039e4 <__sfp+0x28>
 80039dc:	6833      	ldr	r3, [r6, #0]
 80039de:	b30b      	cbz	r3, 8003a24 <__sfp+0x68>
 80039e0:	6836      	ldr	r6, [r6, #0]
 80039e2:	e7f7      	b.n	80039d4 <__sfp+0x18>
 80039e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039e8:	b9d5      	cbnz	r5, 8003a20 <__sfp+0x64>
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <__sfp+0x88>)
 80039ec:	60e3      	str	r3, [r4, #12]
 80039ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039f2:	6665      	str	r5, [r4, #100]	; 0x64
 80039f4:	f000 f847 	bl	8003a86 <__retarget_lock_init_recursive>
 80039f8:	f7ff ff96 	bl	8003928 <__sfp_lock_release>
 80039fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a04:	6025      	str	r5, [r4, #0]
 8003a06:	61a5      	str	r5, [r4, #24]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a10:	f7ff fd24 	bl	800345c <memset>
 8003a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a20:	3468      	adds	r4, #104	; 0x68
 8003a22:	e7d9      	b.n	80039d8 <__sfp+0x1c>
 8003a24:	2104      	movs	r1, #4
 8003a26:	4638      	mov	r0, r7
 8003a28:	f7ff ff62 	bl	80038f0 <__sfmoreglue>
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	6030      	str	r0, [r6, #0]
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d1d5      	bne.n	80039e0 <__sfp+0x24>
 8003a34:	f7ff ff78 	bl	8003928 <__sfp_lock_release>
 8003a38:	230c      	movs	r3, #12
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	e7ee      	b.n	8003a1c <__sfp+0x60>
 8003a3e:	bf00      	nop
 8003a40:	080045c8 	.word	0x080045c8
 8003a44:	ffff0001 	.word	0xffff0001

08003a48 <_fwalk_reent>:
 8003a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	4688      	mov	r8, r1
 8003a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a54:	2700      	movs	r7, #0
 8003a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8003a5e:	d505      	bpl.n	8003a6c <_fwalk_reent+0x24>
 8003a60:	6824      	ldr	r4, [r4, #0]
 8003a62:	2c00      	cmp	r4, #0
 8003a64:	d1f7      	bne.n	8003a56 <_fwalk_reent+0xe>
 8003a66:	4638      	mov	r0, r7
 8003a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a6c:	89ab      	ldrh	r3, [r5, #12]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d907      	bls.n	8003a82 <_fwalk_reent+0x3a>
 8003a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a76:	3301      	adds	r3, #1
 8003a78:	d003      	beq.n	8003a82 <_fwalk_reent+0x3a>
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	47c0      	blx	r8
 8003a80:	4307      	orrs	r7, r0
 8003a82:	3568      	adds	r5, #104	; 0x68
 8003a84:	e7e9      	b.n	8003a5a <_fwalk_reent+0x12>

08003a86 <__retarget_lock_init_recursive>:
 8003a86:	4770      	bx	lr

08003a88 <__retarget_lock_acquire_recursive>:
 8003a88:	4770      	bx	lr

08003a8a <__retarget_lock_release_recursive>:
 8003a8a:	4770      	bx	lr

08003a8c <__swhatbuf_r>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	460e      	mov	r6, r1
 8003a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a94:	2900      	cmp	r1, #0
 8003a96:	b096      	sub	sp, #88	; 0x58
 8003a98:	4614      	mov	r4, r2
 8003a9a:	461d      	mov	r5, r3
 8003a9c:	da08      	bge.n	8003ab0 <__swhatbuf_r+0x24>
 8003a9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	602a      	str	r2, [r5, #0]
 8003aa6:	061a      	lsls	r2, r3, #24
 8003aa8:	d410      	bmi.n	8003acc <__swhatbuf_r+0x40>
 8003aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aae:	e00e      	b.n	8003ace <__swhatbuf_r+0x42>
 8003ab0:	466a      	mov	r2, sp
 8003ab2:	f000 fc97 	bl	80043e4 <_fstat_r>
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	dbf1      	blt.n	8003a9e <__swhatbuf_r+0x12>
 8003aba:	9a01      	ldr	r2, [sp, #4]
 8003abc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ac0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ac4:	425a      	negs	r2, r3
 8003ac6:	415a      	adcs	r2, r3
 8003ac8:	602a      	str	r2, [r5, #0]
 8003aca:	e7ee      	b.n	8003aaa <__swhatbuf_r+0x1e>
 8003acc:	2340      	movs	r3, #64	; 0x40
 8003ace:	2000      	movs	r0, #0
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	b016      	add	sp, #88	; 0x58
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ad8 <__smakebuf_r>:
 8003ad8:	898b      	ldrh	r3, [r1, #12]
 8003ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003adc:	079d      	lsls	r5, r3, #30
 8003ade:	4606      	mov	r6, r0
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	d507      	bpl.n	8003af4 <__smakebuf_r+0x1c>
 8003ae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	6123      	str	r3, [r4, #16]
 8003aec:	2301      	movs	r3, #1
 8003aee:	6163      	str	r3, [r4, #20]
 8003af0:	b002      	add	sp, #8
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	ab01      	add	r3, sp, #4
 8003af6:	466a      	mov	r2, sp
 8003af8:	f7ff ffc8 	bl	8003a8c <__swhatbuf_r>
 8003afc:	9900      	ldr	r1, [sp, #0]
 8003afe:	4605      	mov	r5, r0
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 f895 	bl	8003c30 <_malloc_r>
 8003b06:	b948      	cbnz	r0, 8003b1c <__smakebuf_r+0x44>
 8003b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0c:	059a      	lsls	r2, r3, #22
 8003b0e:	d4ef      	bmi.n	8003af0 <__smakebuf_r+0x18>
 8003b10:	f023 0303 	bic.w	r3, r3, #3
 8003b14:	f043 0302 	orr.w	r3, r3, #2
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	e7e3      	b.n	8003ae4 <__smakebuf_r+0xc>
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <__smakebuf_r+0x7c>)
 8003b1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	6020      	str	r0, [r4, #0]
 8003b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b28:	81a3      	strh	r3, [r4, #12]
 8003b2a:	9b00      	ldr	r3, [sp, #0]
 8003b2c:	6163      	str	r3, [r4, #20]
 8003b2e:	9b01      	ldr	r3, [sp, #4]
 8003b30:	6120      	str	r0, [r4, #16]
 8003b32:	b15b      	cbz	r3, 8003b4c <__smakebuf_r+0x74>
 8003b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f000 fc65 	bl	8004408 <_isatty_r>
 8003b3e:	b128      	cbz	r0, 8003b4c <__smakebuf_r+0x74>
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	81a3      	strh	r3, [r4, #12]
 8003b4c:	89a0      	ldrh	r0, [r4, #12]
 8003b4e:	4305      	orrs	r5, r0
 8003b50:	81a5      	strh	r5, [r4, #12]
 8003b52:	e7cd      	b.n	8003af0 <__smakebuf_r+0x18>
 8003b54:	080038e5 	.word	0x080038e5

08003b58 <_free_r>:
 8003b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b5a:	2900      	cmp	r1, #0
 8003b5c:	d044      	beq.n	8003be8 <_free_r+0x90>
 8003b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b62:	9001      	str	r0, [sp, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f1a1 0404 	sub.w	r4, r1, #4
 8003b6a:	bfb8      	it	lt
 8003b6c:	18e4      	addlt	r4, r4, r3
 8003b6e:	f000 fc95 	bl	800449c <__malloc_lock>
 8003b72:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <_free_r+0x94>)
 8003b74:	9801      	ldr	r0, [sp, #4]
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	b933      	cbnz	r3, 8003b88 <_free_r+0x30>
 8003b7a:	6063      	str	r3, [r4, #4]
 8003b7c:	6014      	str	r4, [r2, #0]
 8003b7e:	b003      	add	sp, #12
 8003b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b84:	f000 bc90 	b.w	80044a8 <__malloc_unlock>
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	d908      	bls.n	8003b9e <_free_r+0x46>
 8003b8c:	6825      	ldr	r5, [r4, #0]
 8003b8e:	1961      	adds	r1, r4, r5
 8003b90:	428b      	cmp	r3, r1
 8003b92:	bf01      	itttt	eq
 8003b94:	6819      	ldreq	r1, [r3, #0]
 8003b96:	685b      	ldreq	r3, [r3, #4]
 8003b98:	1949      	addeq	r1, r1, r5
 8003b9a:	6021      	streq	r1, [r4, #0]
 8003b9c:	e7ed      	b.n	8003b7a <_free_r+0x22>
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	b10b      	cbz	r3, 8003ba8 <_free_r+0x50>
 8003ba4:	42a3      	cmp	r3, r4
 8003ba6:	d9fa      	bls.n	8003b9e <_free_r+0x46>
 8003ba8:	6811      	ldr	r1, [r2, #0]
 8003baa:	1855      	adds	r5, r2, r1
 8003bac:	42a5      	cmp	r5, r4
 8003bae:	d10b      	bne.n	8003bc8 <_free_r+0x70>
 8003bb0:	6824      	ldr	r4, [r4, #0]
 8003bb2:	4421      	add	r1, r4
 8003bb4:	1854      	adds	r4, r2, r1
 8003bb6:	42a3      	cmp	r3, r4
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	d1e0      	bne.n	8003b7e <_free_r+0x26>
 8003bbc:	681c      	ldr	r4, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	6053      	str	r3, [r2, #4]
 8003bc2:	4421      	add	r1, r4
 8003bc4:	6011      	str	r1, [r2, #0]
 8003bc6:	e7da      	b.n	8003b7e <_free_r+0x26>
 8003bc8:	d902      	bls.n	8003bd0 <_free_r+0x78>
 8003bca:	230c      	movs	r3, #12
 8003bcc:	6003      	str	r3, [r0, #0]
 8003bce:	e7d6      	b.n	8003b7e <_free_r+0x26>
 8003bd0:	6825      	ldr	r5, [r4, #0]
 8003bd2:	1961      	adds	r1, r4, r5
 8003bd4:	428b      	cmp	r3, r1
 8003bd6:	bf04      	itt	eq
 8003bd8:	6819      	ldreq	r1, [r3, #0]
 8003bda:	685b      	ldreq	r3, [r3, #4]
 8003bdc:	6063      	str	r3, [r4, #4]
 8003bde:	bf04      	itt	eq
 8003be0:	1949      	addeq	r1, r1, r5
 8003be2:	6021      	streq	r1, [r4, #0]
 8003be4:	6054      	str	r4, [r2, #4]
 8003be6:	e7ca      	b.n	8003b7e <_free_r+0x26>
 8003be8:	b003      	add	sp, #12
 8003bea:	bd30      	pop	{r4, r5, pc}
 8003bec:	2000011c 	.word	0x2000011c

08003bf0 <sbrk_aligned>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	4e0e      	ldr	r6, [pc, #56]	; (8003c2c <sbrk_aligned+0x3c>)
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	6831      	ldr	r1, [r6, #0]
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	b911      	cbnz	r1, 8003c02 <sbrk_aligned+0x12>
 8003bfc:	f000 fb7c 	bl	80042f8 <_sbrk_r>
 8003c00:	6030      	str	r0, [r6, #0]
 8003c02:	4621      	mov	r1, r4
 8003c04:	4628      	mov	r0, r5
 8003c06:	f000 fb77 	bl	80042f8 <_sbrk_r>
 8003c0a:	1c43      	adds	r3, r0, #1
 8003c0c:	d00a      	beq.n	8003c24 <sbrk_aligned+0x34>
 8003c0e:	1cc4      	adds	r4, r0, #3
 8003c10:	f024 0403 	bic.w	r4, r4, #3
 8003c14:	42a0      	cmp	r0, r4
 8003c16:	d007      	beq.n	8003c28 <sbrk_aligned+0x38>
 8003c18:	1a21      	subs	r1, r4, r0
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	f000 fb6c 	bl	80042f8 <_sbrk_r>
 8003c20:	3001      	adds	r0, #1
 8003c22:	d101      	bne.n	8003c28 <sbrk_aligned+0x38>
 8003c24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c28:	4620      	mov	r0, r4
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	20000120 	.word	0x20000120

08003c30 <_malloc_r>:
 8003c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c34:	1ccd      	adds	r5, r1, #3
 8003c36:	f025 0503 	bic.w	r5, r5, #3
 8003c3a:	3508      	adds	r5, #8
 8003c3c:	2d0c      	cmp	r5, #12
 8003c3e:	bf38      	it	cc
 8003c40:	250c      	movcc	r5, #12
 8003c42:	2d00      	cmp	r5, #0
 8003c44:	4607      	mov	r7, r0
 8003c46:	db01      	blt.n	8003c4c <_malloc_r+0x1c>
 8003c48:	42a9      	cmp	r1, r5
 8003c4a:	d905      	bls.n	8003c58 <_malloc_r+0x28>
 8003c4c:	230c      	movs	r3, #12
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	2600      	movs	r6, #0
 8003c52:	4630      	mov	r0, r6
 8003c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c58:	4e2e      	ldr	r6, [pc, #184]	; (8003d14 <_malloc_r+0xe4>)
 8003c5a:	f000 fc1f 	bl	800449c <__malloc_lock>
 8003c5e:	6833      	ldr	r3, [r6, #0]
 8003c60:	461c      	mov	r4, r3
 8003c62:	bb34      	cbnz	r4, 8003cb2 <_malloc_r+0x82>
 8003c64:	4629      	mov	r1, r5
 8003c66:	4638      	mov	r0, r7
 8003c68:	f7ff ffc2 	bl	8003bf0 <sbrk_aligned>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	4604      	mov	r4, r0
 8003c70:	d14d      	bne.n	8003d0e <_malloc_r+0xde>
 8003c72:	6834      	ldr	r4, [r6, #0]
 8003c74:	4626      	mov	r6, r4
 8003c76:	2e00      	cmp	r6, #0
 8003c78:	d140      	bne.n	8003cfc <_malloc_r+0xcc>
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	4631      	mov	r1, r6
 8003c7e:	4638      	mov	r0, r7
 8003c80:	eb04 0803 	add.w	r8, r4, r3
 8003c84:	f000 fb38 	bl	80042f8 <_sbrk_r>
 8003c88:	4580      	cmp	r8, r0
 8003c8a:	d13a      	bne.n	8003d02 <_malloc_r+0xd2>
 8003c8c:	6821      	ldr	r1, [r4, #0]
 8003c8e:	3503      	adds	r5, #3
 8003c90:	1a6d      	subs	r5, r5, r1
 8003c92:	f025 0503 	bic.w	r5, r5, #3
 8003c96:	3508      	adds	r5, #8
 8003c98:	2d0c      	cmp	r5, #12
 8003c9a:	bf38      	it	cc
 8003c9c:	250c      	movcc	r5, #12
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	f7ff ffa5 	bl	8003bf0 <sbrk_aligned>
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d02b      	beq.n	8003d02 <_malloc_r+0xd2>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	442b      	add	r3, r5
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	e00e      	b.n	8003cd0 <_malloc_r+0xa0>
 8003cb2:	6822      	ldr	r2, [r4, #0]
 8003cb4:	1b52      	subs	r2, r2, r5
 8003cb6:	d41e      	bmi.n	8003cf6 <_malloc_r+0xc6>
 8003cb8:	2a0b      	cmp	r2, #11
 8003cba:	d916      	bls.n	8003cea <_malloc_r+0xba>
 8003cbc:	1961      	adds	r1, r4, r5
 8003cbe:	42a3      	cmp	r3, r4
 8003cc0:	6025      	str	r5, [r4, #0]
 8003cc2:	bf18      	it	ne
 8003cc4:	6059      	strne	r1, [r3, #4]
 8003cc6:	6863      	ldr	r3, [r4, #4]
 8003cc8:	bf08      	it	eq
 8003cca:	6031      	streq	r1, [r6, #0]
 8003ccc:	5162      	str	r2, [r4, r5]
 8003cce:	604b      	str	r3, [r1, #4]
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f104 060b 	add.w	r6, r4, #11
 8003cd6:	f000 fbe7 	bl	80044a8 <__malloc_unlock>
 8003cda:	f026 0607 	bic.w	r6, r6, #7
 8003cde:	1d23      	adds	r3, r4, #4
 8003ce0:	1af2      	subs	r2, r6, r3
 8003ce2:	d0b6      	beq.n	8003c52 <_malloc_r+0x22>
 8003ce4:	1b9b      	subs	r3, r3, r6
 8003ce6:	50a3      	str	r3, [r4, r2]
 8003ce8:	e7b3      	b.n	8003c52 <_malloc_r+0x22>
 8003cea:	6862      	ldr	r2, [r4, #4]
 8003cec:	42a3      	cmp	r3, r4
 8003cee:	bf0c      	ite	eq
 8003cf0:	6032      	streq	r2, [r6, #0]
 8003cf2:	605a      	strne	r2, [r3, #4]
 8003cf4:	e7ec      	b.n	8003cd0 <_malloc_r+0xa0>
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	6864      	ldr	r4, [r4, #4]
 8003cfa:	e7b2      	b.n	8003c62 <_malloc_r+0x32>
 8003cfc:	4634      	mov	r4, r6
 8003cfe:	6876      	ldr	r6, [r6, #4]
 8003d00:	e7b9      	b.n	8003c76 <_malloc_r+0x46>
 8003d02:	230c      	movs	r3, #12
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4638      	mov	r0, r7
 8003d08:	f000 fbce 	bl	80044a8 <__malloc_unlock>
 8003d0c:	e7a1      	b.n	8003c52 <_malloc_r+0x22>
 8003d0e:	6025      	str	r5, [r4, #0]
 8003d10:	e7de      	b.n	8003cd0 <_malloc_r+0xa0>
 8003d12:	bf00      	nop
 8003d14:	2000011c 	.word	0x2000011c

08003d18 <__ssputs_r>:
 8003d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d1c:	688e      	ldr	r6, [r1, #8]
 8003d1e:	429e      	cmp	r6, r3
 8003d20:	4682      	mov	sl, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	4690      	mov	r8, r2
 8003d26:	461f      	mov	r7, r3
 8003d28:	d838      	bhi.n	8003d9c <__ssputs_r+0x84>
 8003d2a:	898a      	ldrh	r2, [r1, #12]
 8003d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d30:	d032      	beq.n	8003d98 <__ssputs_r+0x80>
 8003d32:	6825      	ldr	r5, [r4, #0]
 8003d34:	6909      	ldr	r1, [r1, #16]
 8003d36:	eba5 0901 	sub.w	r9, r5, r1
 8003d3a:	6965      	ldr	r5, [r4, #20]
 8003d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d44:	3301      	adds	r3, #1
 8003d46:	444b      	add	r3, r9
 8003d48:	106d      	asrs	r5, r5, #1
 8003d4a:	429d      	cmp	r5, r3
 8003d4c:	bf38      	it	cc
 8003d4e:	461d      	movcc	r5, r3
 8003d50:	0553      	lsls	r3, r2, #21
 8003d52:	d531      	bpl.n	8003db8 <__ssputs_r+0xa0>
 8003d54:	4629      	mov	r1, r5
 8003d56:	f7ff ff6b 	bl	8003c30 <_malloc_r>
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	b950      	cbnz	r0, 8003d74 <__ssputs_r+0x5c>
 8003d5e:	230c      	movs	r3, #12
 8003d60:	f8ca 3000 	str.w	r3, [sl]
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d6a:	81a3      	strh	r3, [r4, #12]
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d74:	6921      	ldr	r1, [r4, #16]
 8003d76:	464a      	mov	r2, r9
 8003d78:	f000 fb68 	bl	800444c <memcpy>
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	6126      	str	r6, [r4, #16]
 8003d8a:	6165      	str	r5, [r4, #20]
 8003d8c:	444e      	add	r6, r9
 8003d8e:	eba5 0509 	sub.w	r5, r5, r9
 8003d92:	6026      	str	r6, [r4, #0]
 8003d94:	60a5      	str	r5, [r4, #8]
 8003d96:	463e      	mov	r6, r7
 8003d98:	42be      	cmp	r6, r7
 8003d9a:	d900      	bls.n	8003d9e <__ssputs_r+0x86>
 8003d9c:	463e      	mov	r6, r7
 8003d9e:	6820      	ldr	r0, [r4, #0]
 8003da0:	4632      	mov	r2, r6
 8003da2:	4641      	mov	r1, r8
 8003da4:	f000 fb60 	bl	8004468 <memmove>
 8003da8:	68a3      	ldr	r3, [r4, #8]
 8003daa:	1b9b      	subs	r3, r3, r6
 8003dac:	60a3      	str	r3, [r4, #8]
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	4433      	add	r3, r6
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	2000      	movs	r0, #0
 8003db6:	e7db      	b.n	8003d70 <__ssputs_r+0x58>
 8003db8:	462a      	mov	r2, r5
 8003dba:	f000 fb7b 	bl	80044b4 <_realloc_r>
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d1e1      	bne.n	8003d88 <__ssputs_r+0x70>
 8003dc4:	6921      	ldr	r1, [r4, #16]
 8003dc6:	4650      	mov	r0, sl
 8003dc8:	f7ff fec6 	bl	8003b58 <_free_r>
 8003dcc:	e7c7      	b.n	8003d5e <__ssputs_r+0x46>
	...

08003dd0 <_svfiprintf_r>:
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	4698      	mov	r8, r3
 8003dd6:	898b      	ldrh	r3, [r1, #12]
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	b09d      	sub	sp, #116	; 0x74
 8003ddc:	4607      	mov	r7, r0
 8003dde:	460d      	mov	r5, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	d50e      	bpl.n	8003e02 <_svfiprintf_r+0x32>
 8003de4:	690b      	ldr	r3, [r1, #16]
 8003de6:	b963      	cbnz	r3, 8003e02 <_svfiprintf_r+0x32>
 8003de8:	2140      	movs	r1, #64	; 0x40
 8003dea:	f7ff ff21 	bl	8003c30 <_malloc_r>
 8003dee:	6028      	str	r0, [r5, #0]
 8003df0:	6128      	str	r0, [r5, #16]
 8003df2:	b920      	cbnz	r0, 8003dfe <_svfiprintf_r+0x2e>
 8003df4:	230c      	movs	r3, #12
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dfc:	e0d1      	b.n	8003fa2 <_svfiprintf_r+0x1d2>
 8003dfe:	2340      	movs	r3, #64	; 0x40
 8003e00:	616b      	str	r3, [r5, #20]
 8003e02:	2300      	movs	r3, #0
 8003e04:	9309      	str	r3, [sp, #36]	; 0x24
 8003e06:	2320      	movs	r3, #32
 8003e08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e10:	2330      	movs	r3, #48	; 0x30
 8003e12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fbc <_svfiprintf_r+0x1ec>
 8003e16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e1a:	f04f 0901 	mov.w	r9, #1
 8003e1e:	4623      	mov	r3, r4
 8003e20:	469a      	mov	sl, r3
 8003e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e26:	b10a      	cbz	r2, 8003e2c <_svfiprintf_r+0x5c>
 8003e28:	2a25      	cmp	r2, #37	; 0x25
 8003e2a:	d1f9      	bne.n	8003e20 <_svfiprintf_r+0x50>
 8003e2c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e30:	d00b      	beq.n	8003e4a <_svfiprintf_r+0x7a>
 8003e32:	465b      	mov	r3, fp
 8003e34:	4622      	mov	r2, r4
 8003e36:	4629      	mov	r1, r5
 8003e38:	4638      	mov	r0, r7
 8003e3a:	f7ff ff6d 	bl	8003d18 <__ssputs_r>
 8003e3e:	3001      	adds	r0, #1
 8003e40:	f000 80aa 	beq.w	8003f98 <_svfiprintf_r+0x1c8>
 8003e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e46:	445a      	add	r2, fp
 8003e48:	9209      	str	r2, [sp, #36]	; 0x24
 8003e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80a2 	beq.w	8003f98 <_svfiprintf_r+0x1c8>
 8003e54:	2300      	movs	r3, #0
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e5e:	f10a 0a01 	add.w	sl, sl, #1
 8003e62:	9304      	str	r3, [sp, #16]
 8003e64:	9307      	str	r3, [sp, #28]
 8003e66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e6c:	4654      	mov	r4, sl
 8003e6e:	2205      	movs	r2, #5
 8003e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e74:	4851      	ldr	r0, [pc, #324]	; (8003fbc <_svfiprintf_r+0x1ec>)
 8003e76:	f7fc f9bb 	bl	80001f0 <memchr>
 8003e7a:	9a04      	ldr	r2, [sp, #16]
 8003e7c:	b9d8      	cbnz	r0, 8003eb6 <_svfiprintf_r+0xe6>
 8003e7e:	06d0      	lsls	r0, r2, #27
 8003e80:	bf44      	itt	mi
 8003e82:	2320      	movmi	r3, #32
 8003e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e88:	0711      	lsls	r1, r2, #28
 8003e8a:	bf44      	itt	mi
 8003e8c:	232b      	movmi	r3, #43	; 0x2b
 8003e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e92:	f89a 3000 	ldrb.w	r3, [sl]
 8003e96:	2b2a      	cmp	r3, #42	; 0x2a
 8003e98:	d015      	beq.n	8003ec6 <_svfiprintf_r+0xf6>
 8003e9a:	9a07      	ldr	r2, [sp, #28]
 8003e9c:	4654      	mov	r4, sl
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f04f 0c0a 	mov.w	ip, #10
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eaa:	3b30      	subs	r3, #48	; 0x30
 8003eac:	2b09      	cmp	r3, #9
 8003eae:	d94e      	bls.n	8003f4e <_svfiprintf_r+0x17e>
 8003eb0:	b1b0      	cbz	r0, 8003ee0 <_svfiprintf_r+0x110>
 8003eb2:	9207      	str	r2, [sp, #28]
 8003eb4:	e014      	b.n	8003ee0 <_svfiprintf_r+0x110>
 8003eb6:	eba0 0308 	sub.w	r3, r0, r8
 8003eba:	fa09 f303 	lsl.w	r3, r9, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	46a2      	mov	sl, r4
 8003ec4:	e7d2      	b.n	8003e6c <_svfiprintf_r+0x9c>
 8003ec6:	9b03      	ldr	r3, [sp, #12]
 8003ec8:	1d19      	adds	r1, r3, #4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	9103      	str	r1, [sp, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bfbb      	ittet	lt
 8003ed2:	425b      	neglt	r3, r3
 8003ed4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ed8:	9307      	strge	r3, [sp, #28]
 8003eda:	9307      	strlt	r3, [sp, #28]
 8003edc:	bfb8      	it	lt
 8003ede:	9204      	strlt	r2, [sp, #16]
 8003ee0:	7823      	ldrb	r3, [r4, #0]
 8003ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ee4:	d10c      	bne.n	8003f00 <_svfiprintf_r+0x130>
 8003ee6:	7863      	ldrb	r3, [r4, #1]
 8003ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8003eea:	d135      	bne.n	8003f58 <_svfiprintf_r+0x188>
 8003eec:	9b03      	ldr	r3, [sp, #12]
 8003eee:	1d1a      	adds	r2, r3, #4
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	9203      	str	r2, [sp, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bfb8      	it	lt
 8003ef8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003efc:	3402      	adds	r4, #2
 8003efe:	9305      	str	r3, [sp, #20]
 8003f00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fcc <_svfiprintf_r+0x1fc>
 8003f04:	7821      	ldrb	r1, [r4, #0]
 8003f06:	2203      	movs	r2, #3
 8003f08:	4650      	mov	r0, sl
 8003f0a:	f7fc f971 	bl	80001f0 <memchr>
 8003f0e:	b140      	cbz	r0, 8003f22 <_svfiprintf_r+0x152>
 8003f10:	2340      	movs	r3, #64	; 0x40
 8003f12:	eba0 000a 	sub.w	r0, r0, sl
 8003f16:	fa03 f000 	lsl.w	r0, r3, r0
 8003f1a:	9b04      	ldr	r3, [sp, #16]
 8003f1c:	4303      	orrs	r3, r0
 8003f1e:	3401      	adds	r4, #1
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f26:	4826      	ldr	r0, [pc, #152]	; (8003fc0 <_svfiprintf_r+0x1f0>)
 8003f28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f2c:	2206      	movs	r2, #6
 8003f2e:	f7fc f95f 	bl	80001f0 <memchr>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d038      	beq.n	8003fa8 <_svfiprintf_r+0x1d8>
 8003f36:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <_svfiprintf_r+0x1f4>)
 8003f38:	bb1b      	cbnz	r3, 8003f82 <_svfiprintf_r+0x1b2>
 8003f3a:	9b03      	ldr	r3, [sp, #12]
 8003f3c:	3307      	adds	r3, #7
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	3308      	adds	r3, #8
 8003f44:	9303      	str	r3, [sp, #12]
 8003f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f48:	4433      	add	r3, r6
 8003f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f4c:	e767      	b.n	8003e1e <_svfiprintf_r+0x4e>
 8003f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f52:	460c      	mov	r4, r1
 8003f54:	2001      	movs	r0, #1
 8003f56:	e7a5      	b.n	8003ea4 <_svfiprintf_r+0xd4>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	3401      	adds	r4, #1
 8003f5c:	9305      	str	r3, [sp, #20]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f04f 0c0a 	mov.w	ip, #10
 8003f64:	4620      	mov	r0, r4
 8003f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f6a:	3a30      	subs	r2, #48	; 0x30
 8003f6c:	2a09      	cmp	r2, #9
 8003f6e:	d903      	bls.n	8003f78 <_svfiprintf_r+0x1a8>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0c5      	beq.n	8003f00 <_svfiprintf_r+0x130>
 8003f74:	9105      	str	r1, [sp, #20]
 8003f76:	e7c3      	b.n	8003f00 <_svfiprintf_r+0x130>
 8003f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e7f0      	b.n	8003f64 <_svfiprintf_r+0x194>
 8003f82:	ab03      	add	r3, sp, #12
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	462a      	mov	r2, r5
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <_svfiprintf_r+0x1f8>)
 8003f8a:	a904      	add	r1, sp, #16
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f3af 8000 	nop.w
 8003f92:	1c42      	adds	r2, r0, #1
 8003f94:	4606      	mov	r6, r0
 8003f96:	d1d6      	bne.n	8003f46 <_svfiprintf_r+0x176>
 8003f98:	89ab      	ldrh	r3, [r5, #12]
 8003f9a:	065b      	lsls	r3, r3, #25
 8003f9c:	f53f af2c 	bmi.w	8003df8 <_svfiprintf_r+0x28>
 8003fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fa2:	b01d      	add	sp, #116	; 0x74
 8003fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa8:	ab03      	add	r3, sp, #12
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	462a      	mov	r2, r5
 8003fae:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <_svfiprintf_r+0x1f8>)
 8003fb0:	a904      	add	r1, sp, #16
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	f000 f87a 	bl	80040ac <_printf_i>
 8003fb8:	e7eb      	b.n	8003f92 <_svfiprintf_r+0x1c2>
 8003fba:	bf00      	nop
 8003fbc:	0800462c 	.word	0x0800462c
 8003fc0:	08004636 	.word	0x08004636
 8003fc4:	00000000 	.word	0x00000000
 8003fc8:	08003d19 	.word	0x08003d19
 8003fcc:	08004632 	.word	0x08004632

08003fd0 <_printf_common>:
 8003fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	4616      	mov	r6, r2
 8003fd6:	4699      	mov	r9, r3
 8003fd8:	688a      	ldr	r2, [r1, #8]
 8003fda:	690b      	ldr	r3, [r1, #16]
 8003fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	bfb8      	it	lt
 8003fe4:	4613      	movlt	r3, r2
 8003fe6:	6033      	str	r3, [r6, #0]
 8003fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fec:	4607      	mov	r7, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	b10a      	cbz	r2, 8003ff6 <_printf_common+0x26>
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	6033      	str	r3, [r6, #0]
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	0699      	lsls	r1, r3, #26
 8003ffa:	bf42      	ittt	mi
 8003ffc:	6833      	ldrmi	r3, [r6, #0]
 8003ffe:	3302      	addmi	r3, #2
 8004000:	6033      	strmi	r3, [r6, #0]
 8004002:	6825      	ldr	r5, [r4, #0]
 8004004:	f015 0506 	ands.w	r5, r5, #6
 8004008:	d106      	bne.n	8004018 <_printf_common+0x48>
 800400a:	f104 0a19 	add.w	sl, r4, #25
 800400e:	68e3      	ldr	r3, [r4, #12]
 8004010:	6832      	ldr	r2, [r6, #0]
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	42ab      	cmp	r3, r5
 8004016:	dc26      	bgt.n	8004066 <_printf_common+0x96>
 8004018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800401c:	1e13      	subs	r3, r2, #0
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	bf18      	it	ne
 8004022:	2301      	movne	r3, #1
 8004024:	0692      	lsls	r2, r2, #26
 8004026:	d42b      	bmi.n	8004080 <_printf_common+0xb0>
 8004028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800402c:	4649      	mov	r1, r9
 800402e:	4638      	mov	r0, r7
 8004030:	47c0      	blx	r8
 8004032:	3001      	adds	r0, #1
 8004034:	d01e      	beq.n	8004074 <_printf_common+0xa4>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	68e5      	ldr	r5, [r4, #12]
 800403a:	6832      	ldr	r2, [r6, #0]
 800403c:	f003 0306 	and.w	r3, r3, #6
 8004040:	2b04      	cmp	r3, #4
 8004042:	bf08      	it	eq
 8004044:	1aad      	subeq	r5, r5, r2
 8004046:	68a3      	ldr	r3, [r4, #8]
 8004048:	6922      	ldr	r2, [r4, #16]
 800404a:	bf0c      	ite	eq
 800404c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004050:	2500      	movne	r5, #0
 8004052:	4293      	cmp	r3, r2
 8004054:	bfc4      	itt	gt
 8004056:	1a9b      	subgt	r3, r3, r2
 8004058:	18ed      	addgt	r5, r5, r3
 800405a:	2600      	movs	r6, #0
 800405c:	341a      	adds	r4, #26
 800405e:	42b5      	cmp	r5, r6
 8004060:	d11a      	bne.n	8004098 <_printf_common+0xc8>
 8004062:	2000      	movs	r0, #0
 8004064:	e008      	b.n	8004078 <_printf_common+0xa8>
 8004066:	2301      	movs	r3, #1
 8004068:	4652      	mov	r2, sl
 800406a:	4649      	mov	r1, r9
 800406c:	4638      	mov	r0, r7
 800406e:	47c0      	blx	r8
 8004070:	3001      	adds	r0, #1
 8004072:	d103      	bne.n	800407c <_printf_common+0xac>
 8004074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407c:	3501      	adds	r5, #1
 800407e:	e7c6      	b.n	800400e <_printf_common+0x3e>
 8004080:	18e1      	adds	r1, r4, r3
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	2030      	movs	r0, #48	; 0x30
 8004086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800408a:	4422      	add	r2, r4
 800408c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004094:	3302      	adds	r3, #2
 8004096:	e7c7      	b.n	8004028 <_printf_common+0x58>
 8004098:	2301      	movs	r3, #1
 800409a:	4622      	mov	r2, r4
 800409c:	4649      	mov	r1, r9
 800409e:	4638      	mov	r0, r7
 80040a0:	47c0      	blx	r8
 80040a2:	3001      	adds	r0, #1
 80040a4:	d0e6      	beq.n	8004074 <_printf_common+0xa4>
 80040a6:	3601      	adds	r6, #1
 80040a8:	e7d9      	b.n	800405e <_printf_common+0x8e>
	...

080040ac <_printf_i>:
 80040ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	7e0f      	ldrb	r7, [r1, #24]
 80040b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040b4:	2f78      	cmp	r7, #120	; 0x78
 80040b6:	4691      	mov	r9, r2
 80040b8:	4680      	mov	r8, r0
 80040ba:	460c      	mov	r4, r1
 80040bc:	469a      	mov	sl, r3
 80040be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040c2:	d807      	bhi.n	80040d4 <_printf_i+0x28>
 80040c4:	2f62      	cmp	r7, #98	; 0x62
 80040c6:	d80a      	bhi.n	80040de <_printf_i+0x32>
 80040c8:	2f00      	cmp	r7, #0
 80040ca:	f000 80d8 	beq.w	800427e <_printf_i+0x1d2>
 80040ce:	2f58      	cmp	r7, #88	; 0x58
 80040d0:	f000 80a3 	beq.w	800421a <_printf_i+0x16e>
 80040d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040dc:	e03a      	b.n	8004154 <_printf_i+0xa8>
 80040de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040e2:	2b15      	cmp	r3, #21
 80040e4:	d8f6      	bhi.n	80040d4 <_printf_i+0x28>
 80040e6:	a101      	add	r1, pc, #4	; (adr r1, 80040ec <_printf_i+0x40>)
 80040e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040ec:	08004145 	.word	0x08004145
 80040f0:	08004159 	.word	0x08004159
 80040f4:	080040d5 	.word	0x080040d5
 80040f8:	080040d5 	.word	0x080040d5
 80040fc:	080040d5 	.word	0x080040d5
 8004100:	080040d5 	.word	0x080040d5
 8004104:	08004159 	.word	0x08004159
 8004108:	080040d5 	.word	0x080040d5
 800410c:	080040d5 	.word	0x080040d5
 8004110:	080040d5 	.word	0x080040d5
 8004114:	080040d5 	.word	0x080040d5
 8004118:	08004265 	.word	0x08004265
 800411c:	08004189 	.word	0x08004189
 8004120:	08004247 	.word	0x08004247
 8004124:	080040d5 	.word	0x080040d5
 8004128:	080040d5 	.word	0x080040d5
 800412c:	08004287 	.word	0x08004287
 8004130:	080040d5 	.word	0x080040d5
 8004134:	08004189 	.word	0x08004189
 8004138:	080040d5 	.word	0x080040d5
 800413c:	080040d5 	.word	0x080040d5
 8004140:	0800424f 	.word	0x0800424f
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	1d1a      	adds	r2, r3, #4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	602a      	str	r2, [r5, #0]
 800414c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004154:	2301      	movs	r3, #1
 8004156:	e0a3      	b.n	80042a0 <_printf_i+0x1f4>
 8004158:	6820      	ldr	r0, [r4, #0]
 800415a:	6829      	ldr	r1, [r5, #0]
 800415c:	0606      	lsls	r6, r0, #24
 800415e:	f101 0304 	add.w	r3, r1, #4
 8004162:	d50a      	bpl.n	800417a <_printf_i+0xce>
 8004164:	680e      	ldr	r6, [r1, #0]
 8004166:	602b      	str	r3, [r5, #0]
 8004168:	2e00      	cmp	r6, #0
 800416a:	da03      	bge.n	8004174 <_printf_i+0xc8>
 800416c:	232d      	movs	r3, #45	; 0x2d
 800416e:	4276      	negs	r6, r6
 8004170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004174:	485e      	ldr	r0, [pc, #376]	; (80042f0 <_printf_i+0x244>)
 8004176:	230a      	movs	r3, #10
 8004178:	e019      	b.n	80041ae <_printf_i+0x102>
 800417a:	680e      	ldr	r6, [r1, #0]
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004182:	bf18      	it	ne
 8004184:	b236      	sxthne	r6, r6
 8004186:	e7ef      	b.n	8004168 <_printf_i+0xbc>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	6820      	ldr	r0, [r4, #0]
 800418c:	1d19      	adds	r1, r3, #4
 800418e:	6029      	str	r1, [r5, #0]
 8004190:	0601      	lsls	r1, r0, #24
 8004192:	d501      	bpl.n	8004198 <_printf_i+0xec>
 8004194:	681e      	ldr	r6, [r3, #0]
 8004196:	e002      	b.n	800419e <_printf_i+0xf2>
 8004198:	0646      	lsls	r6, r0, #25
 800419a:	d5fb      	bpl.n	8004194 <_printf_i+0xe8>
 800419c:	881e      	ldrh	r6, [r3, #0]
 800419e:	4854      	ldr	r0, [pc, #336]	; (80042f0 <_printf_i+0x244>)
 80041a0:	2f6f      	cmp	r7, #111	; 0x6f
 80041a2:	bf0c      	ite	eq
 80041a4:	2308      	moveq	r3, #8
 80041a6:	230a      	movne	r3, #10
 80041a8:	2100      	movs	r1, #0
 80041aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ae:	6865      	ldr	r5, [r4, #4]
 80041b0:	60a5      	str	r5, [r4, #8]
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	bfa2      	ittt	ge
 80041b6:	6821      	ldrge	r1, [r4, #0]
 80041b8:	f021 0104 	bicge.w	r1, r1, #4
 80041bc:	6021      	strge	r1, [r4, #0]
 80041be:	b90e      	cbnz	r6, 80041c4 <_printf_i+0x118>
 80041c0:	2d00      	cmp	r5, #0
 80041c2:	d04d      	beq.n	8004260 <_printf_i+0x1b4>
 80041c4:	4615      	mov	r5, r2
 80041c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80041ca:	fb03 6711 	mls	r7, r3, r1, r6
 80041ce:	5dc7      	ldrb	r7, [r0, r7]
 80041d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041d4:	4637      	mov	r7, r6
 80041d6:	42bb      	cmp	r3, r7
 80041d8:	460e      	mov	r6, r1
 80041da:	d9f4      	bls.n	80041c6 <_printf_i+0x11a>
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d10b      	bne.n	80041f8 <_printf_i+0x14c>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	07de      	lsls	r6, r3, #31
 80041e4:	d508      	bpl.n	80041f8 <_printf_i+0x14c>
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	6861      	ldr	r1, [r4, #4]
 80041ea:	4299      	cmp	r1, r3
 80041ec:	bfde      	ittt	le
 80041ee:	2330      	movle	r3, #48	; 0x30
 80041f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80041f8:	1b52      	subs	r2, r2, r5
 80041fa:	6122      	str	r2, [r4, #16]
 80041fc:	f8cd a000 	str.w	sl, [sp]
 8004200:	464b      	mov	r3, r9
 8004202:	aa03      	add	r2, sp, #12
 8004204:	4621      	mov	r1, r4
 8004206:	4640      	mov	r0, r8
 8004208:	f7ff fee2 	bl	8003fd0 <_printf_common>
 800420c:	3001      	adds	r0, #1
 800420e:	d14c      	bne.n	80042aa <_printf_i+0x1fe>
 8004210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004214:	b004      	add	sp, #16
 8004216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421a:	4835      	ldr	r0, [pc, #212]	; (80042f0 <_printf_i+0x244>)
 800421c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004220:	6829      	ldr	r1, [r5, #0]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	f851 6b04 	ldr.w	r6, [r1], #4
 8004228:	6029      	str	r1, [r5, #0]
 800422a:	061d      	lsls	r5, r3, #24
 800422c:	d514      	bpl.n	8004258 <_printf_i+0x1ac>
 800422e:	07df      	lsls	r7, r3, #31
 8004230:	bf44      	itt	mi
 8004232:	f043 0320 	orrmi.w	r3, r3, #32
 8004236:	6023      	strmi	r3, [r4, #0]
 8004238:	b91e      	cbnz	r6, 8004242 <_printf_i+0x196>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	f023 0320 	bic.w	r3, r3, #32
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	2310      	movs	r3, #16
 8004244:	e7b0      	b.n	80041a8 <_printf_i+0xfc>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	f043 0320 	orr.w	r3, r3, #32
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	2378      	movs	r3, #120	; 0x78
 8004250:	4828      	ldr	r0, [pc, #160]	; (80042f4 <_printf_i+0x248>)
 8004252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004256:	e7e3      	b.n	8004220 <_printf_i+0x174>
 8004258:	0659      	lsls	r1, r3, #25
 800425a:	bf48      	it	mi
 800425c:	b2b6      	uxthmi	r6, r6
 800425e:	e7e6      	b.n	800422e <_printf_i+0x182>
 8004260:	4615      	mov	r5, r2
 8004262:	e7bb      	b.n	80041dc <_printf_i+0x130>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	6826      	ldr	r6, [r4, #0]
 8004268:	6961      	ldr	r1, [r4, #20]
 800426a:	1d18      	adds	r0, r3, #4
 800426c:	6028      	str	r0, [r5, #0]
 800426e:	0635      	lsls	r5, r6, #24
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	d501      	bpl.n	8004278 <_printf_i+0x1cc>
 8004274:	6019      	str	r1, [r3, #0]
 8004276:	e002      	b.n	800427e <_printf_i+0x1d2>
 8004278:	0670      	lsls	r0, r6, #25
 800427a:	d5fb      	bpl.n	8004274 <_printf_i+0x1c8>
 800427c:	8019      	strh	r1, [r3, #0]
 800427e:	2300      	movs	r3, #0
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	4615      	mov	r5, r2
 8004284:	e7ba      	b.n	80041fc <_printf_i+0x150>
 8004286:	682b      	ldr	r3, [r5, #0]
 8004288:	1d1a      	adds	r2, r3, #4
 800428a:	602a      	str	r2, [r5, #0]
 800428c:	681d      	ldr	r5, [r3, #0]
 800428e:	6862      	ldr	r2, [r4, #4]
 8004290:	2100      	movs	r1, #0
 8004292:	4628      	mov	r0, r5
 8004294:	f7fb ffac 	bl	80001f0 <memchr>
 8004298:	b108      	cbz	r0, 800429e <_printf_i+0x1f2>
 800429a:	1b40      	subs	r0, r0, r5
 800429c:	6060      	str	r0, [r4, #4]
 800429e:	6863      	ldr	r3, [r4, #4]
 80042a0:	6123      	str	r3, [r4, #16]
 80042a2:	2300      	movs	r3, #0
 80042a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a8:	e7a8      	b.n	80041fc <_printf_i+0x150>
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	462a      	mov	r2, r5
 80042ae:	4649      	mov	r1, r9
 80042b0:	4640      	mov	r0, r8
 80042b2:	47d0      	blx	sl
 80042b4:	3001      	adds	r0, #1
 80042b6:	d0ab      	beq.n	8004210 <_printf_i+0x164>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	079b      	lsls	r3, r3, #30
 80042bc:	d413      	bmi.n	80042e6 <_printf_i+0x23a>
 80042be:	68e0      	ldr	r0, [r4, #12]
 80042c0:	9b03      	ldr	r3, [sp, #12]
 80042c2:	4298      	cmp	r0, r3
 80042c4:	bfb8      	it	lt
 80042c6:	4618      	movlt	r0, r3
 80042c8:	e7a4      	b.n	8004214 <_printf_i+0x168>
 80042ca:	2301      	movs	r3, #1
 80042cc:	4632      	mov	r2, r6
 80042ce:	4649      	mov	r1, r9
 80042d0:	4640      	mov	r0, r8
 80042d2:	47d0      	blx	sl
 80042d4:	3001      	adds	r0, #1
 80042d6:	d09b      	beq.n	8004210 <_printf_i+0x164>
 80042d8:	3501      	adds	r5, #1
 80042da:	68e3      	ldr	r3, [r4, #12]
 80042dc:	9903      	ldr	r1, [sp, #12]
 80042de:	1a5b      	subs	r3, r3, r1
 80042e0:	42ab      	cmp	r3, r5
 80042e2:	dcf2      	bgt.n	80042ca <_printf_i+0x21e>
 80042e4:	e7eb      	b.n	80042be <_printf_i+0x212>
 80042e6:	2500      	movs	r5, #0
 80042e8:	f104 0619 	add.w	r6, r4, #25
 80042ec:	e7f5      	b.n	80042da <_printf_i+0x22e>
 80042ee:	bf00      	nop
 80042f0:	0800463d 	.word	0x0800463d
 80042f4:	0800464e 	.word	0x0800464e

080042f8 <_sbrk_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4d06      	ldr	r5, [pc, #24]	; (8004314 <_sbrk_r+0x1c>)
 80042fc:	2300      	movs	r3, #0
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f7fc fc06 	bl	8000b14 <_sbrk>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_sbrk_r+0x1a>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_sbrk_r+0x1a>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	20000124 	.word	0x20000124

08004318 <__sread>:
 8004318:	b510      	push	{r4, lr}
 800431a:	460c      	mov	r4, r1
 800431c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004320:	f000 f8f8 	bl	8004514 <_read_r>
 8004324:	2800      	cmp	r0, #0
 8004326:	bfab      	itete	ge
 8004328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800432a:	89a3      	ldrhlt	r3, [r4, #12]
 800432c:	181b      	addge	r3, r3, r0
 800432e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004332:	bfac      	ite	ge
 8004334:	6563      	strge	r3, [r4, #84]	; 0x54
 8004336:	81a3      	strhlt	r3, [r4, #12]
 8004338:	bd10      	pop	{r4, pc}

0800433a <__swrite>:
 800433a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800433e:	461f      	mov	r7, r3
 8004340:	898b      	ldrh	r3, [r1, #12]
 8004342:	05db      	lsls	r3, r3, #23
 8004344:	4605      	mov	r5, r0
 8004346:	460c      	mov	r4, r1
 8004348:	4616      	mov	r6, r2
 800434a:	d505      	bpl.n	8004358 <__swrite+0x1e>
 800434c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004350:	2302      	movs	r3, #2
 8004352:	2200      	movs	r2, #0
 8004354:	f000 f868 	bl	8004428 <_lseek_r>
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800435e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004362:	81a3      	strh	r3, [r4, #12]
 8004364:	4632      	mov	r2, r6
 8004366:	463b      	mov	r3, r7
 8004368:	4628      	mov	r0, r5
 800436a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800436e:	f000 b817 	b.w	80043a0 <_write_r>

08004372 <__sseek>:
 8004372:	b510      	push	{r4, lr}
 8004374:	460c      	mov	r4, r1
 8004376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437a:	f000 f855 	bl	8004428 <_lseek_r>
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	bf15      	itete	ne
 8004384:	6560      	strne	r0, [r4, #84]	; 0x54
 8004386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800438a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800438e:	81a3      	strheq	r3, [r4, #12]
 8004390:	bf18      	it	ne
 8004392:	81a3      	strhne	r3, [r4, #12]
 8004394:	bd10      	pop	{r4, pc}

08004396 <__sclose>:
 8004396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439a:	f000 b813 	b.w	80043c4 <_close_r>
	...

080043a0 <_write_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4d07      	ldr	r5, [pc, #28]	; (80043c0 <_write_r+0x20>)
 80043a4:	4604      	mov	r4, r0
 80043a6:	4608      	mov	r0, r1
 80043a8:	4611      	mov	r1, r2
 80043aa:	2200      	movs	r2, #0
 80043ac:	602a      	str	r2, [r5, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f7fc fb5f 	bl	8000a72 <_write>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_write_r+0x1e>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_write_r+0x1e>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	20000124 	.word	0x20000124

080043c4 <_close_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4d06      	ldr	r5, [pc, #24]	; (80043e0 <_close_r+0x1c>)
 80043c8:	2300      	movs	r3, #0
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	f7fc fb6b 	bl	8000aaa <_close>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_close_r+0x1a>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_close_r+0x1a>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	20000124 	.word	0x20000124

080043e4 <_fstat_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4d07      	ldr	r5, [pc, #28]	; (8004404 <_fstat_r+0x20>)
 80043e8:	2300      	movs	r3, #0
 80043ea:	4604      	mov	r4, r0
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	602b      	str	r3, [r5, #0]
 80043f2:	f7fc fb66 	bl	8000ac2 <_fstat>
 80043f6:	1c43      	adds	r3, r0, #1
 80043f8:	d102      	bne.n	8004400 <_fstat_r+0x1c>
 80043fa:	682b      	ldr	r3, [r5, #0]
 80043fc:	b103      	cbz	r3, 8004400 <_fstat_r+0x1c>
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	bd38      	pop	{r3, r4, r5, pc}
 8004402:	bf00      	nop
 8004404:	20000124 	.word	0x20000124

08004408 <_isatty_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d06      	ldr	r5, [pc, #24]	; (8004424 <_isatty_r+0x1c>)
 800440c:	2300      	movs	r3, #0
 800440e:	4604      	mov	r4, r0
 8004410:	4608      	mov	r0, r1
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	f7fc fb65 	bl	8000ae2 <_isatty>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d102      	bne.n	8004422 <_isatty_r+0x1a>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	b103      	cbz	r3, 8004422 <_isatty_r+0x1a>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	20000124 	.word	0x20000124

08004428 <_lseek_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4d07      	ldr	r5, [pc, #28]	; (8004448 <_lseek_r+0x20>)
 800442c:	4604      	mov	r4, r0
 800442e:	4608      	mov	r0, r1
 8004430:	4611      	mov	r1, r2
 8004432:	2200      	movs	r2, #0
 8004434:	602a      	str	r2, [r5, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	f7fc fb5e 	bl	8000af8 <_lseek>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_lseek_r+0x1e>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_lseek_r+0x1e>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	20000124 	.word	0x20000124

0800444c <memcpy>:
 800444c:	440a      	add	r2, r1
 800444e:	4291      	cmp	r1, r2
 8004450:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004454:	d100      	bne.n	8004458 <memcpy+0xc>
 8004456:	4770      	bx	lr
 8004458:	b510      	push	{r4, lr}
 800445a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800445e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004462:	4291      	cmp	r1, r2
 8004464:	d1f9      	bne.n	800445a <memcpy+0xe>
 8004466:	bd10      	pop	{r4, pc}

08004468 <memmove>:
 8004468:	4288      	cmp	r0, r1
 800446a:	b510      	push	{r4, lr}
 800446c:	eb01 0402 	add.w	r4, r1, r2
 8004470:	d902      	bls.n	8004478 <memmove+0x10>
 8004472:	4284      	cmp	r4, r0
 8004474:	4623      	mov	r3, r4
 8004476:	d807      	bhi.n	8004488 <memmove+0x20>
 8004478:	1e43      	subs	r3, r0, #1
 800447a:	42a1      	cmp	r1, r4
 800447c:	d008      	beq.n	8004490 <memmove+0x28>
 800447e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004482:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004486:	e7f8      	b.n	800447a <memmove+0x12>
 8004488:	4402      	add	r2, r0
 800448a:	4601      	mov	r1, r0
 800448c:	428a      	cmp	r2, r1
 800448e:	d100      	bne.n	8004492 <memmove+0x2a>
 8004490:	bd10      	pop	{r4, pc}
 8004492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800449a:	e7f7      	b.n	800448c <memmove+0x24>

0800449c <__malloc_lock>:
 800449c:	4801      	ldr	r0, [pc, #4]	; (80044a4 <__malloc_lock+0x8>)
 800449e:	f7ff baf3 	b.w	8003a88 <__retarget_lock_acquire_recursive>
 80044a2:	bf00      	nop
 80044a4:	20000118 	.word	0x20000118

080044a8 <__malloc_unlock>:
 80044a8:	4801      	ldr	r0, [pc, #4]	; (80044b0 <__malloc_unlock+0x8>)
 80044aa:	f7ff baee 	b.w	8003a8a <__retarget_lock_release_recursive>
 80044ae:	bf00      	nop
 80044b0:	20000118 	.word	0x20000118

080044b4 <_realloc_r>:
 80044b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b8:	4680      	mov	r8, r0
 80044ba:	4614      	mov	r4, r2
 80044bc:	460e      	mov	r6, r1
 80044be:	b921      	cbnz	r1, 80044ca <_realloc_r+0x16>
 80044c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044c4:	4611      	mov	r1, r2
 80044c6:	f7ff bbb3 	b.w	8003c30 <_malloc_r>
 80044ca:	b92a      	cbnz	r2, 80044d8 <_realloc_r+0x24>
 80044cc:	f7ff fb44 	bl	8003b58 <_free_r>
 80044d0:	4625      	mov	r5, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d8:	f000 f82e 	bl	8004538 <_malloc_usable_size_r>
 80044dc:	4284      	cmp	r4, r0
 80044de:	4607      	mov	r7, r0
 80044e0:	d802      	bhi.n	80044e8 <_realloc_r+0x34>
 80044e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044e6:	d812      	bhi.n	800450e <_realloc_r+0x5a>
 80044e8:	4621      	mov	r1, r4
 80044ea:	4640      	mov	r0, r8
 80044ec:	f7ff fba0 	bl	8003c30 <_malloc_r>
 80044f0:	4605      	mov	r5, r0
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d0ed      	beq.n	80044d2 <_realloc_r+0x1e>
 80044f6:	42bc      	cmp	r4, r7
 80044f8:	4622      	mov	r2, r4
 80044fa:	4631      	mov	r1, r6
 80044fc:	bf28      	it	cs
 80044fe:	463a      	movcs	r2, r7
 8004500:	f7ff ffa4 	bl	800444c <memcpy>
 8004504:	4631      	mov	r1, r6
 8004506:	4640      	mov	r0, r8
 8004508:	f7ff fb26 	bl	8003b58 <_free_r>
 800450c:	e7e1      	b.n	80044d2 <_realloc_r+0x1e>
 800450e:	4635      	mov	r5, r6
 8004510:	e7df      	b.n	80044d2 <_realloc_r+0x1e>
	...

08004514 <_read_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4d07      	ldr	r5, [pc, #28]	; (8004534 <_read_r+0x20>)
 8004518:	4604      	mov	r4, r0
 800451a:	4608      	mov	r0, r1
 800451c:	4611      	mov	r1, r2
 800451e:	2200      	movs	r2, #0
 8004520:	602a      	str	r2, [r5, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f7fc fa88 	bl	8000a38 <_read>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_read_r+0x1e>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_read_r+0x1e>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20000124 	.word	0x20000124

08004538 <_malloc_usable_size_r>:
 8004538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453c:	1f18      	subs	r0, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	bfbc      	itt	lt
 8004542:	580b      	ldrlt	r3, [r1, r0]
 8004544:	18c0      	addlt	r0, r0, r3
 8004546:	4770      	bx	lr

08004548 <_init>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr

08004554 <_fini>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	bf00      	nop
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr
