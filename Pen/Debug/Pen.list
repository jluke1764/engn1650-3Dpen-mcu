
Pen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000537c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c8  080055c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d0  080055d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a94  20000070  08005648  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  08005648  00020b04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002817  00000000  00000000  00031c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00035270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291ba  00000000  00000000  00035f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001087f  00000000  00000000  0005f13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8905  00000000  00000000  0006f9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001682be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d80  00000000  00000000  00168310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005514 	.word	0x08005514

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005514 	.word	0x08005514

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08e      	sub	sp, #56	; 0x38
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t MSG[7] = {'h', 'e', 'l', 'l', 'o', '\r', '\n'};
 800059a:	4a23      	ldr	r2, [pc, #140]	; (8000628 <main+0x94>)
 800059c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	3304      	adds	r3, #4
 80005a8:	8019      	strh	r1, [r3, #0]
 80005aa:	3302      	adds	r3, #2
 80005ac:	0c0a      	lsrs	r2, r1, #16
 80005ae:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[35] = {'\0'};
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	221f      	movs	r2, #31
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 fb1a 	bl	8004bf4 <memset>
	  uint8_t X = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fbdc 	bl	8000d82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f837 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8f3 	bl	80007b8 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d2:	f000 f8c3 	bl	800075c <MX_USB_OTG_FS_PCD_Init>
  MX_LPUART1_UART_Init();
 80005d6:	f000 f895 	bl	8000704 <MX_LPUART1_UART_Init>
  uart_init();
 80005da:	f000 f9d9 	bl	8000990 <uart_init>
  /* USER CODE BEGIN 2 */
  for (int i=0; i<200; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	637b      	str	r3, [r7, #52]	; 0x34
 80005e2:	e007      	b.n	80005f4 <main+0x60>
   {
     data[i] = 'i';
 80005e4:	4a11      	ldr	r2, [pc, #68]	; (800062c <main+0x98>)
 80005e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e8:	4413      	add	r3, r2
 80005ea:	2269      	movs	r2, #105	; 0x69
 80005ec:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<200; i++)
 80005ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005f0:	3301      	adds	r3, #1
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34
 80005f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005f6:	2bc7      	cmp	r3, #199	; 0xc7
 80005f8:	ddf4      	ble.n	80005e4 <main+0x50>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOB, LD2_Blue_Pin);
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <main+0x9c>)
 80005fe:	f000 ff93 	bl	8001528 <HAL_GPIO_TogglePin>
	  //sprintf(buffer, "Hello! X = %d\r\n", X);
	  //HAL_Delay(100);
	   //HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
	   //X++;
	   //HAL_UART_Transmit(&hlpuart1, data, sizeof (data), 1000);
	  int i = mygetch();
 8000602:	f000 f9db 	bl	80009bc <mygetch>
 8000606:	62f8      	str	r0, [r7, #44]	; 0x2c
	  if (i >= 0)
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	2b00      	cmp	r3, #0
 800060c:	dbf5      	blt.n	80005fa <main+0x66>
	  {
		  if (i == 'a')
 800060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000610:	2b61      	cmp	r3, #97	; 0x61
 8000612:	d103      	bne.n	800061c <main+0x88>
			  myprintf("Hello\n");
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0xa0>)
 8000616:	f000 f967 	bl	80008e8 <myprintf>
 800061a:	e7ee      	b.n	80005fa <main+0x66>
		  else
			  myprintf("you typed '%c'\n",i);
 800061c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <main+0xa4>)
 8000620:	f000 f962 	bl	80008e8 <myprintf>
  {
 8000624:	e7e9      	b.n	80005fa <main+0x66>
 8000626:	bf00      	nop
 8000628:	08005544 	.word	0x08005544
 800062c:	20000a24 	.word	0x20000a24
 8000630:	48000400 	.word	0x48000400
 8000634:	0800552c 	.word	0x0800552c
 8000638:	08005534 	.word	0x08005534

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b096      	sub	sp, #88	; 0x58
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2244      	movs	r2, #68	; 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fad2 	bl	8004bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000662:	f001 f8e1 	bl	8001828 <HAL_PWREx_ControlVoltageScaling>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800066c:	f000 f9c8 	bl	8000a00 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000670:	f001 f8bc 	bl	80017ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xc4>)
 8000676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800067a:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xc4>)
 800067c:	f023 0318 	bic.w	r3, r3, #24
 8000680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000684:	2314      	movs	r3, #20
 8000686:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000694:	2360      	movs	r3, #96	; 0x60
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800069c:	2301      	movs	r3, #1
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006a4:	2310      	movs	r3, #16
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 f92b 	bl	8001914 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006c4:	f000 f99c 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2303      	movs	r3, #3
 80006ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	2101      	movs	r1, #1
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fd30 	bl	8002148 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ee:	f000 f987 	bl	8000a00 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f2:	f002 fa49 	bl	8002b88 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f6:	bf00      	nop
 80006f8:	3758      	adds	r7, #88	; 0x58
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 8000710:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000714:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_LPUART1_UART_Init+0x50>)
 8000742:	f002 fbff 	bl	8002f44 <HAL_UART_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 f958 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000008c 	.word	0x2000008c
 8000758:	40008000 	.word	0x40008000

0800075c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000766:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2206      	movs	r2, #6
 800076c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2202      	movs	r2, #2
 8000772:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2202      	movs	r2, #2
 8000778:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	f000 fedc 	bl	800155c <HAL_PCD_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 f929 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000110 	.word	0x20000110

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <MX_GPIO_Init+0x120>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a41      	ldr	r2, [pc, #260]	; (80008d8 <MX_GPIO_Init+0x120>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <MX_GPIO_Init+0x120>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <MX_GPIO_Init+0x120>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a3b      	ldr	r2, [pc, #236]	; (80008d8 <MX_GPIO_Init+0x120>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b39      	ldr	r3, [pc, #228]	; (80008d8 <MX_GPIO_Init+0x120>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a35      	ldr	r2, [pc, #212]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <MX_GPIO_Init+0x120>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <MX_GPIO_Init+0x120>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800082e:	f001 f861 	bl	80018f4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000850:	4822      	ldr	r0, [pc, #136]	; (80008dc <MX_GPIO_Init+0x124>)
 8000852:	f000 fe51 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	4821      	ldr	r0, [pc, #132]	; (80008e0 <MX_GPIO_Init+0x128>)
 800085c:	f000 fe4c 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	481b      	ldr	r0, [pc, #108]	; (80008e4 <MX_GPIO_Init+0x12c>)
 8000878:	f000 fcac 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Blue_Pin;
 800087c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_GPIO_Init+0x124>)
 8000896:	f000 fc9d 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800089a:	2320      	movs	r3, #32
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_GPIO_Init+0x128>)
 80008ae:	f000 fc91 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_GPIO_Init+0x128>)
 80008ca:	f000 fc83 	bl	80011d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000400 	.word	0x48000400
 80008e0:	48001800 	.word	0x48001800
 80008e4:	48000800 	.word	0x48000800

080008e8 <myprintf>:
void mywrite (unsigned char *st, int nby)
{
   if (nby) HAL_UART_Transmit(&hlpuart1,st,nby,10);
}
void myprintf (const char *fmt, ...)
{
 80008e8:	b40f      	push	{r0, r1, r2, r3}
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b0c2      	sub	sp, #264	; 0x108
 80008ee:	af00      	add	r7, sp, #0
   va_list arglist;
   int nby;
   unsigned char st[256];

   if (!fmt) return;
 80008f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d022      	beq.n	800093e <myprintf+0x56>
   va_start(arglist,fmt);
 80008f8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80008fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   nby = vsnprintf((char *)st,sizeof(st),fmt,arglist);
 8000900:	4638      	mov	r0, r7
 8000902:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000906:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800090a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090e:	f004 f9a5 	bl	8004c5c <vsniprintf>
 8000912:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   va_end(arglist);
   if (nby < 0) { nby = sizeof(st)-1; } //print truncated string in case too long
 8000916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800091a:	2b00      	cmp	r3, #0
 800091c:	da02      	bge.n	8000924 <myprintf+0x3c>
 800091e:	23ff      	movs	r3, #255	; 0xff
 8000920:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   if (nby) HAL_UART_Transmit(&hlpuart1,st,nby,10);
 8000924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000928:	2b00      	cmp	r3, #0
 800092a:	d009      	beq.n	8000940 <myprintf+0x58>
 800092c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000930:	b29a      	uxth	r2, r3
 8000932:	4639      	mov	r1, r7
 8000934:	230a      	movs	r3, #10
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <myprintf+0x68>)
 8000938:	f002 fb52 	bl	8002fe0 <HAL_UART_Transmit>
 800093c:	e000      	b.n	8000940 <myprintf+0x58>
   if (!fmt) return;
 800093e:	bf00      	nop
}
 8000940:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000944:	46bd      	mov	sp, r7
 8000946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800094a:	b004      	add	sp, #16
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2000008c 	.word	0x2000008c

08000954 <HAL_UART_RxCpltCallback>:
   return -1; //HAL_TIMEOUT
}
*/

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	recbufw++;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_UART_RxCpltCallback+0x30>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_UART_RxCpltCallback+0x30>)
 8000964:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&hlpuart1,&recbuf[recbufw&(RECBUFN-1)],1);
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_UART_RxCpltCallback+0x30>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800096e:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_UART_RxCpltCallback+0x34>)
 8000970:	4413      	add	r3, r2
 8000972:	2201      	movs	r2, #1
 8000974:	4619      	mov	r1, r3
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_UART_RxCpltCallback+0x38>)
 8000978:	f002 fbc6 	bl	8003108 <HAL_UART_Receive_IT>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000a20 	.word	0x20000a20
 8000988:	2000061c 	.word	0x2000061c
 800098c:	2000008c 	.word	0x2000008c

08000990 <uart_init>:

void uart_init (void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1,&recbuf[recbufw&(RECBUFN-1)] ,1);
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <uart_init+0x20>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800099c:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <uart_init+0x24>)
 800099e:	4413      	add	r3, r2
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <uart_init+0x28>)
 80009a6:	f002 fbaf 	bl	8003108 <HAL_UART_Receive_IT>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000a20 	.word	0x20000a20
 80009b4:	2000061c 	.word	0x2000061c
 80009b8:	2000008c 	.word	0x2000008c

080009bc <mygetch>:
//start recv ints

int mygetch (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
   //if (!(USART3->CR3&1)) //This hack stops UART recv stream from freezing randomly from overruns
   //   { HAL_UART_Receive_IT(&hlp,&recbuf[recbufw&(RECBUFN-1)],1); }
   if (recbufr == recbufw) return(-1);
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <mygetch+0x38>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <mygetch+0x3c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d102      	bne.n	80009d2 <mygetch+0x16>
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d0:	e00b      	b.n	80009ea <mygetch+0x2e>
   recbufr++; return(recbuf[(recbufr-1)&(RECBUFN-1)]);
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <mygetch+0x38>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <mygetch+0x38>)
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <mygetch+0x38>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <mygetch+0x40>)
 80009e8:	5cd3      	ldrb	r3, [r2, r3]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000a1c 	.word	0x20000a1c
 80009f8:	20000a20 	.word	0x20000a20
 80009fc:	2000061c 	.word	0x2000061c

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0ac      	sub	sp, #176	; 0xb0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	228c      	movs	r2, #140	; 0x8c
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 f8bd 	bl	8004bf4 <memset>
  if(huart->Instance==LPUART1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d145      	bne.n	8000b10 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a84:	2320      	movs	r3, #32
 8000a86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fd7d 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff ffb0 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <HAL_UART_MspInit+0xc8>)
 8000aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <HAL_UART_MspInit+0xc8>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_UART_MspInit+0xc8>)
 8000aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0xc8>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0xc8>)
 8000abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0xc8>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000ad0:	f000 ff10 	bl	80018f4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ad4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000aee:	2308      	movs	r3, #8
 8000af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af8:	4619      	mov	r1, r3
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <HAL_UART_MspInit+0xcc>)
 8000afc:	f000 fb6a 	bl	80011d4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2046      	movs	r0, #70	; 0x46
 8000b06:	f000 fab0 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b0a:	2046      	movs	r0, #70	; 0x46
 8000b0c:	f000 fac9 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	37b0      	adds	r7, #176	; 0xb0
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40008000 	.word	0x40008000
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48001800 	.word	0x48001800

08000b24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b0ae      	sub	sp, #184	; 0xb8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	228c      	movs	r2, #140	; 0x8c
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f004 f855 	bl	8004bf4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b52:	d16b      	bne.n	8000c2c <HAL_PCD_MspInit+0x108>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000b6a:	2318      	movs	r3, #24
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000b7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 fd03 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000b90:	f7ff ff36 	bl	8000a00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b98:	4a26      	ldr	r2, [pc, #152]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bc6:	230a      	movs	r3, #10
 8000bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f000 fafd 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d114      	bne.n	8000c28 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000c16:	f000 fe5d 	bl	80018d4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <HAL_PCD_MspInit+0x110>)
 8000c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c26:	e001      	b.n	8000c2c <HAL_PCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8000c28:	f000 fe54 	bl	80018d4 <HAL_PWREx_EnableVddUSB>
}
 8000c2c:	bf00      	nop
 8000c2e:	37b8      	adds	r7, #184	; 0xb8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 f8d2 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <LPUART1_IRQHandler+0x10>)
 8000c92:	f002 fa8f 	bl	80031b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000008c 	.word	0x2000008c

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f003 ff66 	bl	8004ba0 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20050000 	.word	0x20050000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	20000aec 	.word	0x20000aec
 8000d08:	20000b08 	.word	0x20000b08

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d34:	f7ff ffea 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f003 ff25 	bl	8004bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d62:	f7ff fc17 	bl	8000594 <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d74:	080055d8 	.word	0x080055d8
  ldr r2, =_sbss
 8000d78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d7c:	20000b04 	.word	0x20000b04

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>

08000d82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f961 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f80e 	bl	8000db4 <HAL_InitTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	71fb      	strb	r3, [r7, #7]
 8000da2:	e001      	b.n	8000da8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da4:	f7ff fe32 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da8:	79fb      	ldrb	r3, [r7, #7]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_InitTick+0x6c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d023      	beq.n	8000e10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_InitTick+0x70>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_InitTick+0x6c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f96d 	bl	80010be <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10f      	bne.n	8000e0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d809      	bhi.n	8000e04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df8:	f000 f937 	bl	800106a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_InitTick+0x74>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e007      	b.n	8000e14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e004      	b.n	8000e14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	e001      	b.n	8000e14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000af0 	.word	0x20000af0

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000af0 	.word	0x20000af0

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff ffee 	bl	8000e54 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffde 	bl	8000e54 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff29 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff3e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff31 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d008      	beq.n	8001100 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2204      	movs	r2, #4
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e022      	b.n	8001146 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 020e 	bic.w	r2, r2, #14
 800110e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f003 021c 	and.w	r2, r3, #28
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f202 	lsl.w	r2, r1, r2
 8001132:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d005      	beq.n	8001176 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2204      	movs	r2, #4
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e029      	b.n	80011ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 020e 	bic.w	r2, r2, #14
 8001184:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0201 	bic.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f003 021c 	and.w	r2, r3, #28
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
    }
  }
  return status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	e166      	b.n	80014b2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8158 	beq.w	80014ac <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d005      	beq.n	8001214 <HAL_GPIO_Init+0x40>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d130      	bne.n	8001276 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124a:	2201      	movs	r2, #1
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	f003 0201 	and.w	r2, r3, #1
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b03      	cmp	r3, #3
 8001280:	d017      	beq.n	80012b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d123      	bne.n	8001306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	6939      	ldr	r1, [r7, #16]
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0203 	and.w	r2, r3, #3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80b2 	beq.w	80014ac <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 800134a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134c:	4a60      	ldr	r2, [pc, #384]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6613      	str	r3, [r2, #96]	; 0x60
 8001354:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 8001356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001360:	4a5c      	ldr	r2, [pc, #368]	; (80014d4 <HAL_GPIO_Init+0x300>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800138a:	d02b      	beq.n	80013e4 <HAL_GPIO_Init+0x210>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a52      	ldr	r2, [pc, #328]	; (80014d8 <HAL_GPIO_Init+0x304>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d025      	beq.n	80013e0 <HAL_GPIO_Init+0x20c>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a51      	ldr	r2, [pc, #324]	; (80014dc <HAL_GPIO_Init+0x308>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d01f      	beq.n	80013dc <HAL_GPIO_Init+0x208>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a50      	ldr	r2, [pc, #320]	; (80014e0 <HAL_GPIO_Init+0x30c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d019      	beq.n	80013d8 <HAL_GPIO_Init+0x204>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a4f      	ldr	r2, [pc, #316]	; (80014e4 <HAL_GPIO_Init+0x310>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d013      	beq.n	80013d4 <HAL_GPIO_Init+0x200>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <HAL_GPIO_Init+0x314>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d00d      	beq.n	80013d0 <HAL_GPIO_Init+0x1fc>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a4d      	ldr	r2, [pc, #308]	; (80014ec <HAL_GPIO_Init+0x318>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d007      	beq.n	80013cc <HAL_GPIO_Init+0x1f8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <HAL_GPIO_Init+0x31c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_GPIO_Init+0x1f4>
 80013c4:	2307      	movs	r3, #7
 80013c6:	e00e      	b.n	80013e6 <HAL_GPIO_Init+0x212>
 80013c8:	2308      	movs	r3, #8
 80013ca:	e00c      	b.n	80013e6 <HAL_GPIO_Init+0x212>
 80013cc:	2306      	movs	r3, #6
 80013ce:	e00a      	b.n	80013e6 <HAL_GPIO_Init+0x212>
 80013d0:	2305      	movs	r3, #5
 80013d2:	e008      	b.n	80013e6 <HAL_GPIO_Init+0x212>
 80013d4:	2304      	movs	r3, #4
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x212>
 80013d8:	2303      	movs	r3, #3
 80013da:	e004      	b.n	80013e6 <HAL_GPIO_Init+0x212>
 80013dc:	2302      	movs	r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x212>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_GPIO_Init+0x212>
 80013e4:	2300      	movs	r3, #0
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	f002 0203 	and.w	r2, r2, #3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4093      	lsls	r3, r2
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013f6:	4937      	ldr	r1, [pc, #220]	; (80014d4 <HAL_GPIO_Init+0x300>)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001404:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001428:	4a32      	ldr	r2, [pc, #200]	; (80014f4 <HAL_GPIO_Init+0x320>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800142e:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001452:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HAL_GPIO_Init+0x320>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800147c:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <HAL_GPIO_Init+0x320>)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <HAL_GPIO_Init+0x320>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f ae91 	bne.w	80011e4 <HAL_GPIO_Init+0x10>
  }
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	48000400 	.word	0x48000400
 80014dc:	48000800 	.word	0x48000800
 80014e0:	48000c00 	.word	0x48000c00
 80014e4:	48001000 	.word	0x48001000
 80014e8:	48001400 	.word	0x48001400
 80014ec:	48001800 	.word	0x48001800
 80014f0:	48001c00 	.word	0x48001c00
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001514:	e002      	b.n	800151c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43d9      	mvns	r1, r3
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	400b      	ands	r3, r1
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	b08f      	sub	sp, #60	; 0x3c
 8001560:	af0a      	add	r7, sp, #40	; 0x28
 8001562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e116      	b.n	800179c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d106      	bne.n	800158e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff facb 	bl	8000b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 f86e 	bl	800468e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	687e      	ldr	r6, [r7, #4]
 80015ba:	466d      	mov	r5, sp
 80015bc:	f106 0410 	add.w	r4, r6, #16
 80015c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d0:	1d33      	adds	r3, r6, #4
 80015d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f003 f82e 	bl	8004636 <USB_CoreInit>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0d7      	b.n	800179c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f85c 	bl	80046b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e04a      	b.n	8001694 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	333d      	adds	r3, #61	; 0x3d
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	333c      	adds	r3, #60	; 0x3c
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	b298      	uxth	r0, r3
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3344      	adds	r3, #68	; 0x44
 800163a:	4602      	mov	r2, r0
 800163c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	3340      	adds	r3, #64	; 0x40
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	3348      	adds	r3, #72	; 0x48
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	334c      	adds	r3, #76	; 0x4c
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3354      	adds	r3, #84	; 0x54
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	3301      	adds	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3af      	bcc.n	80015fe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e044      	b.n	800172e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001712:	7bfa      	ldrb	r2, [r7, #15]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3301      	adds	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3b5      	bcc.n	80016a4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	687e      	ldr	r6, [r7, #4]
 8001740:	466d      	mov	r5, sp
 8001742:	f106 0410 	add.w	r4, r6, #16
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001752:	e885 0003 	stmia.w	r5, {r0, r1}
 8001756:	1d33      	adds	r3, r6, #4
 8001758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800175a:	6838      	ldr	r0, [r7, #0]
 800175c:	f002 fff4 	bl	8004748 <USB_DevInit>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2202      	movs	r2, #2
 800176a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e014      	b.n	800179c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	2b01      	cmp	r3, #1
 8001788:	d102      	bne.n	8001790 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f80a 	bl	80017a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f003 f9a0 	bl	8004ada <USB_DevDisconnect>

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d6:	f043 0303 	orr.w	r3, r3, #3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40007000 	.word	0x40007000

0800180c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <HAL_PWREx_GetVoltageRange+0x18>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40007000 	.word	0x40007000

08001828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001836:	d130      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001844:	d038      	beq.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800184e:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001854:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2232      	movs	r2, #50	; 0x32
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9b      	lsrs	r3, r3, #18
 8001868:	3301      	adds	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800186c:	e002      	b.n	8001874 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3b01      	subs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001880:	d102      	bne.n	8001888 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f2      	bne.n	800186e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001894:	d110      	bne.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e00f      	b.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a6:	d007      	beq.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018b0:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40007000 	.word	0x40007000
 80018cc:	20000000 	.word	0x20000000
 80018d0:	431bde83 	.word	0x431bde83

080018d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e2:	6053      	str	r3, [r2, #4]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40007000 	.word	0x40007000

080018f4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_PWREx_EnableVddIO2+0x1c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_PWREx_EnableVddIO2+0x1c>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	6053      	str	r3, [r2, #4]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40007000 	.word	0x40007000

08001914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	f000 bc08 	b.w	8002138 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001928:	4b96      	ldr	r3, [pc, #600]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001932:	4b94      	ldr	r3, [pc, #592]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80e4 	beq.w	8001b12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <HAL_RCC_OscConfig+0x4c>
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	f040 808b 	bne.w	8001a6e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b01      	cmp	r3, #1
 800195c:	f040 8087 	bne.w	8001a6e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001960:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_OscConfig+0x64>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e3df      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_RCC_OscConfig+0x7e>
 8001988:	4b7e      	ldr	r3, [pc, #504]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001990:	e005      	b.n	800199e <HAL_RCC_OscConfig+0x8a>
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199e:	4293      	cmp	r3, r2
 80019a0:	d223      	bcs.n	80019ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fd92 	bl	80024d0 <RCC_SetFlashLatencyFromMSIRange>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e3c0      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a72      	ldr	r2, [pc, #456]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	496d      	ldr	r1, [pc, #436]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d4:	4b6b      	ldr	r3, [pc, #428]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	4968      	ldr	r1, [pc, #416]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e025      	b.n	8001a36 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ea:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4960      	ldr	r1, [pc, #384]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a08:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	495b      	ldr	r1, [pc, #364]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fd52 	bl	80024d0 <RCC_SetFlashLatencyFromMSIRange>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e380      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a36:	f000 fc87 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	4950      	ldr	r1, [pc, #320]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001a48:	5ccb      	ldrb	r3, [r1, r3]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_RCC_OscConfig+0x278>)
 8001a54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a56:	4b4e      	ldr	r3, [pc, #312]	; (8001b90 <HAL_RCC_OscConfig+0x27c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f9aa 	bl	8000db4 <HAL_InitTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d052      	beq.n	8001b10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	e364      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d032      	beq.n	8001adc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a76:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a42      	ldr	r2, [pc, #264]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a82:	f7ff f9e7 	bl	8000e54 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a8a:	f7ff f9e3 	bl	8000e54 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e34d      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a9c:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a35      	ldr	r2, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aae:	f043 0308 	orr.w	r3, r3, #8
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4930      	ldr	r1, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	492b      	ldr	r1, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
 8001ada:	e01a      	b.n	8001b12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f9b4 	bl	8000e54 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af0:	f7ff f9b0 	bl	8000e54 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e31a      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1dc>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d073      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_OscConfig+0x21c>
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d10e      	bne.n	8001b48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d10b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d063      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d15f      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e2f7      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x24c>
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e025      	b.n	8001bac <HAL_RCC_OscConfig+0x298>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d114      	bne.n	8001b94 <HAL_RCC_OscConfig+0x280>
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a02      	ldr	r2, [pc, #8]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e013      	b.n	8001bac <HAL_RCC_OscConfig+0x298>
 8001b84:	40021000 	.word	0x40021000
 8001b88:	0800554c 	.word	0x0800554c
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004
 8001b94:	4ba0      	ldr	r3, [pc, #640]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a9f      	ldr	r2, [pc, #636]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b9d      	ldr	r3, [pc, #628]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a9c      	ldr	r2, [pc, #624]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f94e 	bl	8000e54 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f94a 	bl	8000e54 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e2b4      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bce:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x2a8>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f93a 	bl	8000e54 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff f936 	bl	8000e54 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e2a0      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf6:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x2d0>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d060      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_OscConfig+0x310>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d119      	bne.n	8001c52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d116      	bne.n	8001c52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c24:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_OscConfig+0x328>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e27d      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b76      	ldr	r3, [pc, #472]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	4973      	ldr	r1, [pc, #460]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c50:	e040      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d023      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6e      	ldr	r2, [pc, #440]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff f8f5 	bl	8000e54 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6e:	f7ff f8f1 	bl	8000e54 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e25b      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c80:	4b65      	ldr	r3, [pc, #404]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8c:	4b62      	ldr	r3, [pc, #392]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	495f      	ldr	r1, [pc, #380]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	e018      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a5c      	ldr	r2, [pc, #368]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff f8d1 	bl	8000e54 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff f8cd 	bl	8000e54 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e237      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc8:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d03c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cee:	4a4a      	ldr	r2, [pc, #296]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f8ac 	bl	8000e54 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff f8a8 	bl	8000e54 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e212      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d12:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ef      	beq.n	8001d00 <HAL_RCC_OscConfig+0x3ec>
 8001d20:	e01b      	b.n	8001d5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d28:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff f88f 	bl	8000e54 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff f88b 	bl	8000e54 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e1f5      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d4c:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1ef      	bne.n	8001d3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80a6 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_RCC_OscConfig+0x508>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d118      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_RCC_OscConfig+0x508>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_RCC_OscConfig+0x508>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dac:	f7ff f852 	bl	8000e54 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db4:	f7ff f84e 	bl	8000e54 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1b8      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_RCC_OscConfig+0x508>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_RCC_OscConfig+0x4d8>
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de0:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dea:	e029      	b.n	8001e40 <HAL_RCC_OscConfig+0x52c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d115      	bne.n	8001e20 <HAL_RCC_OscConfig+0x50c>
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e14:	e014      	b.n	8001e40 <HAL_RCC_OscConfig+0x52c>
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	4b9d      	ldr	r3, [pc, #628]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e26:	4a9c      	ldr	r2, [pc, #624]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e30:	4b99      	ldr	r3, [pc, #612]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	4a98      	ldr	r2, [pc, #608]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d016      	beq.n	8001e76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f804 	bl	8000e54 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff f800 	bl	8000e54 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e168      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e66:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ed      	beq.n	8001e50 <HAL_RCC_OscConfig+0x53c>
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e76:	f7fe ffed 	bl	8000e54 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7fe ffe9 	bl	8000e54 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e151      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e94:	4b80      	ldr	r3, [pc, #512]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ed      	bne.n	8001e7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	4a7a      	ldr	r2, [pc, #488]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ec8:	4b73      	ldr	r3, [pc, #460]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ece:	4a72      	ldr	r2, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7fe ffbc 	bl	8000e54 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee0:	f7fe ffb8 	bl	8000e54 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e122      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ef2:	4b69      	ldr	r3, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ef      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x5cc>
 8001f00:	e01b      	b.n	8001f3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f02:	4b65      	ldr	r3, [pc, #404]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f08:	4a63      	ldr	r2, [pc, #396]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7fe ff9f 	bl	8000e54 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f1a:	f7fe ff9b 	bl	8000e54 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e105      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f2c:	4b5a      	ldr	r3, [pc, #360]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ef      	bne.n	8001f1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80f9 	beq.w	8002136 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	f040 80cf 	bne.w	80020ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f4e:	4b52      	ldr	r3, [pc, #328]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0203 	and.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d12c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d123      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d11b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d113      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d109      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d071      	beq.n	80020a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d068      	beq.n	8002094 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fc2:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0ac      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8001fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fea:	f7fe ff33 	bl	8000e54 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe ff2f 	bl	8000e54 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e099      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCC_OscConfig+0x788>)
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002020:	3a01      	subs	r2, #1
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	4311      	orrs	r1, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800202a:	0212      	lsls	r2, r2, #8
 800202c:	4311      	orrs	r1, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002032:	0852      	lsrs	r2, r2, #1
 8002034:	3a01      	subs	r2, #1
 8002036:	0552      	lsls	r2, r2, #21
 8002038:	4311      	orrs	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800203e:	0852      	lsrs	r2, r2, #1
 8002040:	3a01      	subs	r2, #1
 8002042:	0652      	lsls	r2, r2, #25
 8002044:	4311      	orrs	r1, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800204a:	06d2      	lsls	r2, r2, #27
 800204c:	430a      	orrs	r2, r1
 800204e:	4912      	ldr	r1, [pc, #72]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8002050:	4313      	orrs	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a0c      	ldr	r2, [pc, #48]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8002066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800206c:	f7fe fef2 	bl	8000e54 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7fe feee 	bl	8000e54 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e058      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCC_OscConfig+0x784>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002092:	e050      	b.n	8002136 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e04f      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
 8002098:	40021000 	.word	0x40021000
 800209c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d144      	bne.n	8002136 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a20      	ldr	r2, [pc, #128]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020c4:	f7fe fec6 	bl	8000e54 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7fe fec2 	bl	8000e54 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e02c      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x7b8>
 80020ea:	e024      	b.n	8002136 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d01f      	beq.n	8002132 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe fea9 	bl	8000e54 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fea5 	bl	8000e54 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e00f      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4905      	ldr	r1, [pc, #20]	; (8002140 <HAL_RCC_OscConfig+0x82c>)
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x830>)
 800212c:	4013      	ands	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
 8002130:	e001      	b.n	8002136 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	feeefffc 	.word	0xfeeefffc

08002148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0e7      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b75      	ldr	r3, [pc, #468]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4970      	ldr	r1, [pc, #448]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b6e      	ldr	r3, [pc, #440]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0cf      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d908      	bls.n	80021ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4960      	ldr	r1, [pc, #384]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d04c      	beq.n	8002260 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d121      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0a6      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e09a      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021fe:	4b4e      	ldr	r3, [pc, #312]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e08e      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220e:	4b4a      	ldr	r3, [pc, #296]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e086      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4943      	ldr	r1, [pc, #268]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002230:	f7fe fe10 	bl	8000e54 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe fe0c 	bl	8000e54 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e06e      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d010      	beq.n	800228e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002278:	429a      	cmp	r2, r3
 800227a:	d208      	bcs.n	800228e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	492b      	ldr	r1, [pc, #172]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d210      	bcs.n	80022be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 0207 	bic.w	r2, r3, #7
 80022a4:	4923      	ldr	r1, [pc, #140]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e036      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4918      	ldr	r1, [pc, #96]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4910      	ldr	r1, [pc, #64]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022fc:	f000 f824 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	490b      	ldr	r1, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x1f4>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1f8>)
 800231a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1fc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fd47 	bl	8000db4 <HAL_InitTick>
 8002326:	4603      	mov	r3, r0
 8002328:	72fb      	strb	r3, [r7, #11]

  return status;
 800232a:	7afb      	ldrb	r3, [r7, #11]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	0800554c 	.word	0x0800554c
 8002340:	20000000 	.word	0x20000000
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x34>
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d121      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d11e      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800237c:	4b34      	ldr	r3, [pc, #208]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e005      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023a4:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10d      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_RCC_GetSysClockFreq+0x110>)
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e004      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_RCC_GetSysClockFreq+0x114>)
 80023ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d134      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0xa6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0xac>
 80023ec:	e005      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_RCC_GetSysClockFreq+0x110>)
 80023f0:	617b      	str	r3, [r7, #20]
      break;
 80023f2:	e005      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_GetSysClockFreq+0x114>)
 80023f6:	617b      	str	r3, [r7, #20]
      break;
 80023f8:	e002      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	617b      	str	r3, [r7, #20]
      break;
 80023fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	3301      	adds	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	fb03 f202 	mul.w	r2, r3, r2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	0e5b      	lsrs	r3, r3, #25
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	3301      	adds	r3, #1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002440:	69bb      	ldr	r3, [r7, #24]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	08005564 	.word	0x08005564
 8002458:	00f42400 	.word	0x00f42400
 800245c:	007a1200 	.word	0x007a1200

08002460 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCC_GetHCLKFreq+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000000 	.word	0x20000000

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800247c:	f7ff fff0 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	0800555c 	.word	0x0800555c

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024a8:	f7ff ffda 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0adb      	lsrs	r3, r3, #11
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4904      	ldr	r1, [pc, #16]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	0800555c 	.word	0x0800555c

080024d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024e8:	f7ff f990 	bl	800180c <HAL_PWREx_GetVoltageRange>
 80024ec:	6178      	str	r0, [r7, #20]
 80024ee:	e014      	b.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	4a24      	ldr	r2, [pc, #144]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fa:	6593      	str	r3, [r2, #88]	; 0x58
 80024fc:	4b22      	ldr	r3, [pc, #136]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002508:	f7ff f980 	bl	800180c <HAL_PWREx_GetVoltageRange>
 800250c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002518:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002520:	d10b      	bne.n	800253a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b80      	cmp	r3, #128	; 0x80
 8002526:	d919      	bls.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2ba0      	cmp	r3, #160	; 0xa0
 800252c:	d902      	bls.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800252e:	2302      	movs	r3, #2
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	e013      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002534:	2301      	movs	r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	e010      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d902      	bls.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002540:	2303      	movs	r3, #3
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	e00a      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d102      	bne.n	8002552 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800254c:	2302      	movs	r3, #2
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	e004      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b70      	cmp	r3, #112	; 0x70
 8002556:	d101      	bne.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002558:	2301      	movs	r3, #1
 800255a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 0207 	bic.w	r2, r3, #7
 8002564:	4909      	ldr	r1, [pc, #36]	; (800258c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	40022000 	.word	0x40022000

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002598:	2300      	movs	r3, #0
 800259a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800259c:	2300      	movs	r3, #0
 800259e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d041      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025b4:	d02a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025ba:	d824      	bhi.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025c0:	d008      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025c6:	d81e      	bhi.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d0:	d010      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025d2:	e018      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025d4:	4b86      	ldr	r3, [pc, #536]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a85      	ldr	r2, [pc, #532]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e0:	e015      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fadd 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025f2:	e00c      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3320      	adds	r3, #32
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fbc6 	bl	8002d8c <RCCEx_PLLSAI2_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002604:	e003      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	74fb      	strb	r3, [r7, #19]
      break;
 800260a:	e000      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800260c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002614:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002622:	4973      	ldr	r1, [pc, #460]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800262a:	e001      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d041      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002640:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002644:	d02a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002646:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800264a:	d824      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800264c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002650:	d008      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002656:	d81e      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002660:	d010      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002662:	e018      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002664:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a61      	ldr	r2, [pc, #388]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002670:	e015      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fa95 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002682:	e00c      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3320      	adds	r3, #32
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fb7e 	bl	8002d8c <RCCEx_PLLSAI2_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002694:	e003      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	74fb      	strb	r3, [r7, #19]
      break;
 800269a:	e000      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800269c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10b      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026a4:	4b52      	ldr	r3, [pc, #328]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b2:	494f      	ldr	r1, [pc, #316]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026ba:	e001      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80a0 	beq.w	800280e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e8:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f2:	6593      	str	r3, [r2, #88]	; 0x58
 80026f4:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002700:	2301      	movs	r3, #1
 8002702:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002704:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3a      	ldr	r2, [pc, #232]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002710:	f7fe fba0 	bl	8000e54 <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002716:	e009      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7fe fb9c 	bl	8000e54 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d902      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	74fb      	strb	r3, [r7, #19]
        break;
 800272a:	e005      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800272c:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ef      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d15c      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002748:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01f      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	d019      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800275c:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002766:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002768:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d016      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fb5b 	bl	8000e54 <HAL_GetTick>
 800279e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a0:	e00b      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fb57 	bl	8000e54 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d902      	bls.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	74fb      	strb	r3, [r7, #19]
            break;
 80027b8:	e006      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ec      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	4904      	ldr	r1, [pc, #16]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027e6:	e009      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
 80027ec:	e006      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027fc:	7c7b      	ldrb	r3, [r7, #17]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4ba6      	ldr	r3, [pc, #664]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	4aa5      	ldr	r2, [pc, #660]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800281a:	4ba0      	ldr	r3, [pc, #640]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 0203 	bic.w	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	499c      	ldr	r1, [pc, #624]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800283c:	4b97      	ldr	r3, [pc, #604]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 020c 	bic.w	r2, r3, #12
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	4994      	ldr	r1, [pc, #592]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800285e:	4b8f      	ldr	r3, [pc, #572]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	498b      	ldr	r1, [pc, #556]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002880:	4b86      	ldr	r3, [pc, #536]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4983      	ldr	r1, [pc, #524]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028a2:	4b7e      	ldr	r3, [pc, #504]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	497a      	ldr	r1, [pc, #488]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c4:	4b75      	ldr	r3, [pc, #468]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	4972      	ldr	r1, [pc, #456]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e6:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f4:	4969      	ldr	r1, [pc, #420]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002916:	4961      	ldr	r1, [pc, #388]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	4958      	ldr	r1, [pc, #352]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	4950      	ldr	r1, [pc, #320]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800296e:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4947      	ldr	r1, [pc, #284]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002990:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	493f      	ldr	r1, [pc, #252]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d028      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b2:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4936      	ldr	r1, [pc, #216]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d0:	d106      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d2:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029dc:	60d3      	str	r3, [r2, #12]
 80029de:	e011      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 f8d9 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029fa:	7cfb      	ldrb	r3, [r7, #19]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d028      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	491f      	ldr	r1, [pc, #124]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]
 8002a3c:	e011      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f8aa 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d02a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8e:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a02      	ldr	r2, [pc, #8]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a98:	60d3      	str	r3, [r2, #12]
 8002a9a:	e013      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002a9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f879 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02f      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad0:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4929      	ldr	r1, [pc, #164]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f856 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d014      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	74bb      	strb	r3, [r7, #18]
 8002b0a:	e011      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3320      	adds	r3, #32
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f935 	bl	8002d8c <RCCEx_PLLSAI2_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4c:	490d      	ldr	r1, [pc, #52]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b70:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b78:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000

08002b88 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bb6:	4b74      	ldr	r3, [pc, #464]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d018      	beq.n	8002bf4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bc2:	4b71      	ldr	r3, [pc, #452]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0203 	and.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d10d      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bda:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
       ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d047      	beq.n	8002c7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	e044      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d018      	beq.n	8002c2e <RCCEx_PLLSAI1_Config+0x86>
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d825      	bhi.n	8002c4c <RCCEx_PLLSAI1_Config+0xa4>
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <RCCEx_PLLSAI1_Config+0x62>
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d009      	beq.n	8002c1c <RCCEx_PLLSAI1_Config+0x74>
 8002c08:	e020      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11d      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1a:	e01a      	b.n	8002c52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c1c:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2c:	e013      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c2e:	4b56      	ldr	r3, [pc, #344]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c3a:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c4a:	e006      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c50:	e004      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c52:	bf00      	nop
 8002c54:	e002      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c62:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	430b      	orrs	r3, r1
 8002c78:	4943      	ldr	r1, [pc, #268]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d17c      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c84:	4b40      	ldr	r3, [pc, #256]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a3f      	ldr	r2, [pc, #252]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fe f8e0 	bl	8000e54 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c96:	e009      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c98:	f7fe f8dc 	bl	8000e54 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8002caa:	e005      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cac:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ef      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d15f      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d110      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc4:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ccc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6892      	ldr	r2, [r2, #8]
 8002cd4:	0211      	lsls	r1, r2, #8
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68d2      	ldr	r2, [r2, #12]
 8002cda:	06d2      	lsls	r2, r2, #27
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	492a      	ldr	r1, [pc, #168]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	610b      	str	r3, [r1, #16]
 8002ce4:	e027      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d112      	bne.n	8002d12 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cec:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6892      	ldr	r2, [r2, #8]
 8002cfc:	0211      	lsls	r1, r2, #8
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6912      	ldr	r2, [r2, #16]
 8002d02:	0852      	lsrs	r2, r2, #1
 8002d04:	3a01      	subs	r2, #1
 8002d06:	0552      	lsls	r2, r2, #21
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	491f      	ldr	r1, [pc, #124]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	610b      	str	r3, [r1, #16]
 8002d10:	e011      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6892      	ldr	r2, [r2, #8]
 8002d22:	0211      	lsls	r1, r2, #8
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6952      	ldr	r2, [r2, #20]
 8002d28:	0852      	lsrs	r2, r2, #1
 8002d2a:	3a01      	subs	r2, #1
 8002d2c:	0652      	lsls	r2, r2, #25
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	4915      	ldr	r1, [pc, #84]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fe f887 	bl	8000e54 <HAL_GetTick>
 8002d46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d48:	e009      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d4a:	f7fe f883 	bl	8000e54 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d902      	bls.n	8002d5e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	73fb      	strb	r3, [r7, #15]
          break;
 8002d5c:	e005      	b.n	8002d6a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0ef      	beq.n	8002d4a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	4903      	ldr	r1, [pc, #12]	; (8002d88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000

08002d8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d9a:	4b69      	ldr	r3, [pc, #420]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d018      	beq.n	8002dd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002da6:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0203 	and.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d10d      	bne.n	8002dd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dbe:	4b60      	ldr	r3, [pc, #384]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
       ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d047      	beq.n	8002e62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	e044      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d018      	beq.n	8002e12 <RCCEx_PLLSAI2_Config+0x86>
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d825      	bhi.n	8002e30 <RCCEx_PLLSAI2_Config+0xa4>
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d002      	beq.n	8002dee <RCCEx_PLLSAI2_Config+0x62>
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d009      	beq.n	8002e00 <RCCEx_PLLSAI2_Config+0x74>
 8002dec:	e020      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dee:	4b54      	ldr	r3, [pc, #336]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11d      	bne.n	8002e36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfe:	e01a      	b.n	8002e36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e00:	4b4f      	ldr	r3, [pc, #316]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d116      	bne.n	8002e3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e10:	e013      	b.n	8002e3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e12:	4b4b      	ldr	r3, [pc, #300]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10f      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e1e:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e2e:	e006      	b.n	8002e3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      break;
 8002e34:	e004      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e36:	bf00      	nop
 8002e38:	e002      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e3a:	bf00      	nop
 8002e3c:	e000      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e46:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	4938      	ldr	r1, [pc, #224]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d166      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e68:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e74:	f7fd ffee 	bl	8000e54 <HAL_GetTick>
 8002e78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e7a:	e009      	b.n	8002e90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e7c:	f7fd ffea 	bl	8000e54 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d902      	bls.n	8002e90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e8e:	e005      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e90:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ef      	bne.n	8002e7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d149      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d110      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002eb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6892      	ldr	r2, [r2, #8]
 8002eb8:	0211      	lsls	r1, r2, #8
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68d2      	ldr	r2, [r2, #12]
 8002ebe:	06d2      	lsls	r2, r2, #27
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	491f      	ldr	r1, [pc, #124]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	614b      	str	r3, [r1, #20]
 8002ec8:	e011      	b.n	8002eee <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ed2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	0211      	lsls	r1, r2, #8
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6912      	ldr	r2, [r2, #16]
 8002ee0:	0852      	lsrs	r2, r2, #1
 8002ee2:	3a01      	subs	r2, #1
 8002ee4:	0652      	lsls	r2, r2, #25
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	4915      	ldr	r1, [pc, #84]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fd ffab 	bl	8000e54 <HAL_GetTick>
 8002efe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f00:	e009      	b.n	8002f16 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f02:	f7fd ffa7 	bl	8000e54 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d902      	bls.n	8002f16 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	73fb      	strb	r3, [r7, #15]
          break;
 8002f14:	e005      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ef      	beq.n	8002f02 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	4903      	ldr	r1, [pc, #12]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000

08002f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e040      	b.n	8002fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd fd74 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fc18 	bl	80037b8 <UART_SetConfig>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fec4 	bl	8003d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 ff4b 	bl	8003e6c <UART_CheckIdleState>
 8002fd6:	4603      	mov	r3, r0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	f040 8082 	bne.w	80030fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_UART_Transmit+0x26>
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07a      	b.n	8003100 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_UART_Transmit+0x38>
 8003014:	2302      	movs	r3, #2
 8003016:	e073      	b.n	8003100 <HAL_UART_Transmit+0x120>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2221      	movs	r2, #33	; 0x21
 800302c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800302e:	f7fd ff11 	bl	8000e54 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304c:	d108      	bne.n	8003060 <HAL_UART_Transmit+0x80>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e003      	b.n	8003068 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003070:	e02d      	b.n	80030ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 ff3e 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e039      	b.n	8003100 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800309e:	b292      	uxth	r2, r2
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	3302      	adds	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e008      	b.n	80030bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b292      	uxth	r2, r2
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3301      	adds	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1cb      	bne.n	8003072 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2140      	movs	r1, #64	; 0x40
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 ff0a 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e005      	b.n	8003100 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800311a:	2b20      	cmp	r3, #32
 800311c:	d142      	bne.n	80031a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_UART_Receive_IT+0x22>
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e03b      	b.n	80031a6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_UART_Receive_IT+0x34>
 8003138:	2302      	movs	r3, #2
 800313a:	e034      	b.n	80031a6 <HAL_UART_Receive_IT+0x9e>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_UART_Receive_IT+0xa8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d01f      	beq.n	8003194 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	e853 3f00 	ldrex	r3, [r3]
 800316e:	613b      	str	r3, [r7, #16]
   return(result);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	69f9      	ldr	r1, [r7, #28]
 8003186:	6a3a      	ldr	r2, [r7, #32]
 8003188:	e841 2300 	strex	r3, r2, [r1]
 800318c:	61bb      	str	r3, [r7, #24]
   return(result);
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e6      	bne.n	8003162 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	461a      	mov	r2, r3
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 ff74 	bl	8004088 <UART_Start_Receive_IT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	e000      	b.n	80031a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3728      	adds	r7, #40	; 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40008000 	.word	0x40008000

080031b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b0ba      	sub	sp, #232	; 0xe8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031de:	f640 030f 	movw	r3, #2063	; 0x80f
 80031e2:	4013      	ands	r3, r2
 80031e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d115      	bne.n	800321c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00f      	beq.n	800321c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 82a6 	beq.w	800375e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
      }
      return;
 800321a:	e2a0      	b.n	800375e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800321c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8117 	beq.w	8003454 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003236:	4b85      	ldr	r3, [pc, #532]	; (800344c <HAL_UART_IRQHandler+0x298>)
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 810a 	beq.w	8003454 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d011      	beq.n	8003270 <HAL_UART_IRQHandler+0xbc>
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2201      	movs	r2, #1
 800325e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d011      	beq.n	80032a0 <HAL_UART_IRQHandler+0xec>
 800327c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2202      	movs	r2, #2
 800328e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d011      	beq.n	80032d0 <HAL_UART_IRQHandler+0x11c>
 80032ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2204      	movs	r2, #4
 80032be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c6:	f043 0202 	orr.w	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d017      	beq.n	800330c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2208      	movs	r2, #8
 80032fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003302:	f043 0208 	orr.w	r2, r3, #8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800330c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003314:	2b00      	cmp	r3, #0
 8003316:	d012      	beq.n	800333e <HAL_UART_IRQHandler+0x18a>
 8003318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800331c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00c      	beq.n	800333e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800332c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 820c 	beq.w	8003762 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003378:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d005      	beq.n	8003396 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800338a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800338e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003392:	2b00      	cmp	r3, #0
 8003394:	d04f      	beq.n	8003436 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 ff40 	bl	800421c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	d141      	bne.n	800342e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3308      	adds	r3, #8
 80033b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3308      	adds	r3, #8
 80033d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1d9      	bne.n	80033aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d013      	beq.n	8003426 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <HAL_UART_IRQHandler+0x29c>)
 8003404:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd fea1 	bl	8001152 <HAL_DMA_Abort_IT>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d017      	beq.n	8003446 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003420:	4610      	mov	r0, r2
 8003422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	e00f      	b.n	8003446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f9b0 	bl	800378c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	e00b      	b.n	8003446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f9ac 	bl	800378c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	e007      	b.n	8003446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f9a8 	bl	800378c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003444:	e18d      	b.n	8003762 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003446:	bf00      	nop
    return;
 8003448:	e18b      	b.n	8003762 <HAL_UART_IRQHandler+0x5ae>
 800344a:	bf00      	nop
 800344c:	04000120 	.word	0x04000120
 8003450:	080042e3 	.word	0x080042e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 8146 	bne.w	80036ea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800345e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 813f 	beq.w	80036ea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800346c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8138 	beq.w	80036ea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2210      	movs	r2, #16
 8003480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	f040 80b4 	bne.w	80035fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800349e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 815f 	beq.w	8003766 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80034ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034b2:	429a      	cmp	r2, r3
 80034b4:	f080 8157 	bcs.w	8003766 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 8085 	bne.w	80035de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003502:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800350a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1da      	bne.n	80034d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800352e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3308      	adds	r3, #8
 800353e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003542:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003546:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800354a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e1      	bne.n	800351e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3308      	adds	r3, #8
 8003560:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3308      	adds	r3, #8
 800357a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800357e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003580:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003582:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800358c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e3      	bne.n	800355a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ae:	f023 0310 	bic.w	r3, r3, #16
 80035b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e4      	bne.n	800359e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fd7c 	bl	80010d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8d4 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035f8:	e0b5      	b.n	8003766 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003606:	b29b      	uxth	r3, r3
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80a7 	beq.w	800376a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800361c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a2 	beq.w	800376a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800363a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003648:	647b      	str	r3, [r7, #68]	; 0x44
 800364a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800364e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e4      	bne.n	8003626 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3308      	adds	r3, #8
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	623b      	str	r3, [r7, #32]
   return(result);
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3308      	adds	r3, #8
 800367c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003680:	633a      	str	r2, [r7, #48]	; 0x30
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e3      	bne.n	800365c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	69b9      	ldr	r1, [r7, #24]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	617b      	str	r3, [r7, #20]
   return(result);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e4      	bne.n	80036a6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f85c 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036e8:	e03f      	b.n	800376a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00e      	beq.n	8003714 <HAL_UART_IRQHandler+0x560>
 80036f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800370a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 ff88 	bl	8004622 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003712:	e02d      	b.n	8003770 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01c      	beq.n	800376e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
    }
    return;
 800373c:	e017      	b.n	800376e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d012      	beq.n	8003770 <HAL_UART_IRQHandler+0x5bc>
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fdd9 	bl	800430e <UART_EndTransmit_IT>
    return;
 800375c:	e008      	b.n	8003770 <HAL_UART_IRQHandler+0x5bc>
      return;
 800375e:	bf00      	nop
 8003760:	e006      	b.n	8003770 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003762:	bf00      	nop
 8003764:	e004      	b.n	8003770 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003766:	bf00      	nop
 8003768:	e002      	b.n	8003770 <HAL_UART_IRQHandler+0x5bc>
      return;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <HAL_UART_IRQHandler+0x5bc>
    return;
 800376e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003770:	37e8      	adds	r7, #232	; 0xe8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop

08003778 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037bc:	b08a      	sub	sp, #40	; 0x28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	4313      	orrs	r3, r2
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4ba4      	ldr	r3, [pc, #656]	; (8003a78 <UART_SetConfig+0x2c0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a99      	ldr	r2, [pc, #612]	; (8003a7c <UART_SetConfig+0x2c4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	4313      	orrs	r3, r2
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a90      	ldr	r2, [pc, #576]	; (8003a80 <UART_SetConfig+0x2c8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d126      	bne.n	8003890 <UART_SetConfig+0xd8>
 8003842:	4b90      	ldr	r3, [pc, #576]	; (8003a84 <UART_SetConfig+0x2cc>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d81b      	bhi.n	8003888 <UART_SetConfig+0xd0>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0xa0>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	08003869 	.word	0x08003869
 800385c:	08003879 	.word	0x08003879
 8003860:	08003871 	.word	0x08003871
 8003864:	08003881 	.word	0x08003881
 8003868:	2301      	movs	r3, #1
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e116      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003870:	2302      	movs	r3, #2
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003876:	e112      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003878:	2304      	movs	r3, #4
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387e:	e10e      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003880:	2308      	movs	r3, #8
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003886:	e10a      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003888:	2310      	movs	r3, #16
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e106      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a7c      	ldr	r2, [pc, #496]	; (8003a88 <UART_SetConfig+0x2d0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d138      	bne.n	800390c <UART_SetConfig+0x154>
 800389a:	4b7a      	ldr	r3, [pc, #488]	; (8003a84 <UART_SetConfig+0x2cc>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	d82d      	bhi.n	8003904 <UART_SetConfig+0x14c>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <UART_SetConfig+0xf8>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	08003905 	.word	0x08003905
 80038b8:	08003905 	.word	0x08003905
 80038bc:	08003905 	.word	0x08003905
 80038c0:	080038f5 	.word	0x080038f5
 80038c4:	08003905 	.word	0x08003905
 80038c8:	08003905 	.word	0x08003905
 80038cc:	08003905 	.word	0x08003905
 80038d0:	080038ed 	.word	0x080038ed
 80038d4:	08003905 	.word	0x08003905
 80038d8:	08003905 	.word	0x08003905
 80038dc:	08003905 	.word	0x08003905
 80038e0:	080038fd 	.word	0x080038fd
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ea:	e0d8      	b.n	8003a9e <UART_SetConfig+0x2e6>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e0d4      	b.n	8003a9e <UART_SetConfig+0x2e6>
 80038f4:	2304      	movs	r3, #4
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e0d0      	b.n	8003a9e <UART_SetConfig+0x2e6>
 80038fc:	2308      	movs	r3, #8
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e0cc      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e0c8      	b.n	8003a9e <UART_SetConfig+0x2e6>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5e      	ldr	r2, [pc, #376]	; (8003a8c <UART_SetConfig+0x2d4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d125      	bne.n	8003962 <UART_SetConfig+0x1aa>
 8003916:	4b5b      	ldr	r3, [pc, #364]	; (8003a84 <UART_SetConfig+0x2cc>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d016      	beq.n	8003952 <UART_SetConfig+0x19a>
 8003924:	2b30      	cmp	r3, #48	; 0x30
 8003926:	d818      	bhi.n	800395a <UART_SetConfig+0x1a2>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d00a      	beq.n	8003942 <UART_SetConfig+0x18a>
 800392c:	2b20      	cmp	r3, #32
 800392e:	d814      	bhi.n	800395a <UART_SetConfig+0x1a2>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <UART_SetConfig+0x182>
 8003934:	2b10      	cmp	r3, #16
 8003936:	d008      	beq.n	800394a <UART_SetConfig+0x192>
 8003938:	e00f      	b.n	800395a <UART_SetConfig+0x1a2>
 800393a:	2300      	movs	r3, #0
 800393c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003940:	e0ad      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003942:	2302      	movs	r3, #2
 8003944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003948:	e0a9      	b.n	8003a9e <UART_SetConfig+0x2e6>
 800394a:	2304      	movs	r3, #4
 800394c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003950:	e0a5      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003952:	2308      	movs	r3, #8
 8003954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003958:	e0a1      	b.n	8003a9e <UART_SetConfig+0x2e6>
 800395a:	2310      	movs	r3, #16
 800395c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003960:	e09d      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a4a      	ldr	r2, [pc, #296]	; (8003a90 <UART_SetConfig+0x2d8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d125      	bne.n	80039b8 <UART_SetConfig+0x200>
 800396c:	4b45      	ldr	r3, [pc, #276]	; (8003a84 <UART_SetConfig+0x2cc>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003976:	2bc0      	cmp	r3, #192	; 0xc0
 8003978:	d016      	beq.n	80039a8 <UART_SetConfig+0x1f0>
 800397a:	2bc0      	cmp	r3, #192	; 0xc0
 800397c:	d818      	bhi.n	80039b0 <UART_SetConfig+0x1f8>
 800397e:	2b80      	cmp	r3, #128	; 0x80
 8003980:	d00a      	beq.n	8003998 <UART_SetConfig+0x1e0>
 8003982:	2b80      	cmp	r3, #128	; 0x80
 8003984:	d814      	bhi.n	80039b0 <UART_SetConfig+0x1f8>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <UART_SetConfig+0x1d8>
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d008      	beq.n	80039a0 <UART_SetConfig+0x1e8>
 800398e:	e00f      	b.n	80039b0 <UART_SetConfig+0x1f8>
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e082      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003998:	2302      	movs	r3, #2
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e07e      	b.n	8003a9e <UART_SetConfig+0x2e6>
 80039a0:	2304      	movs	r3, #4
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e07a      	b.n	8003a9e <UART_SetConfig+0x2e6>
 80039a8:	2308      	movs	r3, #8
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ae:	e076      	b.n	8003a9e <UART_SetConfig+0x2e6>
 80039b0:	2310      	movs	r3, #16
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b6:	e072      	b.n	8003a9e <UART_SetConfig+0x2e6>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a35      	ldr	r2, [pc, #212]	; (8003a94 <UART_SetConfig+0x2dc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d12a      	bne.n	8003a18 <UART_SetConfig+0x260>
 80039c2:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <UART_SetConfig+0x2cc>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d0:	d01a      	beq.n	8003a08 <UART_SetConfig+0x250>
 80039d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d6:	d81b      	bhi.n	8003a10 <UART_SetConfig+0x258>
 80039d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039dc:	d00c      	beq.n	80039f8 <UART_SetConfig+0x240>
 80039de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e2:	d815      	bhi.n	8003a10 <UART_SetConfig+0x258>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <UART_SetConfig+0x238>
 80039e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ec:	d008      	beq.n	8003a00 <UART_SetConfig+0x248>
 80039ee:	e00f      	b.n	8003a10 <UART_SetConfig+0x258>
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f6:	e052      	b.n	8003a9e <UART_SetConfig+0x2e6>
 80039f8:	2302      	movs	r3, #2
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fe:	e04e      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003a00:	2304      	movs	r3, #4
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a06:	e04a      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003a08:	2308      	movs	r3, #8
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	e046      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003a10:	2310      	movs	r3, #16
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e042      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <UART_SetConfig+0x2c4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d13a      	bne.n	8003a98 <UART_SetConfig+0x2e0>
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <UART_SetConfig+0x2cc>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a30:	d01a      	beq.n	8003a68 <UART_SetConfig+0x2b0>
 8003a32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a36:	d81b      	bhi.n	8003a70 <UART_SetConfig+0x2b8>
 8003a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3c:	d00c      	beq.n	8003a58 <UART_SetConfig+0x2a0>
 8003a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a42:	d815      	bhi.n	8003a70 <UART_SetConfig+0x2b8>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <UART_SetConfig+0x298>
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d008      	beq.n	8003a60 <UART_SetConfig+0x2a8>
 8003a4e:	e00f      	b.n	8003a70 <UART_SetConfig+0x2b8>
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a56:	e022      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5e:	e01e      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003a60:	2304      	movs	r3, #4
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a66:	e01a      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6e:	e016      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e012      	b.n	8003a9e <UART_SetConfig+0x2e6>
 8003a78:	efff69f3 	.word	0xefff69f3
 8003a7c:	40008000 	.word	0x40008000
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40004400 	.word	0x40004400
 8003a8c:	40004800 	.word	0x40004800
 8003a90:	40004c00 	.word	0x40004c00
 8003a94:	40005000 	.word	0x40005000
 8003a98:	2310      	movs	r3, #16
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a9f      	ldr	r2, [pc, #636]	; (8003d20 <UART_SetConfig+0x568>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d17a      	bne.n	8003b9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d824      	bhi.n	8003afa <UART_SetConfig+0x342>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <UART_SetConfig+0x300>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003add 	.word	0x08003add
 8003abc:	08003afb 	.word	0x08003afb
 8003ac0:	08003ae5 	.word	0x08003ae5
 8003ac4:	08003afb 	.word	0x08003afb
 8003ac8:	08003aeb 	.word	0x08003aeb
 8003acc:	08003afb 	.word	0x08003afb
 8003ad0:	08003afb 	.word	0x08003afb
 8003ad4:	08003afb 	.word	0x08003afb
 8003ad8:	08003af3 	.word	0x08003af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003adc:	f7fe fccc 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003ae0:	61f8      	str	r0, [r7, #28]
        break;
 8003ae2:	e010      	b.n	8003b06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae4:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <UART_SetConfig+0x56c>)
 8003ae6:	61fb      	str	r3, [r7, #28]
        break;
 8003ae8:	e00d      	b.n	8003b06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aea:	f7fe fc2d 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003aee:	61f8      	str	r0, [r7, #28]
        break;
 8003af0:	e009      	b.n	8003b06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af6:	61fb      	str	r3, [r7, #28]
        break;
 8003af8:	e005      	b.n	8003b06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80fb 	beq.w	8003d04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	4413      	add	r3, r2
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d305      	bcc.n	8003b2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d903      	bls.n	8003b32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b30:	e0e8      	b.n	8003d04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2200      	movs	r2, #0
 8003b36:	461c      	mov	r4, r3
 8003b38:	4615      	mov	r5, r2
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	022b      	lsls	r3, r5, #8
 8003b44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b48:	0222      	lsls	r2, r4, #8
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	6849      	ldr	r1, [r1, #4]
 8003b4e:	0849      	lsrs	r1, r1, #1
 8003b50:	2000      	movs	r0, #0
 8003b52:	4688      	mov	r8, r1
 8003b54:	4681      	mov	r9, r0
 8003b56:	eb12 0a08 	adds.w	sl, r2, r8
 8003b5a:	eb43 0b09 	adc.w	fp, r3, r9
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b6c:	4650      	mov	r0, sl
 8003b6e:	4659      	mov	r1, fp
 8003b70:	f7fc fb8e 	bl	8000290 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b82:	d308      	bcc.n	8003b96 <UART_SetConfig+0x3de>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8a:	d204      	bcs.n	8003b96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	60da      	str	r2, [r3, #12]
 8003b94:	e0b6      	b.n	8003d04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b9c:	e0b2      	b.n	8003d04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba6:	d15e      	bne.n	8003c66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d828      	bhi.n	8003c02 <UART_SetConfig+0x44a>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <UART_SetConfig+0x400>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bdd 	.word	0x08003bdd
 8003bbc:	08003be5 	.word	0x08003be5
 8003bc0:	08003bed 	.word	0x08003bed
 8003bc4:	08003c03 	.word	0x08003c03
 8003bc8:	08003bf3 	.word	0x08003bf3
 8003bcc:	08003c03 	.word	0x08003c03
 8003bd0:	08003c03 	.word	0x08003c03
 8003bd4:	08003c03 	.word	0x08003c03
 8003bd8:	08003bfb 	.word	0x08003bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bdc:	f7fe fc4c 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003be0:	61f8      	str	r0, [r7, #28]
        break;
 8003be2:	e014      	b.n	8003c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be4:	f7fe fc5e 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8003be8:	61f8      	str	r0, [r7, #28]
        break;
 8003bea:	e010      	b.n	8003c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bec:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <UART_SetConfig+0x56c>)
 8003bee:	61fb      	str	r3, [r7, #28]
        break;
 8003bf0:	e00d      	b.n	8003c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf2:	f7fe fba9 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003bf6:	61f8      	str	r0, [r7, #28]
        break;
 8003bf8:	e009      	b.n	8003c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfe:	61fb      	str	r3, [r7, #28]
        break;
 8003c00:	e005      	b.n	8003c0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d077      	beq.n	8003d04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005a      	lsls	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	441a      	add	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b0f      	cmp	r3, #15
 8003c2e:	d916      	bls.n	8003c5e <UART_SetConfig+0x4a6>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d212      	bcs.n	8003c5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f023 030f 	bic.w	r3, r3, #15
 8003c40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	8afb      	ldrh	r3, [r7, #22]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	8afa      	ldrh	r2, [r7, #22]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	e052      	b.n	8003d04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c64:	e04e      	b.n	8003d04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d827      	bhi.n	8003cbe <UART_SetConfig+0x506>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <UART_SetConfig+0x4bc>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003c99 	.word	0x08003c99
 8003c78:	08003ca1 	.word	0x08003ca1
 8003c7c:	08003ca9 	.word	0x08003ca9
 8003c80:	08003cbf 	.word	0x08003cbf
 8003c84:	08003caf 	.word	0x08003caf
 8003c88:	08003cbf 	.word	0x08003cbf
 8003c8c:	08003cbf 	.word	0x08003cbf
 8003c90:	08003cbf 	.word	0x08003cbf
 8003c94:	08003cb7 	.word	0x08003cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c98:	f7fe fbee 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003c9c:	61f8      	str	r0, [r7, #28]
        break;
 8003c9e:	e014      	b.n	8003cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca0:	f7fe fc00 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8003ca4:	61f8      	str	r0, [r7, #28]
        break;
 8003ca6:	e010      	b.n	8003cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <UART_SetConfig+0x56c>)
 8003caa:	61fb      	str	r3, [r7, #28]
        break;
 8003cac:	e00d      	b.n	8003cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cae:	f7fe fb4b 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003cb2:	61f8      	str	r0, [r7, #28]
        break;
 8003cb4:	e009      	b.n	8003cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cba:	61fb      	str	r3, [r7, #28]
        break;
 8003cbc:	e005      	b.n	8003cca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cc8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d019      	beq.n	8003d04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	085a      	lsrs	r2, r3, #1
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	441a      	add	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	d909      	bls.n	8003cfe <UART_SetConfig+0x546>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf0:	d205      	bcs.n	8003cfe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60da      	str	r2, [r3, #12]
 8003cfc:	e002      	b.n	8003d04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d1e:	bf00      	nop
 8003d20:	40008000 	.word	0x40008000
 8003d24:	00f42400 	.word	0x00f42400

08003d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e26:	d10a      	bne.n	8003e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e7c:	f7fc ffea 	bl	8000e54 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d10e      	bne.n	8003eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f82d 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e023      	b.n	8003ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d10e      	bne.n	8003eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f817 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e00d      	b.n	8003ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b09c      	sub	sp, #112	; 0x70
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0e:	e0a5      	b.n	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f16:	f000 80a1 	beq.w	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fc ff9b 	bl	8000e54 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d13e      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f44:	667b      	str	r3, [r7, #100]	; 0x64
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e6      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3308      	adds	r3, #8
 8003f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e5      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e067      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d04f      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d147      	bne.n	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e6      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3308      	adds	r3, #8
 800400e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	613b      	str	r3, [r7, #16]
   return(result);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004028:	623a      	str	r2, [r7, #32]
 800402a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	69f9      	ldr	r1, [r7, #28]
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	61bb      	str	r3, [r7, #24]
   return(result);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e5      	bne.n	8004008 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e010      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	429a      	cmp	r2, r3
 8004078:	f43f af4a 	beq.w	8003f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3770      	adds	r7, #112	; 0x70
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004088:	b480      	push	{r7}
 800408a:	b097      	sub	sp, #92	; 0x5c
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d10e      	bne.n	80040da <UART_Start_Receive_IT+0x52>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <UART_Start_Receive_IT+0x48>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ce:	e02d      	b.n	800412c <UART_Start_Receive_IT+0xa4>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	22ff      	movs	r2, #255	; 0xff
 80040d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040d8:	e028      	b.n	800412c <UART_Start_Receive_IT+0xa4>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10d      	bne.n	80040fe <UART_Start_Receive_IT+0x76>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <UART_Start_Receive_IT+0x6c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	22ff      	movs	r2, #255	; 0xff
 80040ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040f2:	e01b      	b.n	800412c <UART_Start_Receive_IT+0xa4>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	227f      	movs	r2, #127	; 0x7f
 80040f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040fc:	e016      	b.n	800412c <UART_Start_Receive_IT+0xa4>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004106:	d10d      	bne.n	8004124 <UART_Start_Receive_IT+0x9c>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <UART_Start_Receive_IT+0x92>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	227f      	movs	r2, #127	; 0x7f
 8004114:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004118:	e008      	b.n	800412c <UART_Start_Receive_IT+0xa4>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	223f      	movs	r2, #63	; 0x3f
 800411e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004122:	e003      	b.n	800412c <UART_Start_Receive_IT+0xa4>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2222      	movs	r2, #34	; 0x22
 8004138:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	657b      	str	r3, [r7, #84]	; 0x54
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800415a:	64ba      	str	r2, [r7, #72]	; 0x48
 800415c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d107      	bne.n	8004188 <UART_Start_Receive_IT+0x100>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a24      	ldr	r2, [pc, #144]	; (8004214 <UART_Start_Receive_IT+0x18c>)
 8004184:	665a      	str	r2, [r3, #100]	; 0x64
 8004186:	e002      	b.n	800418e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a23      	ldr	r2, [pc, #140]	; (8004218 <UART_Start_Receive_IT+0x190>)
 800418c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d019      	beq.n	80041d2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
 80041be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e6      	bne.n	800419e <UART_Start_Receive_IT+0x116>
 80041d0:	e018      	b.n	8004204 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	613b      	str	r3, [r7, #16]
   return(result);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f043 0320 	orr.w	r3, r3, #32
 80041e6:	653b      	str	r3, [r7, #80]	; 0x50
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f0:	623b      	str	r3, [r7, #32]
 80041f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	69f9      	ldr	r1, [r7, #28]
 80041f6:	6a3a      	ldr	r2, [r7, #32]
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	375c      	adds	r7, #92	; 0x5c
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	080044c3 	.word	0x080044c3
 8004218:	08004363 	.word	0x08004363

0800421c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800421c:	b480      	push	{r7}
 800421e:	b095      	sub	sp, #84	; 0x54
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004242:	643b      	str	r3, [r7, #64]	; 0x40
 8004244:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e6      	bne.n	8004224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3308      	adds	r3, #8
 800425c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	61fb      	str	r3, [r7, #28]
   return(result);
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	64bb      	str	r3, [r7, #72]	; 0x48
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3308      	adds	r3, #8
 8004274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800427c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e5      	bne.n	8004256 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428e:	2b01      	cmp	r3, #1
 8004290:	d118      	bne.n	80042c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 0310 	bic.w	r3, r3, #16
 80042a6:	647b      	str	r3, [r7, #68]	; 0x44
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6979      	ldr	r1, [r7, #20]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	613b      	str	r3, [r7, #16]
   return(result);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e6      	bne.n	8004292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042d6:	bf00      	nop
 80042d8:	3754      	adds	r7, #84	; 0x54
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff fa43 	bl	800378c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b088      	sub	sp, #32
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	60bb      	str	r3, [r7, #8]
   return(result);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6979      	ldr	r1, [r7, #20]
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	613b      	str	r3, [r7, #16]
   return(result);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e6      	bne.n	8004316 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff fa0f 	bl	8003778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800435a:	bf00      	nop
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b096      	sub	sp, #88	; 0x58
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004370:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004378:	2b22      	cmp	r3, #34	; 0x22
 800437a:	f040 8094 	bne.w	80044a6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004384:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004388:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800438c:	b2d9      	uxtb	r1, r3
 800438e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004392:	b2da      	uxtb	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	400a      	ands	r2, r1
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d179      	bne.n	80044ba <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043da:	653b      	str	r3, [r7, #80]	; 0x50
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e4:	647b      	str	r3, [r7, #68]	; 0x44
 80043e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e6      	bne.n	80043c6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	623b      	str	r3, [r7, #32]
   return(result);
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004418:	633a      	str	r2, [r7, #48]	; 0x30
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800441e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e5      	bne.n	80043f8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443c:	2b01      	cmp	r3, #1
 800443e:	d12e      	bne.n	800449e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	60fb      	str	r3, [r7, #12]
   return(result);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	64bb      	str	r3, [r7, #72]	; 0x48
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	617b      	str	r3, [r7, #20]
   return(result);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e6      	bne.n	8004446 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b10      	cmp	r3, #16
 8004484:	d103      	bne.n	800448e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2210      	movs	r2, #16
 800448c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff f982 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800449c:	e00d      	b.n	80044ba <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc fa58 	bl	8000954 <HAL_UART_RxCpltCallback>
}
 80044a4:	e009      	b.n	80044ba <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	8b1b      	ldrh	r3, [r3, #24]
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	b292      	uxth	r2, r2
 80044b8:	831a      	strh	r2, [r3, #24]
}
 80044ba:	bf00      	nop
 80044bc:	3758      	adds	r7, #88	; 0x58
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b096      	sub	sp, #88	; 0x58
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d8:	2b22      	cmp	r3, #34	; 0x22
 80044da:	f040 8094 	bne.w	8004606 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80044ee:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80044f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044f6:	4013      	ands	r3, r2
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	1c9a      	adds	r2, r3, #2
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d179      	bne.n	800461a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004544:	643b      	str	r3, [r7, #64]	; 0x40
 8004546:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800454a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	61fb      	str	r3, [r7, #28]
   return(result);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004578:	62fa      	str	r2, [r7, #44]	; 0x2c
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800457e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800459c:	2b01      	cmp	r3, #1
 800459e:	d12e      	bne.n	80045fe <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f023 0310 	bic.w	r3, r3, #16
 80045ba:	647b      	str	r3, [r7, #68]	; 0x44
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6979      	ldr	r1, [r7, #20]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	e841 2300 	strex	r3, r2, [r1]
 80045d0:	613b      	str	r3, [r7, #16]
   return(result);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e6      	bne.n	80045a6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d103      	bne.n	80045ee <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2210      	movs	r2, #16
 80045ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff f8d2 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045fc:	e00d      	b.n	800461a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc f9a8 	bl	8000954 <HAL_UART_RxCpltCallback>
}
 8004604:	e009      	b.n	800461a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	8b1b      	ldrh	r3, [r3, #24]
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0208 	orr.w	r2, r2, #8
 8004616:	b292      	uxth	r2, r2
 8004618:	831a      	strh	r2, [r3, #24]
}
 800461a:	bf00      	nop
 800461c:	3758      	adds	r7, #88	; 0x58
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004636:	b084      	sub	sp, #16
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	f107 001c 	add.w	r0, r7, #28
 8004644:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fa6f 	bl	8004b38 <USB_CoreReset>
 800465a:	4603      	mov	r3, r0
 800465c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d106      	bne.n	8004672 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
 8004670:	e005      	b.n	800467e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800468a:	b004      	add	sp, #16
 800468c:	4770      	bx	lr

0800468e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d115      	bne.n	80046fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046de:	2001      	movs	r0, #1
 80046e0:	f7fc fbc4 	bl	8000e6c <HAL_Delay>
      ms++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa16 	bl	8004b1c <USB_GetMode>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d01e      	beq.n	8004734 <USB_SetCurrentMode+0x84>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b31      	cmp	r3, #49	; 0x31
 80046fa:	d9f0      	bls.n	80046de <USB_SetCurrentMode+0x2e>
 80046fc:	e01a      	b.n	8004734 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d115      	bne.n	8004730 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004710:	2001      	movs	r0, #1
 8004712:	f7fc fbab 	bl	8000e6c <HAL_Delay>
      ms++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f9fd 	bl	8004b1c <USB_GetMode>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <USB_SetCurrentMode+0x84>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b31      	cmp	r3, #49	; 0x31
 800472c:	d9f0      	bls.n	8004710 <USB_SetCurrentMode+0x60>
 800472e:	e001      	b.n	8004734 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e005      	b.n	8004740 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b32      	cmp	r3, #50	; 0x32
 8004738:	d101      	bne.n	800473e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004748:	b084      	sub	sp, #16
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	e009      	b.n	800477c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3340      	adds	r3, #64	; 0x40
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	2200      	movs	r2, #0
 8004774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	3301      	adds	r3, #1
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0e      	cmp	r3, #14
 8004780:	d9f2      	bls.n	8004768 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d11c      	bne.n	80047c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004796:	f043 0302 	orr.w	r3, r3, #2
 800479a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e005      	b.n	80047ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047d4:	461a      	mov	r2, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e0:	4619      	mov	r1, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e8:	461a      	mov	r2, r3
 80047ea:	680b      	ldr	r3, [r1, #0]
 80047ec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047ee:	2103      	movs	r1, #3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f959 	bl	8004aa8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047f6:	2110      	movs	r1, #16
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8f1 	bl	80049e0 <USB_FlushTxFifo>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f91d 	bl	8004a48 <USB_FlushRxFifo>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	461a      	mov	r2, r3
 800482c:	2300      	movs	r3, #0
 800482e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	e043      	b.n	80048ca <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004858:	d118      	bne.n	800488c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	461a      	mov	r2, r3
 800486e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e013      	b.n	800489e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	461a      	mov	r2, r3
 8004884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e008      	b.n	800489e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	461a      	mov	r2, r3
 800489a:	2300      	movs	r3, #0
 800489c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048aa:	461a      	mov	r2, r3
 80048ac:	2300      	movs	r3, #0
 80048ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	461a      	mov	r2, r3
 80048be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3301      	adds	r3, #1
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3b7      	bcc.n	8004842 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	e043      	b.n	8004960 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ee:	d118      	bne.n	8004922 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	461a      	mov	r2, r3
 8004904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e013      	b.n	8004934 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	461a      	mov	r2, r3
 800491a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e008      	b.n	8004934 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	2300      	movs	r3, #0
 8004932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	3301      	adds	r3, #1
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	429a      	cmp	r2, r3
 8004966:	d3b7      	bcc.n	80048d8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800497a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004988:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f043 0210 	orr.w	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <USB_DevInit+0x294>)
 800499c:	4313      	orrs	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f043 0208 	orr.w	r2, r3, #8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049c2:	f043 0304 	orr.w	r3, r3, #4
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d6:	b004      	add	sp, #16
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	803c3800 	.word	0x803c3800

080049e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3301      	adds	r3, #1
 80049f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <USB_FlushTxFifo+0x64>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e01b      	b.n	8004a38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	daf2      	bge.n	80049ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	019b      	lsls	r3, r3, #6
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <USB_FlushTxFifo+0x64>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e006      	b.n	8004a38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d0f0      	beq.n	8004a18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	00030d40 	.word	0x00030d40

08004a48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3301      	adds	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <USB_FlushRxFifo+0x5c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e018      	b.n	8004a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	daf2      	bge.n	8004a54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2210      	movs	r2, #16
 8004a76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <USB_FlushRxFifo+0x5c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e006      	b.n	8004a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d0f0      	beq.n	8004a78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	00030d40 	.word	0x00030d40

08004aa8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004af4:	f023 0303 	bic.w	r3, r3, #3
 8004af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b08:	f043 0302 	orr.w	r3, r3, #2
 8004b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0301 	and.w	r3, r3, #1
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <USB_CoreReset+0x64>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e01b      	b.n	8004b8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	daf2      	bge.n	8004b44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f043 0201 	orr.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <USB_CoreReset+0x64>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e006      	b.n	8004b8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d0f0      	beq.n	8004b6e <USB_CoreReset+0x36>

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	00030d40 	.word	0x00030d40

08004ba0 <__errno>:
 8004ba0:	4b01      	ldr	r3, [pc, #4]	; (8004ba8 <__errno+0x8>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	2000000c 	.word	0x2000000c

08004bac <__libc_init_array>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4d0d      	ldr	r5, [pc, #52]	; (8004be4 <__libc_init_array+0x38>)
 8004bb0:	4c0d      	ldr	r4, [pc, #52]	; (8004be8 <__libc_init_array+0x3c>)
 8004bb2:	1b64      	subs	r4, r4, r5
 8004bb4:	10a4      	asrs	r4, r4, #2
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	42a6      	cmp	r6, r4
 8004bba:	d109      	bne.n	8004bd0 <__libc_init_array+0x24>
 8004bbc:	4d0b      	ldr	r5, [pc, #44]	; (8004bec <__libc_init_array+0x40>)
 8004bbe:	4c0c      	ldr	r4, [pc, #48]	; (8004bf0 <__libc_init_array+0x44>)
 8004bc0:	f000 fca8 	bl	8005514 <_init>
 8004bc4:	1b64      	subs	r4, r4, r5
 8004bc6:	10a4      	asrs	r4, r4, #2
 8004bc8:	2600      	movs	r6, #0
 8004bca:	42a6      	cmp	r6, r4
 8004bcc:	d105      	bne.n	8004bda <__libc_init_array+0x2e>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd4:	4798      	blx	r3
 8004bd6:	3601      	adds	r6, #1
 8004bd8:	e7ee      	b.n	8004bb8 <__libc_init_array+0xc>
 8004bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bde:	4798      	blx	r3
 8004be0:	3601      	adds	r6, #1
 8004be2:	e7f2      	b.n	8004bca <__libc_init_array+0x1e>
 8004be4:	080055d0 	.word	0x080055d0
 8004be8:	080055d0 	.word	0x080055d0
 8004bec:	080055d0 	.word	0x080055d0
 8004bf0:	080055d4 	.word	0x080055d4

08004bf4 <memset>:
 8004bf4:	4402      	add	r2, r0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <memset+0xa>
 8004bfc:	4770      	bx	lr
 8004bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004c02:	e7f9      	b.n	8004bf8 <memset+0x4>

08004c04 <_vsniprintf_r>:
 8004c04:	b530      	push	{r4, r5, lr}
 8004c06:	4614      	mov	r4, r2
 8004c08:	2c00      	cmp	r4, #0
 8004c0a:	b09b      	sub	sp, #108	; 0x6c
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	da05      	bge.n	8004c1e <_vsniprintf_r+0x1a>
 8004c12:	238b      	movs	r3, #139	; 0x8b
 8004c14:	6003      	str	r3, [r0, #0]
 8004c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c1a:	b01b      	add	sp, #108	; 0x6c
 8004c1c:	bd30      	pop	{r4, r5, pc}
 8004c1e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004c22:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004c26:	bf14      	ite	ne
 8004c28:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004c2c:	4623      	moveq	r3, r4
 8004c2e:	9302      	str	r3, [sp, #8]
 8004c30:	9305      	str	r3, [sp, #20]
 8004c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c36:	9100      	str	r1, [sp, #0]
 8004c38:	9104      	str	r1, [sp, #16]
 8004c3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004c3e:	4669      	mov	r1, sp
 8004c40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c42:	f000 f875 	bl	8004d30 <_svfiprintf_r>
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	bfbc      	itt	lt
 8004c4a:	238b      	movlt	r3, #139	; 0x8b
 8004c4c:	602b      	strlt	r3, [r5, #0]
 8004c4e:	2c00      	cmp	r4, #0
 8004c50:	d0e3      	beq.n	8004c1a <_vsniprintf_r+0x16>
 8004c52:	9b00      	ldr	r3, [sp, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	e7df      	b.n	8004c1a <_vsniprintf_r+0x16>
	...

08004c5c <vsniprintf>:
 8004c5c:	b507      	push	{r0, r1, r2, lr}
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	460a      	mov	r2, r1
 8004c64:	4601      	mov	r1, r0
 8004c66:	4803      	ldr	r0, [pc, #12]	; (8004c74 <vsniprintf+0x18>)
 8004c68:	6800      	ldr	r0, [r0, #0]
 8004c6a:	f7ff ffcb 	bl	8004c04 <_vsniprintf_r>
 8004c6e:	b003      	add	sp, #12
 8004c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c74:	2000000c 	.word	0x2000000c

08004c78 <__ssputs_r>:
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	688e      	ldr	r6, [r1, #8]
 8004c7e:	429e      	cmp	r6, r3
 8004c80:	4682      	mov	sl, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	4690      	mov	r8, r2
 8004c86:	461f      	mov	r7, r3
 8004c88:	d838      	bhi.n	8004cfc <__ssputs_r+0x84>
 8004c8a:	898a      	ldrh	r2, [r1, #12]
 8004c8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c90:	d032      	beq.n	8004cf8 <__ssputs_r+0x80>
 8004c92:	6825      	ldr	r5, [r4, #0]
 8004c94:	6909      	ldr	r1, [r1, #16]
 8004c96:	eba5 0901 	sub.w	r9, r5, r1
 8004c9a:	6965      	ldr	r5, [r4, #20]
 8004c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	444b      	add	r3, r9
 8004ca8:	106d      	asrs	r5, r5, #1
 8004caa:	429d      	cmp	r5, r3
 8004cac:	bf38      	it	cc
 8004cae:	461d      	movcc	r5, r3
 8004cb0:	0553      	lsls	r3, r2, #21
 8004cb2:	d531      	bpl.n	8004d18 <__ssputs_r+0xa0>
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f000 fb63 	bl	8005380 <_malloc_r>
 8004cba:	4606      	mov	r6, r0
 8004cbc:	b950      	cbnz	r0, 8004cd4 <__ssputs_r+0x5c>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	f8ca 3000 	str.w	r3, [sl]
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd4:	6921      	ldr	r1, [r4, #16]
 8004cd6:	464a      	mov	r2, r9
 8004cd8:	f000 fabe 	bl	8005258 <memcpy>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	6126      	str	r6, [r4, #16]
 8004cea:	6165      	str	r5, [r4, #20]
 8004cec:	444e      	add	r6, r9
 8004cee:	eba5 0509 	sub.w	r5, r5, r9
 8004cf2:	6026      	str	r6, [r4, #0]
 8004cf4:	60a5      	str	r5, [r4, #8]
 8004cf6:	463e      	mov	r6, r7
 8004cf8:	42be      	cmp	r6, r7
 8004cfa:	d900      	bls.n	8004cfe <__ssputs_r+0x86>
 8004cfc:	463e      	mov	r6, r7
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	4632      	mov	r2, r6
 8004d02:	4641      	mov	r1, r8
 8004d04:	f000 fab6 	bl	8005274 <memmove>
 8004d08:	68a3      	ldr	r3, [r4, #8]
 8004d0a:	1b9b      	subs	r3, r3, r6
 8004d0c:	60a3      	str	r3, [r4, #8]
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	4433      	add	r3, r6
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	2000      	movs	r0, #0
 8004d16:	e7db      	b.n	8004cd0 <__ssputs_r+0x58>
 8004d18:	462a      	mov	r2, r5
 8004d1a:	f000 fba5 	bl	8005468 <_realloc_r>
 8004d1e:	4606      	mov	r6, r0
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d1e1      	bne.n	8004ce8 <__ssputs_r+0x70>
 8004d24:	6921      	ldr	r1, [r4, #16]
 8004d26:	4650      	mov	r0, sl
 8004d28:	f000 fabe 	bl	80052a8 <_free_r>
 8004d2c:	e7c7      	b.n	8004cbe <__ssputs_r+0x46>
	...

08004d30 <_svfiprintf_r>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	4698      	mov	r8, r3
 8004d36:	898b      	ldrh	r3, [r1, #12]
 8004d38:	061b      	lsls	r3, r3, #24
 8004d3a:	b09d      	sub	sp, #116	; 0x74
 8004d3c:	4607      	mov	r7, r0
 8004d3e:	460d      	mov	r5, r1
 8004d40:	4614      	mov	r4, r2
 8004d42:	d50e      	bpl.n	8004d62 <_svfiprintf_r+0x32>
 8004d44:	690b      	ldr	r3, [r1, #16]
 8004d46:	b963      	cbnz	r3, 8004d62 <_svfiprintf_r+0x32>
 8004d48:	2140      	movs	r1, #64	; 0x40
 8004d4a:	f000 fb19 	bl	8005380 <_malloc_r>
 8004d4e:	6028      	str	r0, [r5, #0]
 8004d50:	6128      	str	r0, [r5, #16]
 8004d52:	b920      	cbnz	r0, 8004d5e <_svfiprintf_r+0x2e>
 8004d54:	230c      	movs	r3, #12
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5c:	e0d1      	b.n	8004f02 <_svfiprintf_r+0x1d2>
 8004d5e:	2340      	movs	r3, #64	; 0x40
 8004d60:	616b      	str	r3, [r5, #20]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9309      	str	r3, [sp, #36]	; 0x24
 8004d66:	2320      	movs	r3, #32
 8004d68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d70:	2330      	movs	r3, #48	; 0x30
 8004d72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f1c <_svfiprintf_r+0x1ec>
 8004d76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d7a:	f04f 0901 	mov.w	r9, #1
 8004d7e:	4623      	mov	r3, r4
 8004d80:	469a      	mov	sl, r3
 8004d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d86:	b10a      	cbz	r2, 8004d8c <_svfiprintf_r+0x5c>
 8004d88:	2a25      	cmp	r2, #37	; 0x25
 8004d8a:	d1f9      	bne.n	8004d80 <_svfiprintf_r+0x50>
 8004d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d90:	d00b      	beq.n	8004daa <_svfiprintf_r+0x7a>
 8004d92:	465b      	mov	r3, fp
 8004d94:	4622      	mov	r2, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	4638      	mov	r0, r7
 8004d9a:	f7ff ff6d 	bl	8004c78 <__ssputs_r>
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f000 80aa 	beq.w	8004ef8 <_svfiprintf_r+0x1c8>
 8004da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004da6:	445a      	add	r2, fp
 8004da8:	9209      	str	r2, [sp, #36]	; 0x24
 8004daa:	f89a 3000 	ldrb.w	r3, [sl]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80a2 	beq.w	8004ef8 <_svfiprintf_r+0x1c8>
 8004db4:	2300      	movs	r3, #0
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dbe:	f10a 0a01 	add.w	sl, sl, #1
 8004dc2:	9304      	str	r3, [sp, #16]
 8004dc4:	9307      	str	r3, [sp, #28]
 8004dc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dca:	931a      	str	r3, [sp, #104]	; 0x68
 8004dcc:	4654      	mov	r4, sl
 8004dce:	2205      	movs	r2, #5
 8004dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd4:	4851      	ldr	r0, [pc, #324]	; (8004f1c <_svfiprintf_r+0x1ec>)
 8004dd6:	f7fb fa0b 	bl	80001f0 <memchr>
 8004dda:	9a04      	ldr	r2, [sp, #16]
 8004ddc:	b9d8      	cbnz	r0, 8004e16 <_svfiprintf_r+0xe6>
 8004dde:	06d0      	lsls	r0, r2, #27
 8004de0:	bf44      	itt	mi
 8004de2:	2320      	movmi	r3, #32
 8004de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004de8:	0711      	lsls	r1, r2, #28
 8004dea:	bf44      	itt	mi
 8004dec:	232b      	movmi	r3, #43	; 0x2b
 8004dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004df2:	f89a 3000 	ldrb.w	r3, [sl]
 8004df6:	2b2a      	cmp	r3, #42	; 0x2a
 8004df8:	d015      	beq.n	8004e26 <_svfiprintf_r+0xf6>
 8004dfa:	9a07      	ldr	r2, [sp, #28]
 8004dfc:	4654      	mov	r4, sl
 8004dfe:	2000      	movs	r0, #0
 8004e00:	f04f 0c0a 	mov.w	ip, #10
 8004e04:	4621      	mov	r1, r4
 8004e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e0a:	3b30      	subs	r3, #48	; 0x30
 8004e0c:	2b09      	cmp	r3, #9
 8004e0e:	d94e      	bls.n	8004eae <_svfiprintf_r+0x17e>
 8004e10:	b1b0      	cbz	r0, 8004e40 <_svfiprintf_r+0x110>
 8004e12:	9207      	str	r2, [sp, #28]
 8004e14:	e014      	b.n	8004e40 <_svfiprintf_r+0x110>
 8004e16:	eba0 0308 	sub.w	r3, r0, r8
 8004e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	9304      	str	r3, [sp, #16]
 8004e22:	46a2      	mov	sl, r4
 8004e24:	e7d2      	b.n	8004dcc <_svfiprintf_r+0x9c>
 8004e26:	9b03      	ldr	r3, [sp, #12]
 8004e28:	1d19      	adds	r1, r3, #4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	9103      	str	r1, [sp, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bfbb      	ittet	lt
 8004e32:	425b      	neglt	r3, r3
 8004e34:	f042 0202 	orrlt.w	r2, r2, #2
 8004e38:	9307      	strge	r3, [sp, #28]
 8004e3a:	9307      	strlt	r3, [sp, #28]
 8004e3c:	bfb8      	it	lt
 8004e3e:	9204      	strlt	r2, [sp, #16]
 8004e40:	7823      	ldrb	r3, [r4, #0]
 8004e42:	2b2e      	cmp	r3, #46	; 0x2e
 8004e44:	d10c      	bne.n	8004e60 <_svfiprintf_r+0x130>
 8004e46:	7863      	ldrb	r3, [r4, #1]
 8004e48:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4a:	d135      	bne.n	8004eb8 <_svfiprintf_r+0x188>
 8004e4c:	9b03      	ldr	r3, [sp, #12]
 8004e4e:	1d1a      	adds	r2, r3, #4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	9203      	str	r2, [sp, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	bfb8      	it	lt
 8004e58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e5c:	3402      	adds	r4, #2
 8004e5e:	9305      	str	r3, [sp, #20]
 8004e60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f2c <_svfiprintf_r+0x1fc>
 8004e64:	7821      	ldrb	r1, [r4, #0]
 8004e66:	2203      	movs	r2, #3
 8004e68:	4650      	mov	r0, sl
 8004e6a:	f7fb f9c1 	bl	80001f0 <memchr>
 8004e6e:	b140      	cbz	r0, 8004e82 <_svfiprintf_r+0x152>
 8004e70:	2340      	movs	r3, #64	; 0x40
 8004e72:	eba0 000a 	sub.w	r0, r0, sl
 8004e76:	fa03 f000 	lsl.w	r0, r3, r0
 8004e7a:	9b04      	ldr	r3, [sp, #16]
 8004e7c:	4303      	orrs	r3, r0
 8004e7e:	3401      	adds	r4, #1
 8004e80:	9304      	str	r3, [sp, #16]
 8004e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e86:	4826      	ldr	r0, [pc, #152]	; (8004f20 <_svfiprintf_r+0x1f0>)
 8004e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e8c:	2206      	movs	r2, #6
 8004e8e:	f7fb f9af 	bl	80001f0 <memchr>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d038      	beq.n	8004f08 <_svfiprintf_r+0x1d8>
 8004e96:	4b23      	ldr	r3, [pc, #140]	; (8004f24 <_svfiprintf_r+0x1f4>)
 8004e98:	bb1b      	cbnz	r3, 8004ee2 <_svfiprintf_r+0x1b2>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea8:	4433      	add	r3, r6
 8004eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8004eac:	e767      	b.n	8004d7e <_svfiprintf_r+0x4e>
 8004eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	e7a5      	b.n	8004e04 <_svfiprintf_r+0xd4>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	3401      	adds	r4, #1
 8004ebc:	9305      	str	r3, [sp, #20]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f04f 0c0a 	mov.w	ip, #10
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eca:	3a30      	subs	r2, #48	; 0x30
 8004ecc:	2a09      	cmp	r2, #9
 8004ece:	d903      	bls.n	8004ed8 <_svfiprintf_r+0x1a8>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0c5      	beq.n	8004e60 <_svfiprintf_r+0x130>
 8004ed4:	9105      	str	r1, [sp, #20]
 8004ed6:	e7c3      	b.n	8004e60 <_svfiprintf_r+0x130>
 8004ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004edc:	4604      	mov	r4, r0
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e7f0      	b.n	8004ec4 <_svfiprintf_r+0x194>
 8004ee2:	ab03      	add	r3, sp, #12
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	462a      	mov	r2, r5
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <_svfiprintf_r+0x1f8>)
 8004eea:	a904      	add	r1, sp, #16
 8004eec:	4638      	mov	r0, r7
 8004eee:	f3af 8000 	nop.w
 8004ef2:	1c42      	adds	r2, r0, #1
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	d1d6      	bne.n	8004ea6 <_svfiprintf_r+0x176>
 8004ef8:	89ab      	ldrh	r3, [r5, #12]
 8004efa:	065b      	lsls	r3, r3, #25
 8004efc:	f53f af2c 	bmi.w	8004d58 <_svfiprintf_r+0x28>
 8004f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f02:	b01d      	add	sp, #116	; 0x74
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f08:	ab03      	add	r3, sp, #12
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	462a      	mov	r2, r5
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <_svfiprintf_r+0x1f8>)
 8004f10:	a904      	add	r1, sp, #16
 8004f12:	4638      	mov	r0, r7
 8004f14:	f000 f87a 	bl	800500c <_printf_i>
 8004f18:	e7eb      	b.n	8004ef2 <_svfiprintf_r+0x1c2>
 8004f1a:	bf00      	nop
 8004f1c:	08005594 	.word	0x08005594
 8004f20:	0800559e 	.word	0x0800559e
 8004f24:	00000000 	.word	0x00000000
 8004f28:	08004c79 	.word	0x08004c79
 8004f2c:	0800559a 	.word	0x0800559a

08004f30 <_printf_common>:
 8004f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	4616      	mov	r6, r2
 8004f36:	4699      	mov	r9, r3
 8004f38:	688a      	ldr	r2, [r1, #8]
 8004f3a:	690b      	ldr	r3, [r1, #16]
 8004f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f40:	4293      	cmp	r3, r2
 8004f42:	bfb8      	it	lt
 8004f44:	4613      	movlt	r3, r2
 8004f46:	6033      	str	r3, [r6, #0]
 8004f48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	b10a      	cbz	r2, 8004f56 <_printf_common+0x26>
 8004f52:	3301      	adds	r3, #1
 8004f54:	6033      	str	r3, [r6, #0]
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	0699      	lsls	r1, r3, #26
 8004f5a:	bf42      	ittt	mi
 8004f5c:	6833      	ldrmi	r3, [r6, #0]
 8004f5e:	3302      	addmi	r3, #2
 8004f60:	6033      	strmi	r3, [r6, #0]
 8004f62:	6825      	ldr	r5, [r4, #0]
 8004f64:	f015 0506 	ands.w	r5, r5, #6
 8004f68:	d106      	bne.n	8004f78 <_printf_common+0x48>
 8004f6a:	f104 0a19 	add.w	sl, r4, #25
 8004f6e:	68e3      	ldr	r3, [r4, #12]
 8004f70:	6832      	ldr	r2, [r6, #0]
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	42ab      	cmp	r3, r5
 8004f76:	dc26      	bgt.n	8004fc6 <_printf_common+0x96>
 8004f78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f7c:	1e13      	subs	r3, r2, #0
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	bf18      	it	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	0692      	lsls	r2, r2, #26
 8004f86:	d42b      	bmi.n	8004fe0 <_printf_common+0xb0>
 8004f88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	4638      	mov	r0, r7
 8004f90:	47c0      	blx	r8
 8004f92:	3001      	adds	r0, #1
 8004f94:	d01e      	beq.n	8004fd4 <_printf_common+0xa4>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	68e5      	ldr	r5, [r4, #12]
 8004f9a:	6832      	ldr	r2, [r6, #0]
 8004f9c:	f003 0306 	and.w	r3, r3, #6
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	bf08      	it	eq
 8004fa4:	1aad      	subeq	r5, r5, r2
 8004fa6:	68a3      	ldr	r3, [r4, #8]
 8004fa8:	6922      	ldr	r2, [r4, #16]
 8004faa:	bf0c      	ite	eq
 8004fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fb0:	2500      	movne	r5, #0
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	bfc4      	itt	gt
 8004fb6:	1a9b      	subgt	r3, r3, r2
 8004fb8:	18ed      	addgt	r5, r5, r3
 8004fba:	2600      	movs	r6, #0
 8004fbc:	341a      	adds	r4, #26
 8004fbe:	42b5      	cmp	r5, r6
 8004fc0:	d11a      	bne.n	8004ff8 <_printf_common+0xc8>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e008      	b.n	8004fd8 <_printf_common+0xa8>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4652      	mov	r2, sl
 8004fca:	4649      	mov	r1, r9
 8004fcc:	4638      	mov	r0, r7
 8004fce:	47c0      	blx	r8
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d103      	bne.n	8004fdc <_printf_common+0xac>
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fdc:	3501      	adds	r5, #1
 8004fde:	e7c6      	b.n	8004f6e <_printf_common+0x3e>
 8004fe0:	18e1      	adds	r1, r4, r3
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	2030      	movs	r0, #48	; 0x30
 8004fe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fea:	4422      	add	r2, r4
 8004fec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ff0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	e7c7      	b.n	8004f88 <_printf_common+0x58>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	4638      	mov	r0, r7
 8005000:	47c0      	blx	r8
 8005002:	3001      	adds	r0, #1
 8005004:	d0e6      	beq.n	8004fd4 <_printf_common+0xa4>
 8005006:	3601      	adds	r6, #1
 8005008:	e7d9      	b.n	8004fbe <_printf_common+0x8e>
	...

0800500c <_printf_i>:
 800500c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	7e0f      	ldrb	r7, [r1, #24]
 8005012:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005014:	2f78      	cmp	r7, #120	; 0x78
 8005016:	4691      	mov	r9, r2
 8005018:	4680      	mov	r8, r0
 800501a:	460c      	mov	r4, r1
 800501c:	469a      	mov	sl, r3
 800501e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005022:	d807      	bhi.n	8005034 <_printf_i+0x28>
 8005024:	2f62      	cmp	r7, #98	; 0x62
 8005026:	d80a      	bhi.n	800503e <_printf_i+0x32>
 8005028:	2f00      	cmp	r7, #0
 800502a:	f000 80d8 	beq.w	80051de <_printf_i+0x1d2>
 800502e:	2f58      	cmp	r7, #88	; 0x58
 8005030:	f000 80a3 	beq.w	800517a <_printf_i+0x16e>
 8005034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005038:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800503c:	e03a      	b.n	80050b4 <_printf_i+0xa8>
 800503e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005042:	2b15      	cmp	r3, #21
 8005044:	d8f6      	bhi.n	8005034 <_printf_i+0x28>
 8005046:	a101      	add	r1, pc, #4	; (adr r1, 800504c <_printf_i+0x40>)
 8005048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800504c:	080050a5 	.word	0x080050a5
 8005050:	080050b9 	.word	0x080050b9
 8005054:	08005035 	.word	0x08005035
 8005058:	08005035 	.word	0x08005035
 800505c:	08005035 	.word	0x08005035
 8005060:	08005035 	.word	0x08005035
 8005064:	080050b9 	.word	0x080050b9
 8005068:	08005035 	.word	0x08005035
 800506c:	08005035 	.word	0x08005035
 8005070:	08005035 	.word	0x08005035
 8005074:	08005035 	.word	0x08005035
 8005078:	080051c5 	.word	0x080051c5
 800507c:	080050e9 	.word	0x080050e9
 8005080:	080051a7 	.word	0x080051a7
 8005084:	08005035 	.word	0x08005035
 8005088:	08005035 	.word	0x08005035
 800508c:	080051e7 	.word	0x080051e7
 8005090:	08005035 	.word	0x08005035
 8005094:	080050e9 	.word	0x080050e9
 8005098:	08005035 	.word	0x08005035
 800509c:	08005035 	.word	0x08005035
 80050a0:	080051af 	.word	0x080051af
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	1d1a      	adds	r2, r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	602a      	str	r2, [r5, #0]
 80050ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0a3      	b.n	8005200 <_printf_i+0x1f4>
 80050b8:	6820      	ldr	r0, [r4, #0]
 80050ba:	6829      	ldr	r1, [r5, #0]
 80050bc:	0606      	lsls	r6, r0, #24
 80050be:	f101 0304 	add.w	r3, r1, #4
 80050c2:	d50a      	bpl.n	80050da <_printf_i+0xce>
 80050c4:	680e      	ldr	r6, [r1, #0]
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	da03      	bge.n	80050d4 <_printf_i+0xc8>
 80050cc:	232d      	movs	r3, #45	; 0x2d
 80050ce:	4276      	negs	r6, r6
 80050d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d4:	485e      	ldr	r0, [pc, #376]	; (8005250 <_printf_i+0x244>)
 80050d6:	230a      	movs	r3, #10
 80050d8:	e019      	b.n	800510e <_printf_i+0x102>
 80050da:	680e      	ldr	r6, [r1, #0]
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050e2:	bf18      	it	ne
 80050e4:	b236      	sxthne	r6, r6
 80050e6:	e7ef      	b.n	80050c8 <_printf_i+0xbc>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	1d19      	adds	r1, r3, #4
 80050ee:	6029      	str	r1, [r5, #0]
 80050f0:	0601      	lsls	r1, r0, #24
 80050f2:	d501      	bpl.n	80050f8 <_printf_i+0xec>
 80050f4:	681e      	ldr	r6, [r3, #0]
 80050f6:	e002      	b.n	80050fe <_printf_i+0xf2>
 80050f8:	0646      	lsls	r6, r0, #25
 80050fa:	d5fb      	bpl.n	80050f4 <_printf_i+0xe8>
 80050fc:	881e      	ldrh	r6, [r3, #0]
 80050fe:	4854      	ldr	r0, [pc, #336]	; (8005250 <_printf_i+0x244>)
 8005100:	2f6f      	cmp	r7, #111	; 0x6f
 8005102:	bf0c      	ite	eq
 8005104:	2308      	moveq	r3, #8
 8005106:	230a      	movne	r3, #10
 8005108:	2100      	movs	r1, #0
 800510a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800510e:	6865      	ldr	r5, [r4, #4]
 8005110:	60a5      	str	r5, [r4, #8]
 8005112:	2d00      	cmp	r5, #0
 8005114:	bfa2      	ittt	ge
 8005116:	6821      	ldrge	r1, [r4, #0]
 8005118:	f021 0104 	bicge.w	r1, r1, #4
 800511c:	6021      	strge	r1, [r4, #0]
 800511e:	b90e      	cbnz	r6, 8005124 <_printf_i+0x118>
 8005120:	2d00      	cmp	r5, #0
 8005122:	d04d      	beq.n	80051c0 <_printf_i+0x1b4>
 8005124:	4615      	mov	r5, r2
 8005126:	fbb6 f1f3 	udiv	r1, r6, r3
 800512a:	fb03 6711 	mls	r7, r3, r1, r6
 800512e:	5dc7      	ldrb	r7, [r0, r7]
 8005130:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005134:	4637      	mov	r7, r6
 8005136:	42bb      	cmp	r3, r7
 8005138:	460e      	mov	r6, r1
 800513a:	d9f4      	bls.n	8005126 <_printf_i+0x11a>
 800513c:	2b08      	cmp	r3, #8
 800513e:	d10b      	bne.n	8005158 <_printf_i+0x14c>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	07de      	lsls	r6, r3, #31
 8005144:	d508      	bpl.n	8005158 <_printf_i+0x14c>
 8005146:	6923      	ldr	r3, [r4, #16]
 8005148:	6861      	ldr	r1, [r4, #4]
 800514a:	4299      	cmp	r1, r3
 800514c:	bfde      	ittt	le
 800514e:	2330      	movle	r3, #48	; 0x30
 8005150:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005154:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005158:	1b52      	subs	r2, r2, r5
 800515a:	6122      	str	r2, [r4, #16]
 800515c:	f8cd a000 	str.w	sl, [sp]
 8005160:	464b      	mov	r3, r9
 8005162:	aa03      	add	r2, sp, #12
 8005164:	4621      	mov	r1, r4
 8005166:	4640      	mov	r0, r8
 8005168:	f7ff fee2 	bl	8004f30 <_printf_common>
 800516c:	3001      	adds	r0, #1
 800516e:	d14c      	bne.n	800520a <_printf_i+0x1fe>
 8005170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005174:	b004      	add	sp, #16
 8005176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800517a:	4835      	ldr	r0, [pc, #212]	; (8005250 <_printf_i+0x244>)
 800517c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005180:	6829      	ldr	r1, [r5, #0]
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	f851 6b04 	ldr.w	r6, [r1], #4
 8005188:	6029      	str	r1, [r5, #0]
 800518a:	061d      	lsls	r5, r3, #24
 800518c:	d514      	bpl.n	80051b8 <_printf_i+0x1ac>
 800518e:	07df      	lsls	r7, r3, #31
 8005190:	bf44      	itt	mi
 8005192:	f043 0320 	orrmi.w	r3, r3, #32
 8005196:	6023      	strmi	r3, [r4, #0]
 8005198:	b91e      	cbnz	r6, 80051a2 <_printf_i+0x196>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	f023 0320 	bic.w	r3, r3, #32
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	2310      	movs	r3, #16
 80051a4:	e7b0      	b.n	8005108 <_printf_i+0xfc>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	f043 0320 	orr.w	r3, r3, #32
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	2378      	movs	r3, #120	; 0x78
 80051b0:	4828      	ldr	r0, [pc, #160]	; (8005254 <_printf_i+0x248>)
 80051b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051b6:	e7e3      	b.n	8005180 <_printf_i+0x174>
 80051b8:	0659      	lsls	r1, r3, #25
 80051ba:	bf48      	it	mi
 80051bc:	b2b6      	uxthmi	r6, r6
 80051be:	e7e6      	b.n	800518e <_printf_i+0x182>
 80051c0:	4615      	mov	r5, r2
 80051c2:	e7bb      	b.n	800513c <_printf_i+0x130>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	6826      	ldr	r6, [r4, #0]
 80051c8:	6961      	ldr	r1, [r4, #20]
 80051ca:	1d18      	adds	r0, r3, #4
 80051cc:	6028      	str	r0, [r5, #0]
 80051ce:	0635      	lsls	r5, r6, #24
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	d501      	bpl.n	80051d8 <_printf_i+0x1cc>
 80051d4:	6019      	str	r1, [r3, #0]
 80051d6:	e002      	b.n	80051de <_printf_i+0x1d2>
 80051d8:	0670      	lsls	r0, r6, #25
 80051da:	d5fb      	bpl.n	80051d4 <_printf_i+0x1c8>
 80051dc:	8019      	strh	r1, [r3, #0]
 80051de:	2300      	movs	r3, #0
 80051e0:	6123      	str	r3, [r4, #16]
 80051e2:	4615      	mov	r5, r2
 80051e4:	e7ba      	b.n	800515c <_printf_i+0x150>
 80051e6:	682b      	ldr	r3, [r5, #0]
 80051e8:	1d1a      	adds	r2, r3, #4
 80051ea:	602a      	str	r2, [r5, #0]
 80051ec:	681d      	ldr	r5, [r3, #0]
 80051ee:	6862      	ldr	r2, [r4, #4]
 80051f0:	2100      	movs	r1, #0
 80051f2:	4628      	mov	r0, r5
 80051f4:	f7fa fffc 	bl	80001f0 <memchr>
 80051f8:	b108      	cbz	r0, 80051fe <_printf_i+0x1f2>
 80051fa:	1b40      	subs	r0, r0, r5
 80051fc:	6060      	str	r0, [r4, #4]
 80051fe:	6863      	ldr	r3, [r4, #4]
 8005200:	6123      	str	r3, [r4, #16]
 8005202:	2300      	movs	r3, #0
 8005204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005208:	e7a8      	b.n	800515c <_printf_i+0x150>
 800520a:	6923      	ldr	r3, [r4, #16]
 800520c:	462a      	mov	r2, r5
 800520e:	4649      	mov	r1, r9
 8005210:	4640      	mov	r0, r8
 8005212:	47d0      	blx	sl
 8005214:	3001      	adds	r0, #1
 8005216:	d0ab      	beq.n	8005170 <_printf_i+0x164>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	079b      	lsls	r3, r3, #30
 800521c:	d413      	bmi.n	8005246 <_printf_i+0x23a>
 800521e:	68e0      	ldr	r0, [r4, #12]
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	4298      	cmp	r0, r3
 8005224:	bfb8      	it	lt
 8005226:	4618      	movlt	r0, r3
 8005228:	e7a4      	b.n	8005174 <_printf_i+0x168>
 800522a:	2301      	movs	r3, #1
 800522c:	4632      	mov	r2, r6
 800522e:	4649      	mov	r1, r9
 8005230:	4640      	mov	r0, r8
 8005232:	47d0      	blx	sl
 8005234:	3001      	adds	r0, #1
 8005236:	d09b      	beq.n	8005170 <_printf_i+0x164>
 8005238:	3501      	adds	r5, #1
 800523a:	68e3      	ldr	r3, [r4, #12]
 800523c:	9903      	ldr	r1, [sp, #12]
 800523e:	1a5b      	subs	r3, r3, r1
 8005240:	42ab      	cmp	r3, r5
 8005242:	dcf2      	bgt.n	800522a <_printf_i+0x21e>
 8005244:	e7eb      	b.n	800521e <_printf_i+0x212>
 8005246:	2500      	movs	r5, #0
 8005248:	f104 0619 	add.w	r6, r4, #25
 800524c:	e7f5      	b.n	800523a <_printf_i+0x22e>
 800524e:	bf00      	nop
 8005250:	080055a5 	.word	0x080055a5
 8005254:	080055b6 	.word	0x080055b6

08005258 <memcpy>:
 8005258:	440a      	add	r2, r1
 800525a:	4291      	cmp	r1, r2
 800525c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005260:	d100      	bne.n	8005264 <memcpy+0xc>
 8005262:	4770      	bx	lr
 8005264:	b510      	push	{r4, lr}
 8005266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800526a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800526e:	4291      	cmp	r1, r2
 8005270:	d1f9      	bne.n	8005266 <memcpy+0xe>
 8005272:	bd10      	pop	{r4, pc}

08005274 <memmove>:
 8005274:	4288      	cmp	r0, r1
 8005276:	b510      	push	{r4, lr}
 8005278:	eb01 0402 	add.w	r4, r1, r2
 800527c:	d902      	bls.n	8005284 <memmove+0x10>
 800527e:	4284      	cmp	r4, r0
 8005280:	4623      	mov	r3, r4
 8005282:	d807      	bhi.n	8005294 <memmove+0x20>
 8005284:	1e43      	subs	r3, r0, #1
 8005286:	42a1      	cmp	r1, r4
 8005288:	d008      	beq.n	800529c <memmove+0x28>
 800528a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800528e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005292:	e7f8      	b.n	8005286 <memmove+0x12>
 8005294:	4402      	add	r2, r0
 8005296:	4601      	mov	r1, r0
 8005298:	428a      	cmp	r2, r1
 800529a:	d100      	bne.n	800529e <memmove+0x2a>
 800529c:	bd10      	pop	{r4, pc}
 800529e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052a6:	e7f7      	b.n	8005298 <memmove+0x24>

080052a8 <_free_r>:
 80052a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052aa:	2900      	cmp	r1, #0
 80052ac:	d044      	beq.n	8005338 <_free_r+0x90>
 80052ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b2:	9001      	str	r0, [sp, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f1a1 0404 	sub.w	r4, r1, #4
 80052ba:	bfb8      	it	lt
 80052bc:	18e4      	addlt	r4, r4, r3
 80052be:	f000 f913 	bl	80054e8 <__malloc_lock>
 80052c2:	4a1e      	ldr	r2, [pc, #120]	; (800533c <_free_r+0x94>)
 80052c4:	9801      	ldr	r0, [sp, #4]
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	b933      	cbnz	r3, 80052d8 <_free_r+0x30>
 80052ca:	6063      	str	r3, [r4, #4]
 80052cc:	6014      	str	r4, [r2, #0]
 80052ce:	b003      	add	sp, #12
 80052d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052d4:	f000 b90e 	b.w	80054f4 <__malloc_unlock>
 80052d8:	42a3      	cmp	r3, r4
 80052da:	d908      	bls.n	80052ee <_free_r+0x46>
 80052dc:	6825      	ldr	r5, [r4, #0]
 80052de:	1961      	adds	r1, r4, r5
 80052e0:	428b      	cmp	r3, r1
 80052e2:	bf01      	itttt	eq
 80052e4:	6819      	ldreq	r1, [r3, #0]
 80052e6:	685b      	ldreq	r3, [r3, #4]
 80052e8:	1949      	addeq	r1, r1, r5
 80052ea:	6021      	streq	r1, [r4, #0]
 80052ec:	e7ed      	b.n	80052ca <_free_r+0x22>
 80052ee:	461a      	mov	r2, r3
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	b10b      	cbz	r3, 80052f8 <_free_r+0x50>
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	d9fa      	bls.n	80052ee <_free_r+0x46>
 80052f8:	6811      	ldr	r1, [r2, #0]
 80052fa:	1855      	adds	r5, r2, r1
 80052fc:	42a5      	cmp	r5, r4
 80052fe:	d10b      	bne.n	8005318 <_free_r+0x70>
 8005300:	6824      	ldr	r4, [r4, #0]
 8005302:	4421      	add	r1, r4
 8005304:	1854      	adds	r4, r2, r1
 8005306:	42a3      	cmp	r3, r4
 8005308:	6011      	str	r1, [r2, #0]
 800530a:	d1e0      	bne.n	80052ce <_free_r+0x26>
 800530c:	681c      	ldr	r4, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	6053      	str	r3, [r2, #4]
 8005312:	4421      	add	r1, r4
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	e7da      	b.n	80052ce <_free_r+0x26>
 8005318:	d902      	bls.n	8005320 <_free_r+0x78>
 800531a:	230c      	movs	r3, #12
 800531c:	6003      	str	r3, [r0, #0]
 800531e:	e7d6      	b.n	80052ce <_free_r+0x26>
 8005320:	6825      	ldr	r5, [r4, #0]
 8005322:	1961      	adds	r1, r4, r5
 8005324:	428b      	cmp	r3, r1
 8005326:	bf04      	itt	eq
 8005328:	6819      	ldreq	r1, [r3, #0]
 800532a:	685b      	ldreq	r3, [r3, #4]
 800532c:	6063      	str	r3, [r4, #4]
 800532e:	bf04      	itt	eq
 8005330:	1949      	addeq	r1, r1, r5
 8005332:	6021      	streq	r1, [r4, #0]
 8005334:	6054      	str	r4, [r2, #4]
 8005336:	e7ca      	b.n	80052ce <_free_r+0x26>
 8005338:	b003      	add	sp, #12
 800533a:	bd30      	pop	{r4, r5, pc}
 800533c:	20000af4 	.word	0x20000af4

08005340 <sbrk_aligned>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4e0e      	ldr	r6, [pc, #56]	; (800537c <sbrk_aligned+0x3c>)
 8005344:	460c      	mov	r4, r1
 8005346:	6831      	ldr	r1, [r6, #0]
 8005348:	4605      	mov	r5, r0
 800534a:	b911      	cbnz	r1, 8005352 <sbrk_aligned+0x12>
 800534c:	f000 f8bc 	bl	80054c8 <_sbrk_r>
 8005350:	6030      	str	r0, [r6, #0]
 8005352:	4621      	mov	r1, r4
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f8b7 	bl	80054c8 <_sbrk_r>
 800535a:	1c43      	adds	r3, r0, #1
 800535c:	d00a      	beq.n	8005374 <sbrk_aligned+0x34>
 800535e:	1cc4      	adds	r4, r0, #3
 8005360:	f024 0403 	bic.w	r4, r4, #3
 8005364:	42a0      	cmp	r0, r4
 8005366:	d007      	beq.n	8005378 <sbrk_aligned+0x38>
 8005368:	1a21      	subs	r1, r4, r0
 800536a:	4628      	mov	r0, r5
 800536c:	f000 f8ac 	bl	80054c8 <_sbrk_r>
 8005370:	3001      	adds	r0, #1
 8005372:	d101      	bne.n	8005378 <sbrk_aligned+0x38>
 8005374:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005378:	4620      	mov	r0, r4
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	20000af8 	.word	0x20000af8

08005380 <_malloc_r>:
 8005380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005384:	1ccd      	adds	r5, r1, #3
 8005386:	f025 0503 	bic.w	r5, r5, #3
 800538a:	3508      	adds	r5, #8
 800538c:	2d0c      	cmp	r5, #12
 800538e:	bf38      	it	cc
 8005390:	250c      	movcc	r5, #12
 8005392:	2d00      	cmp	r5, #0
 8005394:	4607      	mov	r7, r0
 8005396:	db01      	blt.n	800539c <_malloc_r+0x1c>
 8005398:	42a9      	cmp	r1, r5
 800539a:	d905      	bls.n	80053a8 <_malloc_r+0x28>
 800539c:	230c      	movs	r3, #12
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	2600      	movs	r6, #0
 80053a2:	4630      	mov	r0, r6
 80053a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a8:	4e2e      	ldr	r6, [pc, #184]	; (8005464 <_malloc_r+0xe4>)
 80053aa:	f000 f89d 	bl	80054e8 <__malloc_lock>
 80053ae:	6833      	ldr	r3, [r6, #0]
 80053b0:	461c      	mov	r4, r3
 80053b2:	bb34      	cbnz	r4, 8005402 <_malloc_r+0x82>
 80053b4:	4629      	mov	r1, r5
 80053b6:	4638      	mov	r0, r7
 80053b8:	f7ff ffc2 	bl	8005340 <sbrk_aligned>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	4604      	mov	r4, r0
 80053c0:	d14d      	bne.n	800545e <_malloc_r+0xde>
 80053c2:	6834      	ldr	r4, [r6, #0]
 80053c4:	4626      	mov	r6, r4
 80053c6:	2e00      	cmp	r6, #0
 80053c8:	d140      	bne.n	800544c <_malloc_r+0xcc>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	4631      	mov	r1, r6
 80053ce:	4638      	mov	r0, r7
 80053d0:	eb04 0803 	add.w	r8, r4, r3
 80053d4:	f000 f878 	bl	80054c8 <_sbrk_r>
 80053d8:	4580      	cmp	r8, r0
 80053da:	d13a      	bne.n	8005452 <_malloc_r+0xd2>
 80053dc:	6821      	ldr	r1, [r4, #0]
 80053de:	3503      	adds	r5, #3
 80053e0:	1a6d      	subs	r5, r5, r1
 80053e2:	f025 0503 	bic.w	r5, r5, #3
 80053e6:	3508      	adds	r5, #8
 80053e8:	2d0c      	cmp	r5, #12
 80053ea:	bf38      	it	cc
 80053ec:	250c      	movcc	r5, #12
 80053ee:	4629      	mov	r1, r5
 80053f0:	4638      	mov	r0, r7
 80053f2:	f7ff ffa5 	bl	8005340 <sbrk_aligned>
 80053f6:	3001      	adds	r0, #1
 80053f8:	d02b      	beq.n	8005452 <_malloc_r+0xd2>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	442b      	add	r3, r5
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	e00e      	b.n	8005420 <_malloc_r+0xa0>
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	1b52      	subs	r2, r2, r5
 8005406:	d41e      	bmi.n	8005446 <_malloc_r+0xc6>
 8005408:	2a0b      	cmp	r2, #11
 800540a:	d916      	bls.n	800543a <_malloc_r+0xba>
 800540c:	1961      	adds	r1, r4, r5
 800540e:	42a3      	cmp	r3, r4
 8005410:	6025      	str	r5, [r4, #0]
 8005412:	bf18      	it	ne
 8005414:	6059      	strne	r1, [r3, #4]
 8005416:	6863      	ldr	r3, [r4, #4]
 8005418:	bf08      	it	eq
 800541a:	6031      	streq	r1, [r6, #0]
 800541c:	5162      	str	r2, [r4, r5]
 800541e:	604b      	str	r3, [r1, #4]
 8005420:	4638      	mov	r0, r7
 8005422:	f104 060b 	add.w	r6, r4, #11
 8005426:	f000 f865 	bl	80054f4 <__malloc_unlock>
 800542a:	f026 0607 	bic.w	r6, r6, #7
 800542e:	1d23      	adds	r3, r4, #4
 8005430:	1af2      	subs	r2, r6, r3
 8005432:	d0b6      	beq.n	80053a2 <_malloc_r+0x22>
 8005434:	1b9b      	subs	r3, r3, r6
 8005436:	50a3      	str	r3, [r4, r2]
 8005438:	e7b3      	b.n	80053a2 <_malloc_r+0x22>
 800543a:	6862      	ldr	r2, [r4, #4]
 800543c:	42a3      	cmp	r3, r4
 800543e:	bf0c      	ite	eq
 8005440:	6032      	streq	r2, [r6, #0]
 8005442:	605a      	strne	r2, [r3, #4]
 8005444:	e7ec      	b.n	8005420 <_malloc_r+0xa0>
 8005446:	4623      	mov	r3, r4
 8005448:	6864      	ldr	r4, [r4, #4]
 800544a:	e7b2      	b.n	80053b2 <_malloc_r+0x32>
 800544c:	4634      	mov	r4, r6
 800544e:	6876      	ldr	r6, [r6, #4]
 8005450:	e7b9      	b.n	80053c6 <_malloc_r+0x46>
 8005452:	230c      	movs	r3, #12
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	4638      	mov	r0, r7
 8005458:	f000 f84c 	bl	80054f4 <__malloc_unlock>
 800545c:	e7a1      	b.n	80053a2 <_malloc_r+0x22>
 800545e:	6025      	str	r5, [r4, #0]
 8005460:	e7de      	b.n	8005420 <_malloc_r+0xa0>
 8005462:	bf00      	nop
 8005464:	20000af4 	.word	0x20000af4

08005468 <_realloc_r>:
 8005468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546c:	4680      	mov	r8, r0
 800546e:	4614      	mov	r4, r2
 8005470:	460e      	mov	r6, r1
 8005472:	b921      	cbnz	r1, 800547e <_realloc_r+0x16>
 8005474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005478:	4611      	mov	r1, r2
 800547a:	f7ff bf81 	b.w	8005380 <_malloc_r>
 800547e:	b92a      	cbnz	r2, 800548c <_realloc_r+0x24>
 8005480:	f7ff ff12 	bl	80052a8 <_free_r>
 8005484:	4625      	mov	r5, r4
 8005486:	4628      	mov	r0, r5
 8005488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800548c:	f000 f838 	bl	8005500 <_malloc_usable_size_r>
 8005490:	4284      	cmp	r4, r0
 8005492:	4607      	mov	r7, r0
 8005494:	d802      	bhi.n	800549c <_realloc_r+0x34>
 8005496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800549a:	d812      	bhi.n	80054c2 <_realloc_r+0x5a>
 800549c:	4621      	mov	r1, r4
 800549e:	4640      	mov	r0, r8
 80054a0:	f7ff ff6e 	bl	8005380 <_malloc_r>
 80054a4:	4605      	mov	r5, r0
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d0ed      	beq.n	8005486 <_realloc_r+0x1e>
 80054aa:	42bc      	cmp	r4, r7
 80054ac:	4622      	mov	r2, r4
 80054ae:	4631      	mov	r1, r6
 80054b0:	bf28      	it	cs
 80054b2:	463a      	movcs	r2, r7
 80054b4:	f7ff fed0 	bl	8005258 <memcpy>
 80054b8:	4631      	mov	r1, r6
 80054ba:	4640      	mov	r0, r8
 80054bc:	f7ff fef4 	bl	80052a8 <_free_r>
 80054c0:	e7e1      	b.n	8005486 <_realloc_r+0x1e>
 80054c2:	4635      	mov	r5, r6
 80054c4:	e7df      	b.n	8005486 <_realloc_r+0x1e>
	...

080054c8 <_sbrk_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d06      	ldr	r5, [pc, #24]	; (80054e4 <_sbrk_r+0x1c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fb fbe4 	bl	8000ca0 <_sbrk>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_sbrk_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_sbrk_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	20000afc 	.word	0x20000afc

080054e8 <__malloc_lock>:
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <__malloc_lock+0x8>)
 80054ea:	f000 b811 	b.w	8005510 <__retarget_lock_acquire_recursive>
 80054ee:	bf00      	nop
 80054f0:	20000b00 	.word	0x20000b00

080054f4 <__malloc_unlock>:
 80054f4:	4801      	ldr	r0, [pc, #4]	; (80054fc <__malloc_unlock+0x8>)
 80054f6:	f000 b80c 	b.w	8005512 <__retarget_lock_release_recursive>
 80054fa:	bf00      	nop
 80054fc:	20000b00 	.word	0x20000b00

08005500 <_malloc_usable_size_r>:
 8005500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005504:	1f18      	subs	r0, r3, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	bfbc      	itt	lt
 800550a:	580b      	ldrlt	r3, [r1, r0]
 800550c:	18c0      	addlt	r0, r0, r3
 800550e:	4770      	bx	lr

08005510 <__retarget_lock_acquire_recursive>:
 8005510:	4770      	bx	lr

08005512 <__retarget_lock_release_recursive>:
 8005512:	4770      	bx	lr

08005514 <_init>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr

08005520 <_fini>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr
