
Pen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800484c  0800484c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004854  08004854  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004854  08004854  00014854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800485c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000070  080048cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  080048cc  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001016e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002398  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000325a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00033330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029812  00000000  00000000  00033fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6cc  00000000  00000000  0005d7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9699  00000000  00000000  0006ceae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166547  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e10  00000000  00000000  00166598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004778 	.word	0x08004778

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08004778 	.word	0x08004778

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t MSG[7] = {'h', 'e', 'l', 'l', 'o', '\r', '\n'};
 80004f6:	4a16      	ldr	r2, [pc, #88]	; (8000550 <main+0x60>)
 80004f8:	463b      	mov	r3, r7
 80004fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004fe:	6018      	str	r0, [r3, #0]
 8000500:	3304      	adds	r3, #4
 8000502:	8019      	strh	r1, [r3, #0]
 8000504:	3302      	adds	r3, #2
 8000506:	0c0a      	lsrs	r2, r1, #16
 8000508:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fbd0 	bl	8000cae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f827 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8e7 	bl	80006e4 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000516:	f000 f8b7 	bl	8000688 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f885 	bl	8000628 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOB, LD2_Blue_Pin);
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x64>)
 8000522:	f000 feed 	bl	8001300 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f000 fc36 	bl	8000d98 <HAL_Delay>
	  printf("HELLO\r\n");
 800052c:	480a      	ldr	r0, [pc, #40]	; (8000558 <main+0x68>)
 800052e:	f003 fc93 	bl	8003e58 <puts>
	  //sprintf(MSG, "Hello! X = %d\r\n", X);
	  HAL_Delay(1000);
 8000532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000536:	f000 fc2f 	bl	8000d98 <HAL_Delay>
	   HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 800053a:	4639      	mov	r1, r7
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	2207      	movs	r2, #7
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x6c>)
 8000542:	f002 fc39 	bl	8002db8 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f000 fc25 	bl	8000d98 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOB, LD2_Blue_Pin);
 800054e:	e7e6      	b.n	800051e <main+0x2e>
 8000550:	08004798 	.word	0x08004798
 8000554:	48000400 	.word	0x48000400
 8000558:	08004790 	.word	0x08004790
 800055c:	2000008c 	.word	0x2000008c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b096      	sub	sp, #88	; 0x58
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2244      	movs	r2, #68	; 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fbfc 	bl	8003d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000582:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000586:	f001 f83b 	bl	8001600 <HAL_PWREx_ControlVoltageScaling>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000590:	f000 f962 	bl	8000858 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000594:	f001 f816 	bl	80015c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xc4>)
 800059a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800059e:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xc4>)
 80005a0:	f023 0318 	bic.w	r3, r3, #24
 80005a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a8:	2314      	movs	r3, #20
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b8:	2360      	movs	r3, #96	; 0x60
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005c8:	2310      	movs	r3, #16
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f885 	bl	80016ec <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005e8:	f000 f936 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2303      	movs	r3, #3
 80005f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	2101      	movs	r1, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fc8a 	bl	8001f20 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000612:	f000 f921 	bl	8000858 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000616:	f002 f9a3 	bl	8002960 <HAL_RCCEx_EnableMSIPLLMode>
}
 800061a:	bf00      	nop
 800061c:	3758      	adds	r7, #88	; 0x58
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_USART2_UART_Init+0x5c>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800063c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000640:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000650:	220c      	movs	r2, #12
 8000652:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800066e:	f002 fb55 	bl	8002d1c <HAL_UART_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000678:	f000 f8ee 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000008c 	.word	0x2000008c
 8000684:	40004400 	.word	0x40004400

08000688 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800068e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000692:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000696:	2206      	movs	r2, #6
 8000698:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800069c:	2202      	movs	r2, #2
 800069e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006cc:	f000 fe32 	bl	8001334 <HAL_PCD_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006d6:	f000 f8bf 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000110 	.word	0x20000110

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <MX_GPIO_Init+0x140>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a49      	ldr	r2, [pc, #292]	; (8000824 <MX_GPIO_Init+0x140>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b47      	ldr	r3, [pc, #284]	; (8000824 <MX_GPIO_Init+0x140>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b44      	ldr	r3, [pc, #272]	; (8000824 <MX_GPIO_Init+0x140>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a43      	ldr	r2, [pc, #268]	; (8000824 <MX_GPIO_Init+0x140>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b41      	ldr	r3, [pc, #260]	; (8000824 <MX_GPIO_Init+0x140>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <MX_GPIO_Init+0x140>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a3d      	ldr	r2, [pc, #244]	; (8000824 <MX_GPIO_Init+0x140>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <MX_GPIO_Init+0x140>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <MX_GPIO_Init+0x140>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a37      	ldr	r2, [pc, #220]	; (8000824 <MX_GPIO_Init+0x140>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b35      	ldr	r3, [pc, #212]	; (8000824 <MX_GPIO_Init+0x140>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075a:	4b32      	ldr	r3, [pc, #200]	; (8000824 <MX_GPIO_Init+0x140>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a31      	ldr	r2, [pc, #196]	; (8000824 <MX_GPIO_Init+0x140>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <MX_GPIO_Init+0x140>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000772:	f000 ffab 	bl	80016cc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800077c:	482a      	ldr	r0, [pc, #168]	; (8000828 <MX_GPIO_Init+0x144>)
 800077e:	f000 fda7 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	4829      	ldr	r0, [pc, #164]	; (800082c <MX_GPIO_Init+0x148>)
 8000788:	f000 fda2 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000792:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4823      	ldr	r0, [pc, #140]	; (8000830 <MX_GPIO_Init+0x14c>)
 80007a4:	f000 fc02 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Blue_Pin;
 80007a8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4819      	ldr	r0, [pc, #100]	; (8000828 <MX_GPIO_Init+0x144>)
 80007c2:	f000 fbf3 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007c6:	2320      	movs	r3, #32
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4814      	ldr	r0, [pc, #80]	; (800082c <MX_GPIO_Init+0x148>)
 80007da:	f000 fbe7 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_GPIO_Init+0x148>)
 80007f6:	f000 fbd9 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800080c:	2308      	movs	r3, #8
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_GPIO_Init+0x148>)
 8000818:	f000 fbc8 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	48000400 	.word	0x48000400
 800082c:	48001800 	.word	0x48001800
 8000830:	48000800 	.word	0x48000800

08000834 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800083c:	1d39      	adds	r1, r7, #4
 800083e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000842:	2201      	movs	r2, #1
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <__io_putchar+0x20>)
 8000846:	f002 fab7 	bl	8002db8 <HAL_UART_Transmit>

  return ch;
 800084a:	687b      	ldr	r3, [r7, #4]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000008c 	.word	0x2000008c

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_MspInit+0x44>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6613      	str	r3, [r2, #96]	; 0x60
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x44>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6593      	str	r3, [r2, #88]	; 0x58
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0ac      	sub	sp, #176	; 0xb0
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	228c      	movs	r2, #140	; 0x8c
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 fa4d 	bl	8003d6c <memset>
  if(huart->Instance==USART2)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <HAL_UART_MspInit+0xb0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d13b      	bne.n	8000954 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008dc:	2302      	movs	r3, #2
 80008de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fd3d 	bl	8002368 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f4:	f7ff ffb0 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_UART_MspInit+0xb4>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fc:	4a18      	ldr	r2, [pc, #96]	; (8000960 <HAL_UART_MspInit+0xb4>)
 80008fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000902:	6593      	str	r3, [r2, #88]	; 0x58
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <HAL_UART_MspInit+0xb4>)
 8000906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_UART_MspInit+0xb4>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <HAL_UART_MspInit+0xb4>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_UART_MspInit+0xb4>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000928:	230c      	movs	r3, #12
 800092a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000940:	2307      	movs	r3, #7
 8000942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f000 fb2c 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	37b0      	adds	r7, #176	; 0xb0
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40004400 	.word	0x40004400
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0ae      	sub	sp, #184	; 0xb8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	228c      	movs	r2, #140	; 0x8c
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f003 f9f1 	bl	8003d6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000992:	d17c      	bne.n	8000a8e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000998:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800099a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800099e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80009aa:	2318      	movs	r3, #24
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80009ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fccf 	bl	8002368 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80009d0:	f7ff ff42 	bl	8000858 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d8:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009ec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a06:	230a      	movs	r3, #10
 8000a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f000 fac9 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a32:	4619      	mov	r1, r3
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f000 fab8 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 8000a42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d114      	bne.n	8000a8a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 8000a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000a78:	f000 fe18 	bl	80016ac <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <HAL_PCD_MspInit+0x134>)
 8000a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a86:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a88:	e001      	b.n	8000a8e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8000a8a:	f000 fe0f 	bl	80016ac <HAL_PWREx_EnableVddUSB>
}
 8000a8e:	bf00      	nop
 8000a90:	37b8      	adds	r7, #184	; 0xb8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f936 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e00a      	b.n	8000b18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b02:	f3af 8000 	nop.w
 8000b06:	4601      	mov	r1, r0
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf0      	blt.n	8000b02 <_read+0x12>
  }

  return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e009      	b.n	8000b50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fe75 	bl	8000834 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf1      	blt.n	8000b3c <_write+0x12>
  }
  return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_close>:

int _close(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_isatty>:

int _isatty(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f003 f88c 	bl	8003d18 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20050000 	.word	0x20050000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	2000061c 	.word	0x2000061c
 8000c34:	20000638 	.word	0x20000638

08000c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff ffea 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f003 f84b 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8e:	f7ff fc2f 	bl	80004f0 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ca0:	0800485c 	.word	0x0800485c
  ldr r2, =_sbss
 8000ca4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ca8:	20000634 	.word	0x20000634

08000cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>

08000cae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f943 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f80e 	bl	8000ce0 <HAL_InitTick>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d002      	beq.n	8000cd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	e001      	b.n	8000cd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd0:	f7ff fdc8 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_InitTick+0x6c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d023      	beq.n	8000d3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_InitTick+0x70>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f941 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10f      	bne.n	8000d36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d809      	bhi.n	8000d30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d24:	f000 f919 	bl	8000f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_InitTick+0x74>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e007      	b.n	8000d40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e004      	b.n	8000d40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
 8000d3a:	e001      	b.n	8000d40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000620 	.word	0x20000620

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000620 	.word	0x20000620

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff47 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff5c 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb0 	bl	8000f00 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e166      	b.n	800128a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8158 	beq.w	8001284 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d005      	beq.n	8000fec <HAL_GPIO_Init+0x40>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d017      	beq.n	800108a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d123      	bne.n	80010de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0203 	and.w	r2, r3, #3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80b2 	beq.w	8001284 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	4b61      	ldr	r3, [pc, #388]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001124:	4a60      	ldr	r2, [pc, #384]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6613      	str	r3, [r2, #96]	; 0x60
 800112c:	4b5e      	ldr	r3, [pc, #376]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001138:	4a5c      	ldr	r2, [pc, #368]	; (80012ac <HAL_GPIO_Init+0x300>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001162:	d02b      	beq.n	80011bc <HAL_GPIO_Init+0x210>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d025      	beq.n	80011b8 <HAL_GPIO_Init+0x20c>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a51      	ldr	r2, [pc, #324]	; (80012b4 <HAL_GPIO_Init+0x308>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d01f      	beq.n	80011b4 <HAL_GPIO_Init+0x208>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a50      	ldr	r2, [pc, #320]	; (80012b8 <HAL_GPIO_Init+0x30c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d019      	beq.n	80011b0 <HAL_GPIO_Init+0x204>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a4f      	ldr	r2, [pc, #316]	; (80012bc <HAL_GPIO_Init+0x310>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d013      	beq.n	80011ac <HAL_GPIO_Init+0x200>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_GPIO_Init+0x314>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00d      	beq.n	80011a8 <HAL_GPIO_Init+0x1fc>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x318>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d007      	beq.n	80011a4 <HAL_GPIO_Init+0x1f8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x31c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d101      	bne.n	80011a0 <HAL_GPIO_Init+0x1f4>
 800119c:	2307      	movs	r3, #7
 800119e:	e00e      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011a0:	2308      	movs	r3, #8
 80011a2:	e00c      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011a4:	2306      	movs	r3, #6
 80011a6:	e00a      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011a8:	2305      	movs	r3, #5
 80011aa:	e008      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011ac:	2304      	movs	r3, #4
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011b0:	2303      	movs	r3, #3
 80011b2:	e004      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e002      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011bc:	2300      	movs	r3, #0
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	f002 0203 	and.w	r2, r2, #3
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4093      	lsls	r3, r2
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ce:	4937      	ldr	r1, [pc, #220]	; (80012ac <HAL_GPIO_Init+0x300>)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011dc:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <HAL_GPIO_Init+0x320>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001200:	4a32      	ldr	r2, [pc, #200]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800122a:	4a28      	ldr	r2, [pc, #160]	; (80012cc <HAL_GPIO_Init+0x320>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001254:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_GPIO_Init+0x320>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	fa22 f303 	lsr.w	r3, r2, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	f47f ae91 	bne.w	8000fbc <HAL_GPIO_Init+0x10>
  }
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	371c      	adds	r7, #28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000
 80012b0:	48000400 	.word	0x48000400
 80012b4:	48000800 	.word	0x48000800
 80012b8:	48000c00 	.word	0x48000c00
 80012bc:	48001000 	.word	0x48001000
 80012c0:	48001400 	.word	0x48001400
 80012c4:	48001800 	.word	0x48001800
 80012c8:	48001c00 	.word	0x48001c00
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43d9      	mvns	r1, r3
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	400b      	ands	r3, r1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b08f      	sub	sp, #60	; 0x3c
 8001338:	af0a      	add	r7, sp, #40	; 0x28
 800133a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e116      	b.n	8001574 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d106      	bne.n	8001366 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff faff 	bl	8000964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f002 fa3e 	bl	8003806 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	687e      	ldr	r6, [r7, #4]
 8001392:	466d      	mov	r5, sp
 8001394:	f106 0410 	add.w	r4, r6, #16
 8001398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80013a8:	1d33      	adds	r3, r6, #4
 80013aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f002 f9fe 	bl	80037ae <USB_CoreInit>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0d7      	b.n	8001574 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fa2c 	bl	8003828 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e04a      	b.n	800146c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	333d      	adds	r3, #61	; 0x3d
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	333c      	adds	r3, #60	; 0x3c
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	b298      	uxth	r0, r3
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	3344      	adds	r3, #68	; 0x44
 8001412:	4602      	mov	r2, r0
 8001414:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3340      	adds	r3, #64	; 0x40
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3348      	adds	r3, #72	; 0x48
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	334c      	adds	r3, #76	; 0x4c
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3354      	adds	r3, #84	; 0x54
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3301      	adds	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3af      	bcc.n	80013d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e044      	b.n	8001506 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3b5      	bcc.n	800147c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	687e      	ldr	r6, [r7, #4]
 8001518:	466d      	mov	r5, sp
 800151a:	f106 0410 	add.w	r4, r6, #16
 800151e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800152a:	e885 0003 	stmia.w	r5, {r0, r1}
 800152e:	1d33      	adds	r3, r6, #4
 8001530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f002 f9c4 	bl	80038c0 <USB_DevInit>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2202      	movs	r2, #2
 8001542:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e014      	b.n	8001574 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	2b01      	cmp	r3, #1
 8001560:	d102      	bne.n	8001568 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f80a 	bl	800157c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fb70 	bl	8003c52 <USB_DevDisconnect>

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800157c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ae:	f043 0303 	orr.w	r3, r3, #3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40007000 	.word	0x40007000

080015e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_PWREx_GetVoltageRange+0x18>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40007000 	.word	0x40007000

08001600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800160e:	d130      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800161c:	d038      	beq.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2232      	movs	r2, #50	; 0x32
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0c9b      	lsrs	r3, r3, #18
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001644:	e002      	b.n	800164c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3b01      	subs	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001658:	d102      	bne.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x60>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f2      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166c:	d110      	bne.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e00f      	b.n	8001692 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167e:	d007      	beq.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001688:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40007000 	.word	0x40007000
 80016a4:	20000000 	.word	0x20000000
 80016a8:	431bde83 	.word	0x431bde83

080016ac <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6053      	str	r3, [r2, #4]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40007000 	.word	0x40007000

080016cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016da:	6053      	str	r3, [r2, #4]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f000 bc08 	b.w	8001f10 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001700:	4b96      	ldr	r3, [pc, #600]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800170a:	4b94      	ldr	r3, [pc, #592]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80e4 	beq.w	80018ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_RCC_OscConfig+0x4c>
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	f040 808b 	bne.w	8001846 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b01      	cmp	r3, #1
 8001734:	f040 8087 	bne.w	8001846 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001738:	4b88      	ldr	r3, [pc, #544]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_OscConfig+0x64>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e3df      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1a      	ldr	r2, [r3, #32]
 8001754:	4b81      	ldr	r3, [pc, #516]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_RCC_OscConfig+0x7e>
 8001760:	4b7e      	ldr	r3, [pc, #504]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001768:	e005      	b.n	8001776 <HAL_RCC_OscConfig+0x8a>
 800176a:	4b7c      	ldr	r3, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800176c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001776:	4293      	cmp	r3, r2
 8001778:	d223      	bcs.n	80017c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fd92 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e3c0      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a72      	ldr	r2, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b70      	ldr	r3, [pc, #448]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	496d      	ldr	r1, [pc, #436]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ac:	4b6b      	ldr	r3, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	4968      	ldr	r1, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e025      	b.n	800180e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c2:	4b66      	ldr	r3, [pc, #408]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a65      	ldr	r2, [pc, #404]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4960      	ldr	r1, [pc, #384]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e0:	4b5e      	ldr	r3, [pc, #376]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	495b      	ldr	r1, [pc, #364]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fd52 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e380      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800180e:	f000 fc87 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8001812:	4602      	mov	r2, r0
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	4950      	ldr	r1, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 800182c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800182e:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa54 	bl	8000ce0 <HAL_InitTick>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d052      	beq.n	80018e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	e364      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d032      	beq.n	80018b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800184e:	4b43      	ldr	r3, [pc, #268]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a42      	ldr	r2, [pc, #264]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800185a:	f7ff fa91 	bl	8000d80 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001862:	f7ff fa8d 	bl	8000d80 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e34d      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001874:	4b39      	ldr	r3, [pc, #228]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a35      	ldr	r2, [pc, #212]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b33      	ldr	r3, [pc, #204]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4930      	ldr	r1, [pc, #192]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189e:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	492b      	ldr	r1, [pc, #172]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
 80018b2:	e01a      	b.n	80018ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a28      	ldr	r2, [pc, #160]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fa5e 	bl	8000d80 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c8:	f7ff fa5a 	bl	8000d80 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e31a      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x1dc>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d073      	beq.n	80019de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_OscConfig+0x21c>
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d10e      	bne.n	8001920 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d10b      	bne.n	8001920 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d063      	beq.n	80019dc <HAL_RCC_OscConfig+0x2f0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d15f      	bne.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e2f7      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d106      	bne.n	8001938 <HAL_RCC_OscConfig+0x24c>
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e025      	b.n	8001984 <HAL_RCC_OscConfig+0x298>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001940:	d114      	bne.n	800196c <HAL_RCC_OscConfig+0x280>
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a02      	ldr	r2, [pc, #8]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e013      	b.n	8001984 <HAL_RCC_OscConfig+0x298>
 800195c:	40021000 	.word	0x40021000
 8001960:	080047a0 	.word	0x080047a0
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004
 800196c:	4ba0      	ldr	r3, [pc, #640]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a9f      	ldr	r2, [pc, #636]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b9d      	ldr	r3, [pc, #628]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a9c      	ldr	r2, [pc, #624]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f9f8 	bl	8000d80 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff f9f4 	bl	8000d80 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e2b4      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x2a8>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff f9e4 	bl	8000d80 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff f9e0 	bl	8000d80 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e2a0      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x2d0>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d060      	beq.n	8001aac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_OscConfig+0x310>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d116      	bne.n	8001a2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_OscConfig+0x328>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e27d      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	4973      	ldr	r1, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a28:	e040      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d023      	beq.n	8001a7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a32:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f99f 	bl	8000d80 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff f99b 	bl	8000d80 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e25b      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	495f      	ldr	r1, [pc, #380]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e018      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f97b 	bl	8000d80 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f977 	bl	8000d80 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e237      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d03c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01c      	beq.n	8001afa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f956 	bl	8000d80 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f952 	bl	8000d80 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e212      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ef      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x3ec>
 8001af8:	e01b      	b.n	8001b32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b00:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f939 	bl	8000d80 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff f935 	bl	8000d80 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1f5      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ef      	bne.n	8001b12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80a6 	beq.w	8001c8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10d      	bne.n	8001b6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d118      	bne.n	8001baa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b84:	f7ff f8fc 	bl	8000d80 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f8f8 	bl	8000d80 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1b8      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4d8>
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc2:	e029      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d115      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x50c>
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	4b9d      	ldr	r3, [pc, #628]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	4a9c      	ldr	r2, [pc, #624]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c08:	4b99      	ldr	r3, [pc, #612]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	4a98      	ldr	r2, [pc, #608]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001c10:	f023 0304 	bic.w	r3, r3, #4
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d016      	beq.n	8001c4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f8ae 	bl	8000d80 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f8aa 	bl	8000d80 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e168      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3e:	4b8c      	ldr	r3, [pc, #560]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ed      	beq.n	8001c28 <HAL_RCC_OscConfig+0x53c>
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f897 	bl	8000d80 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f893 	bl	8000d80 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e151      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c6c:	4b80      	ldr	r3, [pc, #512]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ed      	bne.n	8001c56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7a:	7ffb      	ldrb	r3, [r7, #31]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d03c      	beq.n	8001d12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01c      	beq.n	8001cda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ca0:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca6:	4a72      	ldr	r2, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7ff f866 	bl	8000d80 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb8:	f7ff f862 	bl	8000d80 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e122      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cca:	4b69      	ldr	r3, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ef      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x5cc>
 8001cd8:	e01b      	b.n	8001d12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cda:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce0:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7ff f849 	bl	8000d80 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cf2:	f7ff f845 	bl	8000d80 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e105      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d04:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ef      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80f9 	beq.w	8001f0e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	f040 80cf 	bne.w	8001ec4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d26:	4b52      	ldr	r3, [pc, #328]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 0203 	and.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d12c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	3b01      	subs	r3, #1
 8001d46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d123      	bne.n	8001d94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d11b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d113      	bne.n	8001d94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d109      	bne.n	8001d94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d071      	beq.n	8001e78 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d068      	beq.n	8001e6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d9a:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001da6:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0ac      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001db6:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2d      	ldr	r2, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc2:	f7fe ffdd 	bl	8000d80 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7fe ffd9 	bl	8000d80 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e099      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_RCC_OscConfig+0x788>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e02:	0212      	lsls	r2, r2, #8
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e0a:	0852      	lsrs	r2, r2, #1
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	0552      	lsls	r2, r2, #21
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e16:	0852      	lsrs	r2, r2, #1
 8001e18:	3a01      	subs	r2, #1
 8001e1a:	0652      	lsls	r2, r2, #25
 8001e1c:	4311      	orrs	r1, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e22:	06d2      	lsls	r2, r2, #27
 8001e24:	430a      	orrs	r2, r1
 8001e26:	4912      	ldr	r1, [pc, #72]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e44:	f7fe ff9c 	bl	8000d80 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe ff98 	bl	8000d80 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e058      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e6a:	e050      	b.n	8001f0e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e04f      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
 8001e70:	40021000 	.word	0x40021000
 8001e74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d144      	bne.n	8001f0e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e9c:	f7fe ff70 	bl	8000d80 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe ff6c 	bl	8000d80 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e02c      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x7b8>
 8001ec2:	e024      	b.n	8001f0e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b0c      	cmp	r3, #12
 8001ec8:	d01f      	beq.n	8001f0a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7fe ff53 	bl	8000d80 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7fe ff4f 	bl	8000d80 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e00f      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4905      	ldr	r1, [pc, #20]	; (8001f18 <HAL_RCC_OscConfig+0x82c>)
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_OscConfig+0x830>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
 8001f08:	e001      	b.n	8001f0e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	feeefffc 	.word	0xfeeefffc

08001f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0e7      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b75      	ldr	r3, [pc, #468]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b72      	ldr	r3, [pc, #456]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4970      	ldr	r1, [pc, #448]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b6e      	ldr	r3, [pc, #440]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0cf      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d010      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4b66      	ldr	r3, [pc, #408]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d908      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4960      	ldr	r1, [pc, #384]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d04c      	beq.n	8002038 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	4b5a      	ldr	r3, [pc, #360]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d121      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0a6      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbe:	4b54      	ldr	r3, [pc, #336]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d115      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e09a      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fd6:	4b4e      	ldr	r3, [pc, #312]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e08e      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe6:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e086      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4943      	ldr	r1, [pc, #268]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002008:	f7fe feba 	bl	8000d80 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe feb6 	bl	8000d80 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e06e      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d010      	beq.n	8002066 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002050:	429a      	cmp	r2, r3
 8002052:	d208      	bcs.n	8002066 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	492b      	ldr	r1, [pc, #172]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d210      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 0207 	bic.w	r2, r3, #7
 800207c:	4923      	ldr	r1, [pc, #140]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e036      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4918      	ldr	r1, [pc, #96]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d009      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4910      	ldr	r1, [pc, #64]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020d4:	f000 f824 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	490b      	ldr	r1, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x1f4>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
 80020f0:	4a09      	ldr	r2, [pc, #36]	; (8002118 <HAL_RCC_ClockConfig+0x1f8>)
 80020f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fdf1 	bl	8000ce0 <HAL_InitTick>
 80020fe:	4603      	mov	r3, r0
 8002100:	72fb      	strb	r3, [r7, #11]

  return status;
 8002102:	7afb      	ldrb	r3, [r7, #11]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40022000 	.word	0x40022000
 8002110:	40021000 	.word	0x40021000
 8002114:	080047a0 	.word	0x080047a0
 8002118:	20000000 	.word	0x20000000
 800211c:	20000004 	.word	0x20000004

08002120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212e:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x34>
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d121      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d11e      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002154:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e005      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800217c:	4a2b      	ldr	r2, [pc, #172]	; (800222c <HAL_RCC_GetSysClockFreq+0x10c>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d102      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_RCC_GetSysClockFreq+0x110>)
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	e004      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_RCC_GetSysClockFreq+0x114>)
 80021a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d134      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0xac>
 80021c4:	e005      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_RCC_GetSysClockFreq+0x110>)
 80021c8:	617b      	str	r3, [r7, #20]
      break;
 80021ca:	e005      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ce:	617b      	str	r3, [r7, #20]
      break;
 80021d0:	e002      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	617b      	str	r3, [r7, #20]
      break;
 80021d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	3301      	adds	r3, #1
 80021e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	fb03 f202 	mul.w	r2, r3, r2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	0e5b      	lsrs	r3, r3, #25
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	3301      	adds	r3, #1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002218:	69bb      	ldr	r3, [r7, #24]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	080047b8 	.word	0x080047b8
 8002230:	00f42400 	.word	0x00f42400
 8002234:	007a1200 	.word	0x007a1200

08002238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_RCC_GetHCLKFreq+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000000 	.word	0x20000000

08002250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002254:	f7ff fff0 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	080047b0 	.word	0x080047b0

0800227c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002280:	f7ff ffda 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	0adb      	lsrs	r3, r3, #11
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	080047b0 	.word	0x080047b0

080022a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022c0:	f7ff f990 	bl	80015e4 <HAL_PWREx_GetVoltageRange>
 80022c4:	6178      	str	r0, [r7, #20]
 80022c6:	e014      	b.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a24      	ldr	r2, [pc, #144]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022e0:	f7ff f980 	bl	80015e4 <HAL_PWREx_GetVoltageRange>
 80022e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f8:	d10b      	bne.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d919      	bls.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2ba0      	cmp	r3, #160	; 0xa0
 8002304:	d902      	bls.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002306:	2302      	movs	r3, #2
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e013      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800230c:	2301      	movs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e010      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b80      	cmp	r3, #128	; 0x80
 8002316:	d902      	bls.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002318:	2303      	movs	r3, #3
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e00a      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d102      	bne.n	800232a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002324:	2302      	movs	r3, #2
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	e004      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b70      	cmp	r3, #112	; 0x70
 800232e:	d101      	bne.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002330:	2301      	movs	r3, #1
 8002332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 0207 	bic.w	r2, r3, #7
 800233c:	4909      	ldr	r1, [pc, #36]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	40022000 	.word	0x40022000

08002368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002370:	2300      	movs	r3, #0
 8002372:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002374:	2300      	movs	r3, #0
 8002376:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002380:	2b00      	cmp	r3, #0
 8002382:	d041      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002388:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800238c:	d02a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800238e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002392:	d824      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800239a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800239e:	d81e      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a8:	d010      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023aa:	e018      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023ac:	4b86      	ldr	r3, [pc, #536]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a85      	ldr	r2, [pc, #532]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b8:	e015      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fadd 	bl	8002980 <RCCEx_PLLSAI1_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ca:	e00c      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3320      	adds	r3, #32
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fbc6 	bl	8002b64 <RCCEx_PLLSAI2_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023dc:	e003      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	74fb      	strb	r3, [r7, #19]
      break;
 80023e2:	e000      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ec:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023fa:	4973      	ldr	r1, [pc, #460]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002402:	e001      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d041      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002418:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800241c:	d02a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800241e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002422:	d824      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800242a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800242e:	d81e      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d010      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800243a:	e018      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800243c:	4b62      	ldr	r3, [pc, #392]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a61      	ldr	r2, [pc, #388]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002448:	e015      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa95 	bl	8002980 <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800245a:	e00c      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3320      	adds	r3, #32
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fb7e 	bl	8002b64 <RCCEx_PLLSAI2_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800246c:	e003      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	74fb      	strb	r3, [r7, #19]
      break;
 8002472:	e000      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800247c:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248a:	494f      	ldr	r1, [pc, #316]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002492:	e001      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a0 	beq.w	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a40      	ldr	r2, [pc, #256]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
 80024cc:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a3a      	ldr	r2, [pc, #232]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fc4a 	bl	8000d80 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ee:	e009      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fc46 	bl	8000d80 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d902      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	74fb      	strb	r3, [r7, #19]
        break;
 8002502:	e005      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002504:	4b31      	ldr	r3, [pc, #196]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ef      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d15c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01f      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	d019      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002540:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fc05 	bl	8000d80 <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002578:	e00b      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fc01 	bl	8000d80 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d902      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	74fb      	strb	r3, [r7, #19]
            break;
 8002590:	e006      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ec      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025be:	e009      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
 80025c4:	e006      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d4:	7c7b      	ldrb	r3, [r7, #17]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4ba6      	ldr	r3, [pc, #664]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	4aa5      	ldr	r2, [pc, #660]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f2:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f023 0203 	bic.w	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	499c      	ldr	r1, [pc, #624]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002614:	4b97      	ldr	r3, [pc, #604]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f023 020c 	bic.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	4994      	ldr	r1, [pc, #592]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002636:	4b8f      	ldr	r3, [pc, #572]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	498b      	ldr	r1, [pc, #556]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002658:	4b86      	ldr	r3, [pc, #536]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	4983      	ldr	r1, [pc, #524]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800267a:	4b7e      	ldr	r3, [pc, #504]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	497a      	ldr	r1, [pc, #488]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800269c:	4b75      	ldr	r3, [pc, #468]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	4972      	ldr	r1, [pc, #456]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026be:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026cc:	4969      	ldr	r1, [pc, #420]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026e0:	4b64      	ldr	r3, [pc, #400]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ee:	4961      	ldr	r1, [pc, #388]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002702:	4b5c      	ldr	r3, [pc, #368]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	4958      	ldr	r1, [pc, #352]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002724:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	4950      	ldr	r1, [pc, #320]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002746:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	4947      	ldr	r1, [pc, #284]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002768:	4b42      	ldr	r3, [pc, #264]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800276a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	493f      	ldr	r1, [pc, #252]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d028      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800278a:	4b3a      	ldr	r3, [pc, #232]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002790:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4936      	ldr	r1, [pc, #216]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a8:	d106      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027aa:	4b32      	ldr	r3, [pc, #200]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a31      	ldr	r2, [pc, #196]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b4:	60d3      	str	r3, [r2, #12]
 80027b6:	e011      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2101      	movs	r1, #1
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f8d9 	bl	8002980 <RCCEx_PLLSAI1_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d028      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f6:	491f      	ldr	r1, [pc, #124]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002806:	d106      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800280e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002812:	60d3      	str	r3, [r2, #12]
 8002814:	e011      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800281e:	d10c      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	2101      	movs	r1, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f8aa 	bl	8002980 <RCCEx_PLLSAI1_Config>
 800282c:	4603      	mov	r3, r0
 800282e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d02a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002854:	4907      	ldr	r1, [pc, #28]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002864:	d108      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002866:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4a02      	ldr	r2, [pc, #8]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800286c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002870:	60d3      	str	r3, [r2, #12]
 8002872:	e013      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002874:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3304      	adds	r3, #4
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f879 	bl	8002980 <RCCEx_PLLSAI1_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d02f      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b6:	4929      	ldr	r1, [pc, #164]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	2102      	movs	r1, #2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f856 	bl	8002980 <RCCEx_PLLSAI1_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d014      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	74bb      	strb	r3, [r7, #18]
 80028e2:	e011      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ec:	d10c      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3320      	adds	r3, #32
 80028f2:	2102      	movs	r1, #2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 f935 	bl	8002b64 <RCCEx_PLLSAI2_Config>
 80028fa:	4603      	mov	r3, r0
 80028fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002924:	490d      	ldr	r1, [pc, #52]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002948:	4904      	ldr	r1, [pc, #16]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002950:	7cbb      	ldrb	r3, [r7, #18]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000

08002960 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000

08002980 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800298e:	4b74      	ldr	r3, [pc, #464]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d018      	beq.n	80029cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800299a:	4b71      	ldr	r3, [pc, #452]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0203 	and.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d10d      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
       ||
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029b2:	4b6b      	ldr	r3, [pc, #428]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
       ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d047      	beq.n	8002a56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	e044      	b.n	8002a56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d018      	beq.n	8002a06 <RCCEx_PLLSAI1_Config+0x86>
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d825      	bhi.n	8002a24 <RCCEx_PLLSAI1_Config+0xa4>
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d002      	beq.n	80029e2 <RCCEx_PLLSAI1_Config+0x62>
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d009      	beq.n	80029f4 <RCCEx_PLLSAI1_Config+0x74>
 80029e0:	e020      	b.n	8002a24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029e2:	4b5f      	ldr	r3, [pc, #380]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11d      	bne.n	8002a2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f2:	e01a      	b.n	8002a2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029f4:	4b5a      	ldr	r3, [pc, #360]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d116      	bne.n	8002a2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a04:	e013      	b.n	8002a2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a06:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a12:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a22:	e006      	b.n	8002a32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      break;
 8002a28:	e004      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e002      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a3a:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	4943      	ldr	r1, [pc, #268]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d17c      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a5c:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a68:	f7fe f98a 	bl	8000d80 <HAL_GetTick>
 8002a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a6e:	e009      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a70:	f7fe f986 	bl	8000d80 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d902      	bls.n	8002a84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	73fb      	strb	r3, [r7, #15]
        break;
 8002a82:	e005      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a84:	4b36      	ldr	r3, [pc, #216]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1ef      	bne.n	8002a70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d15f      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d110      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a9c:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6892      	ldr	r2, [r2, #8]
 8002aac:	0211      	lsls	r1, r2, #8
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68d2      	ldr	r2, [r2, #12]
 8002ab2:	06d2      	lsls	r2, r2, #27
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	492a      	ldr	r1, [pc, #168]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	610b      	str	r3, [r1, #16]
 8002abc:	e027      	b.n	8002b0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d112      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ac4:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002acc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6892      	ldr	r2, [r2, #8]
 8002ad4:	0211      	lsls	r1, r2, #8
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6912      	ldr	r2, [r2, #16]
 8002ada:	0852      	lsrs	r2, r2, #1
 8002adc:	3a01      	subs	r2, #1
 8002ade:	0552      	lsls	r2, r2, #21
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	491f      	ldr	r1, [pc, #124]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	610b      	str	r3, [r1, #16]
 8002ae8:	e011      	b.n	8002b0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002af2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6892      	ldr	r2, [r2, #8]
 8002afa:	0211      	lsls	r1, r2, #8
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6952      	ldr	r2, [r2, #20]
 8002b00:	0852      	lsrs	r2, r2, #1
 8002b02:	3a01      	subs	r2, #1
 8002b04:	0652      	lsls	r2, r2, #25
 8002b06:	430a      	orrs	r2, r1
 8002b08:	4915      	ldr	r1, [pc, #84]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe f931 	bl	8000d80 <HAL_GetTick>
 8002b1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b20:	e009      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b22:	f7fe f92d 	bl	8000d80 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d902      	bls.n	8002b36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	73fb      	strb	r3, [r7, #15]
          break;
 8002b34:	e005      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ef      	beq.n	8002b22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4903      	ldr	r1, [pc, #12]	; (8002b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000

08002b64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b72:	4b69      	ldr	r3, [pc, #420]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d018      	beq.n	8002bb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b7e:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0203 	and.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d10d      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
       ||
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b96:	4b60      	ldr	r3, [pc, #384]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d047      	beq.n	8002c3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	e044      	b.n	8002c3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d018      	beq.n	8002bea <RCCEx_PLLSAI2_Config+0x86>
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d825      	bhi.n	8002c08 <RCCEx_PLLSAI2_Config+0xa4>
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d002      	beq.n	8002bc6 <RCCEx_PLLSAI2_Config+0x62>
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d009      	beq.n	8002bd8 <RCCEx_PLLSAI2_Config+0x74>
 8002bc4:	e020      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bc6:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11d      	bne.n	8002c0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd6:	e01a      	b.n	8002c0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d116      	bne.n	8002c12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be8:	e013      	b.n	8002c12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bea:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bf6:	4b48      	ldr	r3, [pc, #288]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c06:	e006      	b.n	8002c16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0c:	e004      	b.n	8002c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e002      	b.n	8002c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c12:	bf00      	nop
 8002c14:	e000      	b.n	8002c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10d      	bne.n	8002c3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c1e:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	430b      	orrs	r3, r1
 8002c34:	4938      	ldr	r1, [pc, #224]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d166      	bne.n	8002d0e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c4c:	f7fe f898 	bl	8000d80 <HAL_GetTick>
 8002c50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c52:	e009      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c54:	f7fe f894 	bl	8000d80 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	73fb      	strb	r3, [r7, #15]
        break;
 8002c66:	e005      	b.n	8002c74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ef      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d149      	bne.n	8002d0e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d110      	bne.n	8002ca2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6892      	ldr	r2, [r2, #8]
 8002c90:	0211      	lsls	r1, r2, #8
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	06d2      	lsls	r2, r2, #27
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	491f      	ldr	r1, [pc, #124]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	614b      	str	r3, [r1, #20]
 8002ca0:	e011      	b.n	8002cc6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002caa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6892      	ldr	r2, [r2, #8]
 8002cb2:	0211      	lsls	r1, r2, #8
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6912      	ldr	r2, [r2, #16]
 8002cb8:	0852      	lsrs	r2, r2, #1
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	0652      	lsls	r2, r2, #25
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	4915      	ldr	r1, [pc, #84]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe f855 	bl	8000d80 <HAL_GetTick>
 8002cd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cd8:	e009      	b.n	8002cee <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cda:	f7fe f851 	bl	8000d80 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d902      	bls.n	8002cee <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	73fb      	strb	r3, [r7, #15]
          break;
 8002cec:	e005      	b.n	8002cfa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ef      	beq.n	8002cda <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d106      	bne.n	8002d0e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e040      	b.n	8002db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fdb4 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8c0 	bl	8002ee0 <UART_SetConfig>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e022      	b.n	8002db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fb6c 	bl	8003450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fbf3 	bl	8003594 <UART_CheckIdleState>
 8002dae:	4603      	mov	r3, r0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	f040 8082 	bne.w	8002ed6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_UART_Transmit+0x26>
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07a      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_UART_Transmit+0x38>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e073      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2221      	movs	r2, #33	; 0x21
 8002e04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e06:	f7fd ffbb 	bl	8000d80 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d108      	bne.n	8002e38 <HAL_UART_Transmit+0x80>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	e003      	b.n	8002e40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e48:	e02d      	b.n	8002ea6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fbe6 	bl	8003626 <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e039      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	881a      	ldrh	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e76:	b292      	uxth	r2, r2
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	e008      	b.n	8002e94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1cb      	bne.n	8002e4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2140      	movs	r1, #64	; 0x40
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fbb2 	bl	8003626 <UART_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e005      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee4:	b08a      	sub	sp, #40	; 0x28
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4ba4      	ldr	r3, [pc, #656]	; (80031a0 <UART_SetConfig+0x2c0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a99      	ldr	r2, [pc, #612]	; (80031a4 <UART_SetConfig+0x2c4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a90      	ldr	r2, [pc, #576]	; (80031a8 <UART_SetConfig+0x2c8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d126      	bne.n	8002fb8 <UART_SetConfig+0xd8>
 8002f6a:	4b90      	ldr	r3, [pc, #576]	; (80031ac <UART_SetConfig+0x2cc>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d81b      	bhi.n	8002fb0 <UART_SetConfig+0xd0>
 8002f78:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <UART_SetConfig+0xa0>)
 8002f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7e:	bf00      	nop
 8002f80:	08002f91 	.word	0x08002f91
 8002f84:	08002fa1 	.word	0x08002fa1
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa9 	.word	0x08002fa9
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f96:	e116      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e112      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e10e      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8002fa8:	2308      	movs	r3, #8
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e10a      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e106      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a7c      	ldr	r2, [pc, #496]	; (80031b0 <UART_SetConfig+0x2d0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d138      	bne.n	8003034 <UART_SetConfig+0x154>
 8002fc2:	4b7a      	ldr	r3, [pc, #488]	; (80031ac <UART_SetConfig+0x2cc>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d82d      	bhi.n	800302c <UART_SetConfig+0x14c>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <UART_SetConfig+0xf8>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	0800300d 	.word	0x0800300d
 8002fdc:	0800302d 	.word	0x0800302d
 8002fe0:	0800302d 	.word	0x0800302d
 8002fe4:	0800302d 	.word	0x0800302d
 8002fe8:	0800301d 	.word	0x0800301d
 8002fec:	0800302d 	.word	0x0800302d
 8002ff0:	0800302d 	.word	0x0800302d
 8002ff4:	0800302d 	.word	0x0800302d
 8002ff8:	08003015 	.word	0x08003015
 8002ffc:	0800302d 	.word	0x0800302d
 8003000:	0800302d 	.word	0x0800302d
 8003004:	0800302d 	.word	0x0800302d
 8003008:	08003025 	.word	0x08003025
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003012:	e0d8      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003014:	2302      	movs	r3, #2
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301a:	e0d4      	b.n	80031c6 <UART_SetConfig+0x2e6>
 800301c:	2304      	movs	r3, #4
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003022:	e0d0      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003024:	2308      	movs	r3, #8
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302a:	e0cc      	b.n	80031c6 <UART_SetConfig+0x2e6>
 800302c:	2310      	movs	r3, #16
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003032:	e0c8      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a5e      	ldr	r2, [pc, #376]	; (80031b4 <UART_SetConfig+0x2d4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d125      	bne.n	800308a <UART_SetConfig+0x1aa>
 800303e:	4b5b      	ldr	r3, [pc, #364]	; (80031ac <UART_SetConfig+0x2cc>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003048:	2b30      	cmp	r3, #48	; 0x30
 800304a:	d016      	beq.n	800307a <UART_SetConfig+0x19a>
 800304c:	2b30      	cmp	r3, #48	; 0x30
 800304e:	d818      	bhi.n	8003082 <UART_SetConfig+0x1a2>
 8003050:	2b20      	cmp	r3, #32
 8003052:	d00a      	beq.n	800306a <UART_SetConfig+0x18a>
 8003054:	2b20      	cmp	r3, #32
 8003056:	d814      	bhi.n	8003082 <UART_SetConfig+0x1a2>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <UART_SetConfig+0x182>
 800305c:	2b10      	cmp	r3, #16
 800305e:	d008      	beq.n	8003072 <UART_SetConfig+0x192>
 8003060:	e00f      	b.n	8003082 <UART_SetConfig+0x1a2>
 8003062:	2300      	movs	r3, #0
 8003064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003068:	e0ad      	b.n	80031c6 <UART_SetConfig+0x2e6>
 800306a:	2302      	movs	r3, #2
 800306c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003070:	e0a9      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003072:	2304      	movs	r3, #4
 8003074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003078:	e0a5      	b.n	80031c6 <UART_SetConfig+0x2e6>
 800307a:	2308      	movs	r3, #8
 800307c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003080:	e0a1      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003082:	2310      	movs	r3, #16
 8003084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003088:	e09d      	b.n	80031c6 <UART_SetConfig+0x2e6>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a4a      	ldr	r2, [pc, #296]	; (80031b8 <UART_SetConfig+0x2d8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d125      	bne.n	80030e0 <UART_SetConfig+0x200>
 8003094:	4b45      	ldr	r3, [pc, #276]	; (80031ac <UART_SetConfig+0x2cc>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800309e:	2bc0      	cmp	r3, #192	; 0xc0
 80030a0:	d016      	beq.n	80030d0 <UART_SetConfig+0x1f0>
 80030a2:	2bc0      	cmp	r3, #192	; 0xc0
 80030a4:	d818      	bhi.n	80030d8 <UART_SetConfig+0x1f8>
 80030a6:	2b80      	cmp	r3, #128	; 0x80
 80030a8:	d00a      	beq.n	80030c0 <UART_SetConfig+0x1e0>
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d814      	bhi.n	80030d8 <UART_SetConfig+0x1f8>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <UART_SetConfig+0x1d8>
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d008      	beq.n	80030c8 <UART_SetConfig+0x1e8>
 80030b6:	e00f      	b.n	80030d8 <UART_SetConfig+0x1f8>
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030be:	e082      	b.n	80031c6 <UART_SetConfig+0x2e6>
 80030c0:	2302      	movs	r3, #2
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c6:	e07e      	b.n	80031c6 <UART_SetConfig+0x2e6>
 80030c8:	2304      	movs	r3, #4
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e07a      	b.n	80031c6 <UART_SetConfig+0x2e6>
 80030d0:	2308      	movs	r3, #8
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d6:	e076      	b.n	80031c6 <UART_SetConfig+0x2e6>
 80030d8:	2310      	movs	r3, #16
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e072      	b.n	80031c6 <UART_SetConfig+0x2e6>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a35      	ldr	r2, [pc, #212]	; (80031bc <UART_SetConfig+0x2dc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d12a      	bne.n	8003140 <UART_SetConfig+0x260>
 80030ea:	4b30      	ldr	r3, [pc, #192]	; (80031ac <UART_SetConfig+0x2cc>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f8:	d01a      	beq.n	8003130 <UART_SetConfig+0x250>
 80030fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030fe:	d81b      	bhi.n	8003138 <UART_SetConfig+0x258>
 8003100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003104:	d00c      	beq.n	8003120 <UART_SetConfig+0x240>
 8003106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310a:	d815      	bhi.n	8003138 <UART_SetConfig+0x258>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <UART_SetConfig+0x238>
 8003110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003114:	d008      	beq.n	8003128 <UART_SetConfig+0x248>
 8003116:	e00f      	b.n	8003138 <UART_SetConfig+0x258>
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e052      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003120:	2302      	movs	r3, #2
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e04e      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003128:	2304      	movs	r3, #4
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e04a      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003130:	2308      	movs	r3, #8
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e046      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003138:	2310      	movs	r3, #16
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313e:	e042      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <UART_SetConfig+0x2c4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d13a      	bne.n	80031c0 <UART_SetConfig+0x2e0>
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <UART_SetConfig+0x2cc>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003158:	d01a      	beq.n	8003190 <UART_SetConfig+0x2b0>
 800315a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800315e:	d81b      	bhi.n	8003198 <UART_SetConfig+0x2b8>
 8003160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003164:	d00c      	beq.n	8003180 <UART_SetConfig+0x2a0>
 8003166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316a:	d815      	bhi.n	8003198 <UART_SetConfig+0x2b8>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <UART_SetConfig+0x298>
 8003170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003174:	d008      	beq.n	8003188 <UART_SetConfig+0x2a8>
 8003176:	e00f      	b.n	8003198 <UART_SetConfig+0x2b8>
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e022      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003180:	2302      	movs	r3, #2
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e01e      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003188:	2304      	movs	r3, #4
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e01a      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003190:	2308      	movs	r3, #8
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e016      	b.n	80031c6 <UART_SetConfig+0x2e6>
 8003198:	2310      	movs	r3, #16
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e012      	b.n	80031c6 <UART_SetConfig+0x2e6>
 80031a0:	efff69f3 	.word	0xefff69f3
 80031a4:	40008000 	.word	0x40008000
 80031a8:	40013800 	.word	0x40013800
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40004400 	.word	0x40004400
 80031b4:	40004800 	.word	0x40004800
 80031b8:	40004c00 	.word	0x40004c00
 80031bc:	40005000 	.word	0x40005000
 80031c0:	2310      	movs	r3, #16
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a9f      	ldr	r2, [pc, #636]	; (8003448 <UART_SetConfig+0x568>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d17a      	bne.n	80032c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d824      	bhi.n	8003222 <UART_SetConfig+0x342>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <UART_SetConfig+0x300>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	08003205 	.word	0x08003205
 80031e4:	08003223 	.word	0x08003223
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	08003223 	.word	0x08003223
 80031f0:	08003213 	.word	0x08003213
 80031f4:	08003223 	.word	0x08003223
 80031f8:	08003223 	.word	0x08003223
 80031fc:	08003223 	.word	0x08003223
 8003200:	0800321b 	.word	0x0800321b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003204:	f7ff f824 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 8003208:	61f8      	str	r0, [r7, #28]
        break;
 800320a:	e010      	b.n	800322e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800320c:	4b8f      	ldr	r3, [pc, #572]	; (800344c <UART_SetConfig+0x56c>)
 800320e:	61fb      	str	r3, [r7, #28]
        break;
 8003210:	e00d      	b.n	800322e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003212:	f7fe ff85 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8003216:	61f8      	str	r0, [r7, #28]
        break;
 8003218:	e009      	b.n	800322e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321e:	61fb      	str	r3, [r7, #28]
        break;
 8003220:	e005      	b.n	800322e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800322c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80fb 	beq.w	800342c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	429a      	cmp	r2, r3
 8003244:	d305      	bcc.n	8003252 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	429a      	cmp	r2, r3
 8003250:	d903      	bls.n	800325a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003258:	e0e8      	b.n	800342c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	2200      	movs	r2, #0
 800325e:	461c      	mov	r4, r3
 8003260:	4615      	mov	r5, r2
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	022b      	lsls	r3, r5, #8
 800326c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003270:	0222      	lsls	r2, r4, #8
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	6849      	ldr	r1, [r1, #4]
 8003276:	0849      	lsrs	r1, r1, #1
 8003278:	2000      	movs	r0, #0
 800327a:	4688      	mov	r8, r1
 800327c:	4681      	mov	r9, r0
 800327e:	eb12 0a08 	adds.w	sl, r2, r8
 8003282:	eb43 0b09 	adc.w	fp, r3, r9
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003294:	4650      	mov	r0, sl
 8003296:	4659      	mov	r1, fp
 8003298:	f7fc ffa8 	bl	80001ec <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4613      	mov	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032aa:	d308      	bcc.n	80032be <UART_SetConfig+0x3de>
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b2:	d204      	bcs.n	80032be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	60da      	str	r2, [r3, #12]
 80032bc:	e0b6      	b.n	800342c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032c4:	e0b2      	b.n	800342c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ce:	d15e      	bne.n	800338e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d828      	bhi.n	800332a <UART_SetConfig+0x44a>
 80032d8:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <UART_SetConfig+0x400>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	08003305 	.word	0x08003305
 80032e4:	0800330d 	.word	0x0800330d
 80032e8:	08003315 	.word	0x08003315
 80032ec:	0800332b 	.word	0x0800332b
 80032f0:	0800331b 	.word	0x0800331b
 80032f4:	0800332b 	.word	0x0800332b
 80032f8:	0800332b 	.word	0x0800332b
 80032fc:	0800332b 	.word	0x0800332b
 8003300:	08003323 	.word	0x08003323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003304:	f7fe ffa4 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 8003308:	61f8      	str	r0, [r7, #28]
        break;
 800330a:	e014      	b.n	8003336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800330c:	f7fe ffb6 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 8003310:	61f8      	str	r0, [r7, #28]
        break;
 8003312:	e010      	b.n	8003336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003314:	4b4d      	ldr	r3, [pc, #308]	; (800344c <UART_SetConfig+0x56c>)
 8003316:	61fb      	str	r3, [r7, #28]
        break;
 8003318:	e00d      	b.n	8003336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800331a:	f7fe ff01 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 800331e:	61f8      	str	r0, [r7, #28]
        break;
 8003320:	e009      	b.n	8003336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003326:	61fb      	str	r3, [r7, #28]
        break;
 8003328:	e005      	b.n	8003336 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003334:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d077      	beq.n	800342c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005a      	lsls	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	441a      	add	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b0f      	cmp	r3, #15
 8003356:	d916      	bls.n	8003386 <UART_SetConfig+0x4a6>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335e:	d212      	bcs.n	8003386 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	b29b      	uxth	r3, r3
 8003364:	f023 030f 	bic.w	r3, r3, #15
 8003368:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	b29b      	uxth	r3, r3
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	b29a      	uxth	r2, r3
 8003376:	8afb      	ldrh	r3, [r7, #22]
 8003378:	4313      	orrs	r3, r2
 800337a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	8afa      	ldrh	r2, [r7, #22]
 8003382:	60da      	str	r2, [r3, #12]
 8003384:	e052      	b.n	800342c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800338c:	e04e      	b.n	800342c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800338e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003392:	2b08      	cmp	r3, #8
 8003394:	d827      	bhi.n	80033e6 <UART_SetConfig+0x506>
 8003396:	a201      	add	r2, pc, #4	; (adr r2, 800339c <UART_SetConfig+0x4bc>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080033c1 	.word	0x080033c1
 80033a0:	080033c9 	.word	0x080033c9
 80033a4:	080033d1 	.word	0x080033d1
 80033a8:	080033e7 	.word	0x080033e7
 80033ac:	080033d7 	.word	0x080033d7
 80033b0:	080033e7 	.word	0x080033e7
 80033b4:	080033e7 	.word	0x080033e7
 80033b8:	080033e7 	.word	0x080033e7
 80033bc:	080033df 	.word	0x080033df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c0:	f7fe ff46 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 80033c4:	61f8      	str	r0, [r7, #28]
        break;
 80033c6:	e014      	b.n	80033f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7fe ff58 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 80033cc:	61f8      	str	r0, [r7, #28]
        break;
 80033ce:	e010      	b.n	80033f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d0:	4b1e      	ldr	r3, [pc, #120]	; (800344c <UART_SetConfig+0x56c>)
 80033d2:	61fb      	str	r3, [r7, #28]
        break;
 80033d4:	e00d      	b.n	80033f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d6:	f7fe fea3 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80033da:	61f8      	str	r0, [r7, #28]
        break;
 80033dc:	e009      	b.n	80033f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e2:	61fb      	str	r3, [r7, #28]
        break;
 80033e4:	e005      	b.n	80033f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033f0:	bf00      	nop
    }

    if (pclk != 0U)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d019      	beq.n	800342c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	085a      	lsrs	r2, r3, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	441a      	add	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	d909      	bls.n	8003426 <UART_SetConfig+0x546>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d205      	bcs.n	8003426 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	e002      	b.n	800342c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003438:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800343c:	4618      	mov	r0, r3
 800343e:	3728      	adds	r7, #40	; 0x28
 8003440:	46bd      	mov	sp, r7
 8003442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003446:	bf00      	nop
 8003448:	40008000 	.word	0x40008000
 800344c:	00f42400 	.word	0x00f42400

08003450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354e:	d10a      	bne.n	8003566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  }
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035a4:	f7fd fbec 	bl	8000d80 <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d10e      	bne.n	80035d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f82d 	bl	8003626 <UART_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e023      	b.n	800361e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d10e      	bne.n	8003602 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f817 	bl	8003626 <UART_WaitOnFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e00d      	b.n	800361e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b09c      	sub	sp, #112	; 0x70
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003636:	e0a5      	b.n	8003784 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800363e:	f000 80a1 	beq.w	8003784 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fd fb9d 	bl	8000d80 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <UART_WaitOnFlagUntilTimeout+0x32>
 8003652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003654:	2b00      	cmp	r3, #0
 8003656:	d13e      	bne.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003668:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800366c:	667b      	str	r3, [r7, #100]	; 0x64
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003678:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800367c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e6      	bne.n	8003658 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3308      	adds	r3, #8
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	663b      	str	r3, [r7, #96]	; 0x60
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3308      	adds	r3, #8
 80036a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80036ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e5      	bne.n	800368a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e067      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d04f      	beq.n	8003784 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f2:	d147      	bne.n	8003784 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	e853 3f00 	ldrex	r3, [r3]
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
 800371e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003724:	e841 2300 	strex	r3, r2, [r1]
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e6      	bne.n	80036fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3308      	adds	r3, #8
 8003736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	613b      	str	r3, [r7, #16]
   return(result);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	66bb      	str	r3, [r7, #104]	; 0x68
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3308      	adds	r3, #8
 800374e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003750:	623a      	str	r2, [r7, #32]
 8003752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	69f9      	ldr	r1, [r7, #28]
 8003756:	6a3a      	ldr	r2, [r7, #32]
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	61bb      	str	r3, [r7, #24]
   return(result);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e010      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	429a      	cmp	r2, r3
 80037a0:	f43f af4a 	beq.w	8003638 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3770      	adds	r7, #112	; 0x70
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037ae:	b084      	sub	sp, #16
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	f107 001c 	add.w	r0, r7, #28
 80037bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fa6f 	bl	8003cb0 <USB_CoreReset>
 80037d2:	4603      	mov	r3, r0
 80037d4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80037d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
 80037e8:	e005      	b.n	80037f6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003802:	b004      	add	sp, #16
 8003804:	4770      	bx	lr

08003806 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d115      	bne.n	8003876 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003856:	2001      	movs	r0, #1
 8003858:	f7fd fa9e 	bl	8000d98 <HAL_Delay>
      ms++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fa16 	bl	8003c94 <USB_GetMode>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d01e      	beq.n	80038ac <USB_SetCurrentMode+0x84>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b31      	cmp	r3, #49	; 0x31
 8003872:	d9f0      	bls.n	8003856 <USB_SetCurrentMode+0x2e>
 8003874:	e01a      	b.n	80038ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d115      	bne.n	80038a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003888:	2001      	movs	r0, #1
 800388a:	f7fd fa85 	bl	8000d98 <HAL_Delay>
      ms++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f9fd 	bl	8003c94 <USB_GetMode>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <USB_SetCurrentMode+0x84>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b31      	cmp	r3, #49	; 0x31
 80038a4:	d9f0      	bls.n	8003888 <USB_SetCurrentMode+0x60>
 80038a6:	e001      	b.n	80038ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e005      	b.n	80038b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b32      	cmp	r3, #50	; 0x32
 80038b0:	d101      	bne.n	80038b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c0:	b084      	sub	sp, #16
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	e009      	b.n	80038f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3340      	adds	r3, #64	; 0x40
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	3301      	adds	r3, #1
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b0e      	cmp	r3, #14
 80038f8:	d9f2      	bls.n	80038e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11c      	bne.n	800393a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390e:	f043 0302 	orr.w	r3, r3, #2
 8003912:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e005      	b.n	8003946 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800394c:	461a      	mov	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	4619      	mov	r1, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003960:	461a      	mov	r2, r3
 8003962:	680b      	ldr	r3, [r1, #0]
 8003964:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003966:	2103      	movs	r1, #3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f959 	bl	8003c20 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800396e:	2110      	movs	r1, #16
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8f1 	bl	8003b58 <USB_FlushTxFifo>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f91d 	bl	8003bc0 <USB_FlushRxFifo>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ae:	461a      	mov	r2, r3
 80039b0:	2300      	movs	r3, #0
 80039b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	e043      	b.n	8003a42 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039d0:	d118      	bne.n	8003a04 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e4:	461a      	mov	r2, r3
 80039e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	e013      	b.n	8003a16 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e008      	b.n	8003a16 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a10:	461a      	mov	r2, r3
 8003a12:	2300      	movs	r3, #0
 8003a14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a22:	461a      	mov	r2, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a34:	461a      	mov	r2, r3
 8003a36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d3b7      	bcc.n	80039ba <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	e043      	b.n	8003ad8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a66:	d118      	bne.n	8003a9a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e013      	b.n	8003aac <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e008      	b.n	8003aac <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2300      	movs	r3, #0
 8003abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	461a      	mov	r2, r3
 8003acc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3b7      	bcc.n	8003a50 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f043 0210 	orr.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <USB_DevInit+0x294>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f043 0208 	orr.w	r2, r3, #8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b3a:	f043 0304 	orr.w	r3, r3, #4
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b4e:	b004      	add	sp, #16
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	803c3800 	.word	0x803c3800

08003b58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <USB_FlushTxFifo+0x64>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e01b      	b.n	8003bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	daf2      	bge.n	8003b66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	019b      	lsls	r3, r3, #6
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <USB_FlushTxFifo+0x64>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e006      	b.n	8003bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d0f0      	beq.n	8003b90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	00030d40 	.word	0x00030d40

08003bc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a11      	ldr	r2, [pc, #68]	; (8003c1c <USB_FlushRxFifo+0x5c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e018      	b.n	8003c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	daf2      	bge.n	8003bcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2210      	movs	r2, #16
 8003bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <USB_FlushRxFifo+0x5c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e006      	b.n	8003c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d0f0      	beq.n	8003bf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	00030d40 	.word	0x00030d40

08003c20 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	68f9      	ldr	r1, [r7, #12]
 8003c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c6c:	f023 0303 	bic.w	r3, r3, #3
 8003c70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c80:	f043 0302 	orr.w	r3, r3, #2
 8003c84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <USB_CoreReset+0x64>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e01b      	b.n	8003d06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	daf2      	bge.n	8003cbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f043 0201 	orr.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <USB_CoreReset+0x64>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e006      	b.n	8003d06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d0f0      	beq.n	8003ce6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	00030d40 	.word	0x00030d40

08003d18 <__errno>:
 8003d18:	4b01      	ldr	r3, [pc, #4]	; (8003d20 <__errno+0x8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	2000000c 	.word	0x2000000c

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4d0d      	ldr	r5, [pc, #52]	; (8003d5c <__libc_init_array+0x38>)
 8003d28:	4c0d      	ldr	r4, [pc, #52]	; (8003d60 <__libc_init_array+0x3c>)
 8003d2a:	1b64      	subs	r4, r4, r5
 8003d2c:	10a4      	asrs	r4, r4, #2
 8003d2e:	2600      	movs	r6, #0
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	4d0b      	ldr	r5, [pc, #44]	; (8003d64 <__libc_init_array+0x40>)
 8003d36:	4c0c      	ldr	r4, [pc, #48]	; (8003d68 <__libc_init_array+0x44>)
 8003d38:	f000 fd1e 	bl	8004778 <_init>
 8003d3c:	1b64      	subs	r4, r4, r5
 8003d3e:	10a4      	asrs	r4, r4, #2
 8003d40:	2600      	movs	r6, #0
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	08004854 	.word	0x08004854
 8003d60:	08004854 	.word	0x08004854
 8003d64:	08004854 	.word	0x08004854
 8003d68:	08004858 	.word	0x08004858

08003d6c <memset>:
 8003d6c:	4402      	add	r2, r0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d100      	bne.n	8003d76 <memset+0xa>
 8003d74:	4770      	bx	lr
 8003d76:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7a:	e7f9      	b.n	8003d70 <memset+0x4>

08003d7c <_puts_r>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	460e      	mov	r6, r1
 8003d80:	4605      	mov	r5, r0
 8003d82:	b118      	cbz	r0, 8003d8c <_puts_r+0x10>
 8003d84:	6983      	ldr	r3, [r0, #24]
 8003d86:	b90b      	cbnz	r3, 8003d8c <_puts_r+0x10>
 8003d88:	f000 fa48 	bl	800421c <__sinit>
 8003d8c:	69ab      	ldr	r3, [r5, #24]
 8003d8e:	68ac      	ldr	r4, [r5, #8]
 8003d90:	b913      	cbnz	r3, 8003d98 <_puts_r+0x1c>
 8003d92:	4628      	mov	r0, r5
 8003d94:	f000 fa42 	bl	800421c <__sinit>
 8003d98:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <_puts_r+0xd0>)
 8003d9a:	429c      	cmp	r4, r3
 8003d9c:	d120      	bne.n	8003de0 <_puts_r+0x64>
 8003d9e:	686c      	ldr	r4, [r5, #4]
 8003da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003da2:	07db      	lsls	r3, r3, #31
 8003da4:	d405      	bmi.n	8003db2 <_puts_r+0x36>
 8003da6:	89a3      	ldrh	r3, [r4, #12]
 8003da8:	0598      	lsls	r0, r3, #22
 8003daa:	d402      	bmi.n	8003db2 <_puts_r+0x36>
 8003dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dae:	f000 fad3 	bl	8004358 <__retarget_lock_acquire_recursive>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	0719      	lsls	r1, r3, #28
 8003db6:	d51d      	bpl.n	8003df4 <_puts_r+0x78>
 8003db8:	6923      	ldr	r3, [r4, #16]
 8003dba:	b1db      	cbz	r3, 8003df4 <_puts_r+0x78>
 8003dbc:	3e01      	subs	r6, #1
 8003dbe:	68a3      	ldr	r3, [r4, #8]
 8003dc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	60a3      	str	r3, [r4, #8]
 8003dc8:	bb39      	cbnz	r1, 8003e1a <_puts_r+0x9e>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da38      	bge.n	8003e40 <_puts_r+0xc4>
 8003dce:	4622      	mov	r2, r4
 8003dd0:	210a      	movs	r1, #10
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 f848 	bl	8003e68 <__swbuf_r>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d011      	beq.n	8003e00 <_puts_r+0x84>
 8003ddc:	250a      	movs	r5, #10
 8003dde:	e011      	b.n	8003e04 <_puts_r+0x88>
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <_puts_r+0xd4>)
 8003de2:	429c      	cmp	r4, r3
 8003de4:	d101      	bne.n	8003dea <_puts_r+0x6e>
 8003de6:	68ac      	ldr	r4, [r5, #8]
 8003de8:	e7da      	b.n	8003da0 <_puts_r+0x24>
 8003dea:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <_puts_r+0xd8>)
 8003dec:	429c      	cmp	r4, r3
 8003dee:	bf08      	it	eq
 8003df0:	68ec      	ldreq	r4, [r5, #12]
 8003df2:	e7d5      	b.n	8003da0 <_puts_r+0x24>
 8003df4:	4621      	mov	r1, r4
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f888 	bl	8003f0c <__swsetup_r>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d0dd      	beq.n	8003dbc <_puts_r+0x40>
 8003e00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e06:	07da      	lsls	r2, r3, #31
 8003e08:	d405      	bmi.n	8003e16 <_puts_r+0x9a>
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	059b      	lsls	r3, r3, #22
 8003e0e:	d402      	bmi.n	8003e16 <_puts_r+0x9a>
 8003e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e12:	f000 faa2 	bl	800435a <__retarget_lock_release_recursive>
 8003e16:	4628      	mov	r0, r5
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da04      	bge.n	8003e28 <_puts_r+0xac>
 8003e1e:	69a2      	ldr	r2, [r4, #24]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	dc06      	bgt.n	8003e32 <_puts_r+0xb6>
 8003e24:	290a      	cmp	r1, #10
 8003e26:	d004      	beq.n	8003e32 <_puts_r+0xb6>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	6022      	str	r2, [r4, #0]
 8003e2e:	7019      	strb	r1, [r3, #0]
 8003e30:	e7c5      	b.n	8003dbe <_puts_r+0x42>
 8003e32:	4622      	mov	r2, r4
 8003e34:	4628      	mov	r0, r5
 8003e36:	f000 f817 	bl	8003e68 <__swbuf_r>
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d1bf      	bne.n	8003dbe <_puts_r+0x42>
 8003e3e:	e7df      	b.n	8003e00 <_puts_r+0x84>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	250a      	movs	r5, #10
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	6022      	str	r2, [r4, #0]
 8003e48:	701d      	strb	r5, [r3, #0]
 8003e4a:	e7db      	b.n	8003e04 <_puts_r+0x88>
 8003e4c:	0800480c 	.word	0x0800480c
 8003e50:	0800482c 	.word	0x0800482c
 8003e54:	080047ec 	.word	0x080047ec

08003e58 <puts>:
 8003e58:	4b02      	ldr	r3, [pc, #8]	; (8003e64 <puts+0xc>)
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	f7ff bf8d 	b.w	8003d7c <_puts_r>
 8003e62:	bf00      	nop
 8003e64:	2000000c 	.word	0x2000000c

08003e68 <__swbuf_r>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	460e      	mov	r6, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	4605      	mov	r5, r0
 8003e70:	b118      	cbz	r0, 8003e7a <__swbuf_r+0x12>
 8003e72:	6983      	ldr	r3, [r0, #24]
 8003e74:	b90b      	cbnz	r3, 8003e7a <__swbuf_r+0x12>
 8003e76:	f000 f9d1 	bl	800421c <__sinit>
 8003e7a:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <__swbuf_r+0x98>)
 8003e7c:	429c      	cmp	r4, r3
 8003e7e:	d12b      	bne.n	8003ed8 <__swbuf_r+0x70>
 8003e80:	686c      	ldr	r4, [r5, #4]
 8003e82:	69a3      	ldr	r3, [r4, #24]
 8003e84:	60a3      	str	r3, [r4, #8]
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	071a      	lsls	r2, r3, #28
 8003e8a:	d52f      	bpl.n	8003eec <__swbuf_r+0x84>
 8003e8c:	6923      	ldr	r3, [r4, #16]
 8003e8e:	b36b      	cbz	r3, 8003eec <__swbuf_r+0x84>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	1ac0      	subs	r0, r0, r3
 8003e96:	6963      	ldr	r3, [r4, #20]
 8003e98:	b2f6      	uxtb	r6, r6
 8003e9a:	4283      	cmp	r3, r0
 8003e9c:	4637      	mov	r7, r6
 8003e9e:	dc04      	bgt.n	8003eaa <__swbuf_r+0x42>
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f000 f926 	bl	80040f4 <_fflush_r>
 8003ea8:	bb30      	cbnz	r0, 8003ef8 <__swbuf_r+0x90>
 8003eaa:	68a3      	ldr	r3, [r4, #8]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	6022      	str	r2, [r4, #0]
 8003eb6:	701e      	strb	r6, [r3, #0]
 8003eb8:	6963      	ldr	r3, [r4, #20]
 8003eba:	3001      	adds	r0, #1
 8003ebc:	4283      	cmp	r3, r0
 8003ebe:	d004      	beq.n	8003eca <__swbuf_r+0x62>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	07db      	lsls	r3, r3, #31
 8003ec4:	d506      	bpl.n	8003ed4 <__swbuf_r+0x6c>
 8003ec6:	2e0a      	cmp	r6, #10
 8003ec8:	d104      	bne.n	8003ed4 <__swbuf_r+0x6c>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f911 	bl	80040f4 <_fflush_r>
 8003ed2:	b988      	cbnz	r0, 8003ef8 <__swbuf_r+0x90>
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <__swbuf_r+0x9c>)
 8003eda:	429c      	cmp	r4, r3
 8003edc:	d101      	bne.n	8003ee2 <__swbuf_r+0x7a>
 8003ede:	68ac      	ldr	r4, [r5, #8]
 8003ee0:	e7cf      	b.n	8003e82 <__swbuf_r+0x1a>
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <__swbuf_r+0xa0>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	bf08      	it	eq
 8003ee8:	68ec      	ldreq	r4, [r5, #12]
 8003eea:	e7ca      	b.n	8003e82 <__swbuf_r+0x1a>
 8003eec:	4621      	mov	r1, r4
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 f80c 	bl	8003f0c <__swsetup_r>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d0cb      	beq.n	8003e90 <__swbuf_r+0x28>
 8003ef8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003efc:	e7ea      	b.n	8003ed4 <__swbuf_r+0x6c>
 8003efe:	bf00      	nop
 8003f00:	0800480c 	.word	0x0800480c
 8003f04:	0800482c 	.word	0x0800482c
 8003f08:	080047ec 	.word	0x080047ec

08003f0c <__swsetup_r>:
 8003f0c:	4b32      	ldr	r3, [pc, #200]	; (8003fd8 <__swsetup_r+0xcc>)
 8003f0e:	b570      	push	{r4, r5, r6, lr}
 8003f10:	681d      	ldr	r5, [r3, #0]
 8003f12:	4606      	mov	r6, r0
 8003f14:	460c      	mov	r4, r1
 8003f16:	b125      	cbz	r5, 8003f22 <__swsetup_r+0x16>
 8003f18:	69ab      	ldr	r3, [r5, #24]
 8003f1a:	b913      	cbnz	r3, 8003f22 <__swsetup_r+0x16>
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f000 f97d 	bl	800421c <__sinit>
 8003f22:	4b2e      	ldr	r3, [pc, #184]	; (8003fdc <__swsetup_r+0xd0>)
 8003f24:	429c      	cmp	r4, r3
 8003f26:	d10f      	bne.n	8003f48 <__swsetup_r+0x3c>
 8003f28:	686c      	ldr	r4, [r5, #4]
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f30:	0719      	lsls	r1, r3, #28
 8003f32:	d42c      	bmi.n	8003f8e <__swsetup_r+0x82>
 8003f34:	06dd      	lsls	r5, r3, #27
 8003f36:	d411      	bmi.n	8003f5c <__swsetup_r+0x50>
 8003f38:	2309      	movs	r3, #9
 8003f3a:	6033      	str	r3, [r6, #0]
 8003f3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f46:	e03e      	b.n	8003fc6 <__swsetup_r+0xba>
 8003f48:	4b25      	ldr	r3, [pc, #148]	; (8003fe0 <__swsetup_r+0xd4>)
 8003f4a:	429c      	cmp	r4, r3
 8003f4c:	d101      	bne.n	8003f52 <__swsetup_r+0x46>
 8003f4e:	68ac      	ldr	r4, [r5, #8]
 8003f50:	e7eb      	b.n	8003f2a <__swsetup_r+0x1e>
 8003f52:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <__swsetup_r+0xd8>)
 8003f54:	429c      	cmp	r4, r3
 8003f56:	bf08      	it	eq
 8003f58:	68ec      	ldreq	r4, [r5, #12]
 8003f5a:	e7e6      	b.n	8003f2a <__swsetup_r+0x1e>
 8003f5c:	0758      	lsls	r0, r3, #29
 8003f5e:	d512      	bpl.n	8003f86 <__swsetup_r+0x7a>
 8003f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f62:	b141      	cbz	r1, 8003f76 <__swsetup_r+0x6a>
 8003f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f68:	4299      	cmp	r1, r3
 8003f6a:	d002      	beq.n	8003f72 <__swsetup_r+0x66>
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f000 fa5b 	bl	8004428 <_free_r>
 8003f72:	2300      	movs	r3, #0
 8003f74:	6363      	str	r3, [r4, #52]	; 0x34
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6063      	str	r3, [r4, #4]
 8003f82:	6923      	ldr	r3, [r4, #16]
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	f043 0308 	orr.w	r3, r3, #8
 8003f8c:	81a3      	strh	r3, [r4, #12]
 8003f8e:	6923      	ldr	r3, [r4, #16]
 8003f90:	b94b      	cbnz	r3, 8003fa6 <__swsetup_r+0x9a>
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d003      	beq.n	8003fa6 <__swsetup_r+0x9a>
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	f000 fa01 	bl	80043a8 <__smakebuf_r>
 8003fa6:	89a0      	ldrh	r0, [r4, #12]
 8003fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fac:	f010 0301 	ands.w	r3, r0, #1
 8003fb0:	d00a      	beq.n	8003fc8 <__swsetup_r+0xbc>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60a3      	str	r3, [r4, #8]
 8003fb6:	6963      	ldr	r3, [r4, #20]
 8003fb8:	425b      	negs	r3, r3
 8003fba:	61a3      	str	r3, [r4, #24]
 8003fbc:	6923      	ldr	r3, [r4, #16]
 8003fbe:	b943      	cbnz	r3, 8003fd2 <__swsetup_r+0xc6>
 8003fc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fc4:	d1ba      	bne.n	8003f3c <__swsetup_r+0x30>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	0781      	lsls	r1, r0, #30
 8003fca:	bf58      	it	pl
 8003fcc:	6963      	ldrpl	r3, [r4, #20]
 8003fce:	60a3      	str	r3, [r4, #8]
 8003fd0:	e7f4      	b.n	8003fbc <__swsetup_r+0xb0>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e7f7      	b.n	8003fc6 <__swsetup_r+0xba>
 8003fd6:	bf00      	nop
 8003fd8:	2000000c 	.word	0x2000000c
 8003fdc:	0800480c 	.word	0x0800480c
 8003fe0:	0800482c 	.word	0x0800482c
 8003fe4:	080047ec 	.word	0x080047ec

08003fe8 <__sflush_r>:
 8003fe8:	898a      	ldrh	r2, [r1, #12]
 8003fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fee:	4605      	mov	r5, r0
 8003ff0:	0710      	lsls	r0, r2, #28
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	d458      	bmi.n	80040a8 <__sflush_r+0xc0>
 8003ff6:	684b      	ldr	r3, [r1, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	dc05      	bgt.n	8004008 <__sflush_r+0x20>
 8003ffc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	dc02      	bgt.n	8004008 <__sflush_r+0x20>
 8004002:	2000      	movs	r0, #0
 8004004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800400a:	2e00      	cmp	r6, #0
 800400c:	d0f9      	beq.n	8004002 <__sflush_r+0x1a>
 800400e:	2300      	movs	r3, #0
 8004010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004014:	682f      	ldr	r7, [r5, #0]
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	d032      	beq.n	8004080 <__sflush_r+0x98>
 800401a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	075a      	lsls	r2, r3, #29
 8004020:	d505      	bpl.n	800402e <__sflush_r+0x46>
 8004022:	6863      	ldr	r3, [r4, #4]
 8004024:	1ac0      	subs	r0, r0, r3
 8004026:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004028:	b10b      	cbz	r3, 800402e <__sflush_r+0x46>
 800402a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800402c:	1ac0      	subs	r0, r0, r3
 800402e:	2300      	movs	r3, #0
 8004030:	4602      	mov	r2, r0
 8004032:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004034:	6a21      	ldr	r1, [r4, #32]
 8004036:	4628      	mov	r0, r5
 8004038:	47b0      	blx	r6
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	d106      	bne.n	800404e <__sflush_r+0x66>
 8004040:	6829      	ldr	r1, [r5, #0]
 8004042:	291d      	cmp	r1, #29
 8004044:	d82c      	bhi.n	80040a0 <__sflush_r+0xb8>
 8004046:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <__sflush_r+0x108>)
 8004048:	40ca      	lsrs	r2, r1
 800404a:	07d6      	lsls	r6, r2, #31
 800404c:	d528      	bpl.n	80040a0 <__sflush_r+0xb8>
 800404e:	2200      	movs	r2, #0
 8004050:	6062      	str	r2, [r4, #4]
 8004052:	04d9      	lsls	r1, r3, #19
 8004054:	6922      	ldr	r2, [r4, #16]
 8004056:	6022      	str	r2, [r4, #0]
 8004058:	d504      	bpl.n	8004064 <__sflush_r+0x7c>
 800405a:	1c42      	adds	r2, r0, #1
 800405c:	d101      	bne.n	8004062 <__sflush_r+0x7a>
 800405e:	682b      	ldr	r3, [r5, #0]
 8004060:	b903      	cbnz	r3, 8004064 <__sflush_r+0x7c>
 8004062:	6560      	str	r0, [r4, #84]	; 0x54
 8004064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004066:	602f      	str	r7, [r5, #0]
 8004068:	2900      	cmp	r1, #0
 800406a:	d0ca      	beq.n	8004002 <__sflush_r+0x1a>
 800406c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004070:	4299      	cmp	r1, r3
 8004072:	d002      	beq.n	800407a <__sflush_r+0x92>
 8004074:	4628      	mov	r0, r5
 8004076:	f000 f9d7 	bl	8004428 <_free_r>
 800407a:	2000      	movs	r0, #0
 800407c:	6360      	str	r0, [r4, #52]	; 0x34
 800407e:	e7c1      	b.n	8004004 <__sflush_r+0x1c>
 8004080:	6a21      	ldr	r1, [r4, #32]
 8004082:	2301      	movs	r3, #1
 8004084:	4628      	mov	r0, r5
 8004086:	47b0      	blx	r6
 8004088:	1c41      	adds	r1, r0, #1
 800408a:	d1c7      	bne.n	800401c <__sflush_r+0x34>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0c4      	beq.n	800401c <__sflush_r+0x34>
 8004092:	2b1d      	cmp	r3, #29
 8004094:	d001      	beq.n	800409a <__sflush_r+0xb2>
 8004096:	2b16      	cmp	r3, #22
 8004098:	d101      	bne.n	800409e <__sflush_r+0xb6>
 800409a:	602f      	str	r7, [r5, #0]
 800409c:	e7b1      	b.n	8004002 <__sflush_r+0x1a>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a4:	81a3      	strh	r3, [r4, #12]
 80040a6:	e7ad      	b.n	8004004 <__sflush_r+0x1c>
 80040a8:	690f      	ldr	r7, [r1, #16]
 80040aa:	2f00      	cmp	r7, #0
 80040ac:	d0a9      	beq.n	8004002 <__sflush_r+0x1a>
 80040ae:	0793      	lsls	r3, r2, #30
 80040b0:	680e      	ldr	r6, [r1, #0]
 80040b2:	bf08      	it	eq
 80040b4:	694b      	ldreq	r3, [r1, #20]
 80040b6:	600f      	str	r7, [r1, #0]
 80040b8:	bf18      	it	ne
 80040ba:	2300      	movne	r3, #0
 80040bc:	eba6 0807 	sub.w	r8, r6, r7
 80040c0:	608b      	str	r3, [r1, #8]
 80040c2:	f1b8 0f00 	cmp.w	r8, #0
 80040c6:	dd9c      	ble.n	8004002 <__sflush_r+0x1a>
 80040c8:	6a21      	ldr	r1, [r4, #32]
 80040ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040cc:	4643      	mov	r3, r8
 80040ce:	463a      	mov	r2, r7
 80040d0:	4628      	mov	r0, r5
 80040d2:	47b0      	blx	r6
 80040d4:	2800      	cmp	r0, #0
 80040d6:	dc06      	bgt.n	80040e6 <__sflush_r+0xfe>
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040de:	81a3      	strh	r3, [r4, #12]
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e4:	e78e      	b.n	8004004 <__sflush_r+0x1c>
 80040e6:	4407      	add	r7, r0
 80040e8:	eba8 0800 	sub.w	r8, r8, r0
 80040ec:	e7e9      	b.n	80040c2 <__sflush_r+0xda>
 80040ee:	bf00      	nop
 80040f0:	20400001 	.word	0x20400001

080040f4 <_fflush_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	690b      	ldr	r3, [r1, #16]
 80040f8:	4605      	mov	r5, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	b913      	cbnz	r3, 8004104 <_fflush_r+0x10>
 80040fe:	2500      	movs	r5, #0
 8004100:	4628      	mov	r0, r5
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	b118      	cbz	r0, 800410e <_fflush_r+0x1a>
 8004106:	6983      	ldr	r3, [r0, #24]
 8004108:	b90b      	cbnz	r3, 800410e <_fflush_r+0x1a>
 800410a:	f000 f887 	bl	800421c <__sinit>
 800410e:	4b14      	ldr	r3, [pc, #80]	; (8004160 <_fflush_r+0x6c>)
 8004110:	429c      	cmp	r4, r3
 8004112:	d11b      	bne.n	800414c <_fflush_r+0x58>
 8004114:	686c      	ldr	r4, [r5, #4]
 8004116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0ef      	beq.n	80040fe <_fflush_r+0xa>
 800411e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004120:	07d0      	lsls	r0, r2, #31
 8004122:	d404      	bmi.n	800412e <_fflush_r+0x3a>
 8004124:	0599      	lsls	r1, r3, #22
 8004126:	d402      	bmi.n	800412e <_fflush_r+0x3a>
 8004128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800412a:	f000 f915 	bl	8004358 <__retarget_lock_acquire_recursive>
 800412e:	4628      	mov	r0, r5
 8004130:	4621      	mov	r1, r4
 8004132:	f7ff ff59 	bl	8003fe8 <__sflush_r>
 8004136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004138:	07da      	lsls	r2, r3, #31
 800413a:	4605      	mov	r5, r0
 800413c:	d4e0      	bmi.n	8004100 <_fflush_r+0xc>
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	059b      	lsls	r3, r3, #22
 8004142:	d4dd      	bmi.n	8004100 <_fflush_r+0xc>
 8004144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004146:	f000 f908 	bl	800435a <__retarget_lock_release_recursive>
 800414a:	e7d9      	b.n	8004100 <_fflush_r+0xc>
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <_fflush_r+0x70>)
 800414e:	429c      	cmp	r4, r3
 8004150:	d101      	bne.n	8004156 <_fflush_r+0x62>
 8004152:	68ac      	ldr	r4, [r5, #8]
 8004154:	e7df      	b.n	8004116 <_fflush_r+0x22>
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <_fflush_r+0x74>)
 8004158:	429c      	cmp	r4, r3
 800415a:	bf08      	it	eq
 800415c:	68ec      	ldreq	r4, [r5, #12]
 800415e:	e7da      	b.n	8004116 <_fflush_r+0x22>
 8004160:	0800480c 	.word	0x0800480c
 8004164:	0800482c 	.word	0x0800482c
 8004168:	080047ec 	.word	0x080047ec

0800416c <std>:
 800416c:	2300      	movs	r3, #0
 800416e:	b510      	push	{r4, lr}
 8004170:	4604      	mov	r4, r0
 8004172:	e9c0 3300 	strd	r3, r3, [r0]
 8004176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800417a:	6083      	str	r3, [r0, #8]
 800417c:	8181      	strh	r1, [r0, #12]
 800417e:	6643      	str	r3, [r0, #100]	; 0x64
 8004180:	81c2      	strh	r2, [r0, #14]
 8004182:	6183      	str	r3, [r0, #24]
 8004184:	4619      	mov	r1, r3
 8004186:	2208      	movs	r2, #8
 8004188:	305c      	adds	r0, #92	; 0x5c
 800418a:	f7ff fdef 	bl	8003d6c <memset>
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <std+0x38>)
 8004190:	6263      	str	r3, [r4, #36]	; 0x24
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <std+0x3c>)
 8004194:	62a3      	str	r3, [r4, #40]	; 0x28
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <std+0x40>)
 8004198:	62e3      	str	r3, [r4, #44]	; 0x2c
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <std+0x44>)
 800419c:	6224      	str	r4, [r4, #32]
 800419e:	6323      	str	r3, [r4, #48]	; 0x30
 80041a0:	bd10      	pop	{r4, pc}
 80041a2:	bf00      	nop
 80041a4:	08004609 	.word	0x08004609
 80041a8:	0800462b 	.word	0x0800462b
 80041ac:	08004663 	.word	0x08004663
 80041b0:	08004687 	.word	0x08004687

080041b4 <_cleanup_r>:
 80041b4:	4901      	ldr	r1, [pc, #4]	; (80041bc <_cleanup_r+0x8>)
 80041b6:	f000 b8af 	b.w	8004318 <_fwalk_reent>
 80041ba:	bf00      	nop
 80041bc:	080040f5 	.word	0x080040f5

080041c0 <__sfmoreglue>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	2268      	movs	r2, #104	; 0x68
 80041c4:	1e4d      	subs	r5, r1, #1
 80041c6:	4355      	muls	r5, r2
 80041c8:	460e      	mov	r6, r1
 80041ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041ce:	f000 f997 	bl	8004500 <_malloc_r>
 80041d2:	4604      	mov	r4, r0
 80041d4:	b140      	cbz	r0, 80041e8 <__sfmoreglue+0x28>
 80041d6:	2100      	movs	r1, #0
 80041d8:	e9c0 1600 	strd	r1, r6, [r0]
 80041dc:	300c      	adds	r0, #12
 80041de:	60a0      	str	r0, [r4, #8]
 80041e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041e4:	f7ff fdc2 	bl	8003d6c <memset>
 80041e8:	4620      	mov	r0, r4
 80041ea:	bd70      	pop	{r4, r5, r6, pc}

080041ec <__sfp_lock_acquire>:
 80041ec:	4801      	ldr	r0, [pc, #4]	; (80041f4 <__sfp_lock_acquire+0x8>)
 80041ee:	f000 b8b3 	b.w	8004358 <__retarget_lock_acquire_recursive>
 80041f2:	bf00      	nop
 80041f4:	20000625 	.word	0x20000625

080041f8 <__sfp_lock_release>:
 80041f8:	4801      	ldr	r0, [pc, #4]	; (8004200 <__sfp_lock_release+0x8>)
 80041fa:	f000 b8ae 	b.w	800435a <__retarget_lock_release_recursive>
 80041fe:	bf00      	nop
 8004200:	20000625 	.word	0x20000625

08004204 <__sinit_lock_acquire>:
 8004204:	4801      	ldr	r0, [pc, #4]	; (800420c <__sinit_lock_acquire+0x8>)
 8004206:	f000 b8a7 	b.w	8004358 <__retarget_lock_acquire_recursive>
 800420a:	bf00      	nop
 800420c:	20000626 	.word	0x20000626

08004210 <__sinit_lock_release>:
 8004210:	4801      	ldr	r0, [pc, #4]	; (8004218 <__sinit_lock_release+0x8>)
 8004212:	f000 b8a2 	b.w	800435a <__retarget_lock_release_recursive>
 8004216:	bf00      	nop
 8004218:	20000626 	.word	0x20000626

0800421c <__sinit>:
 800421c:	b510      	push	{r4, lr}
 800421e:	4604      	mov	r4, r0
 8004220:	f7ff fff0 	bl	8004204 <__sinit_lock_acquire>
 8004224:	69a3      	ldr	r3, [r4, #24]
 8004226:	b11b      	cbz	r3, 8004230 <__sinit+0x14>
 8004228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422c:	f7ff bff0 	b.w	8004210 <__sinit_lock_release>
 8004230:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004234:	6523      	str	r3, [r4, #80]	; 0x50
 8004236:	4b13      	ldr	r3, [pc, #76]	; (8004284 <__sinit+0x68>)
 8004238:	4a13      	ldr	r2, [pc, #76]	; (8004288 <__sinit+0x6c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	62a2      	str	r2, [r4, #40]	; 0x28
 800423e:	42a3      	cmp	r3, r4
 8004240:	bf04      	itt	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	61a3      	streq	r3, [r4, #24]
 8004246:	4620      	mov	r0, r4
 8004248:	f000 f820 	bl	800428c <__sfp>
 800424c:	6060      	str	r0, [r4, #4]
 800424e:	4620      	mov	r0, r4
 8004250:	f000 f81c 	bl	800428c <__sfp>
 8004254:	60a0      	str	r0, [r4, #8]
 8004256:	4620      	mov	r0, r4
 8004258:	f000 f818 	bl	800428c <__sfp>
 800425c:	2200      	movs	r2, #0
 800425e:	60e0      	str	r0, [r4, #12]
 8004260:	2104      	movs	r1, #4
 8004262:	6860      	ldr	r0, [r4, #4]
 8004264:	f7ff ff82 	bl	800416c <std>
 8004268:	68a0      	ldr	r0, [r4, #8]
 800426a:	2201      	movs	r2, #1
 800426c:	2109      	movs	r1, #9
 800426e:	f7ff ff7d 	bl	800416c <std>
 8004272:	68e0      	ldr	r0, [r4, #12]
 8004274:	2202      	movs	r2, #2
 8004276:	2112      	movs	r1, #18
 8004278:	f7ff ff78 	bl	800416c <std>
 800427c:	2301      	movs	r3, #1
 800427e:	61a3      	str	r3, [r4, #24]
 8004280:	e7d2      	b.n	8004228 <__sinit+0xc>
 8004282:	bf00      	nop
 8004284:	080047e8 	.word	0x080047e8
 8004288:	080041b5 	.word	0x080041b5

0800428c <__sfp>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	4607      	mov	r7, r0
 8004290:	f7ff ffac 	bl	80041ec <__sfp_lock_acquire>
 8004294:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <__sfp+0x84>)
 8004296:	681e      	ldr	r6, [r3, #0]
 8004298:	69b3      	ldr	r3, [r6, #24]
 800429a:	b913      	cbnz	r3, 80042a2 <__sfp+0x16>
 800429c:	4630      	mov	r0, r6
 800429e:	f7ff ffbd 	bl	800421c <__sinit>
 80042a2:	3648      	adds	r6, #72	; 0x48
 80042a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	d503      	bpl.n	80042b4 <__sfp+0x28>
 80042ac:	6833      	ldr	r3, [r6, #0]
 80042ae:	b30b      	cbz	r3, 80042f4 <__sfp+0x68>
 80042b0:	6836      	ldr	r6, [r6, #0]
 80042b2:	e7f7      	b.n	80042a4 <__sfp+0x18>
 80042b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042b8:	b9d5      	cbnz	r5, 80042f0 <__sfp+0x64>
 80042ba:	4b16      	ldr	r3, [pc, #88]	; (8004314 <__sfp+0x88>)
 80042bc:	60e3      	str	r3, [r4, #12]
 80042be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042c2:	6665      	str	r5, [r4, #100]	; 0x64
 80042c4:	f000 f847 	bl	8004356 <__retarget_lock_init_recursive>
 80042c8:	f7ff ff96 	bl	80041f8 <__sfp_lock_release>
 80042cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042d4:	6025      	str	r5, [r4, #0]
 80042d6:	61a5      	str	r5, [r4, #24]
 80042d8:	2208      	movs	r2, #8
 80042da:	4629      	mov	r1, r5
 80042dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042e0:	f7ff fd44 	bl	8003d6c <memset>
 80042e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042ec:	4620      	mov	r0, r4
 80042ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f0:	3468      	adds	r4, #104	; 0x68
 80042f2:	e7d9      	b.n	80042a8 <__sfp+0x1c>
 80042f4:	2104      	movs	r1, #4
 80042f6:	4638      	mov	r0, r7
 80042f8:	f7ff ff62 	bl	80041c0 <__sfmoreglue>
 80042fc:	4604      	mov	r4, r0
 80042fe:	6030      	str	r0, [r6, #0]
 8004300:	2800      	cmp	r0, #0
 8004302:	d1d5      	bne.n	80042b0 <__sfp+0x24>
 8004304:	f7ff ff78 	bl	80041f8 <__sfp_lock_release>
 8004308:	230c      	movs	r3, #12
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	e7ee      	b.n	80042ec <__sfp+0x60>
 800430e:	bf00      	nop
 8004310:	080047e8 	.word	0x080047e8
 8004314:	ffff0001 	.word	0xffff0001

08004318 <_fwalk_reent>:
 8004318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800431c:	4606      	mov	r6, r0
 800431e:	4688      	mov	r8, r1
 8004320:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004324:	2700      	movs	r7, #0
 8004326:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800432a:	f1b9 0901 	subs.w	r9, r9, #1
 800432e:	d505      	bpl.n	800433c <_fwalk_reent+0x24>
 8004330:	6824      	ldr	r4, [r4, #0]
 8004332:	2c00      	cmp	r4, #0
 8004334:	d1f7      	bne.n	8004326 <_fwalk_reent+0xe>
 8004336:	4638      	mov	r0, r7
 8004338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800433c:	89ab      	ldrh	r3, [r5, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d907      	bls.n	8004352 <_fwalk_reent+0x3a>
 8004342:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004346:	3301      	adds	r3, #1
 8004348:	d003      	beq.n	8004352 <_fwalk_reent+0x3a>
 800434a:	4629      	mov	r1, r5
 800434c:	4630      	mov	r0, r6
 800434e:	47c0      	blx	r8
 8004350:	4307      	orrs	r7, r0
 8004352:	3568      	adds	r5, #104	; 0x68
 8004354:	e7e9      	b.n	800432a <_fwalk_reent+0x12>

08004356 <__retarget_lock_init_recursive>:
 8004356:	4770      	bx	lr

08004358 <__retarget_lock_acquire_recursive>:
 8004358:	4770      	bx	lr

0800435a <__retarget_lock_release_recursive>:
 800435a:	4770      	bx	lr

0800435c <__swhatbuf_r>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	460e      	mov	r6, r1
 8004360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004364:	2900      	cmp	r1, #0
 8004366:	b096      	sub	sp, #88	; 0x58
 8004368:	4614      	mov	r4, r2
 800436a:	461d      	mov	r5, r3
 800436c:	da08      	bge.n	8004380 <__swhatbuf_r+0x24>
 800436e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	602a      	str	r2, [r5, #0]
 8004376:	061a      	lsls	r2, r3, #24
 8004378:	d410      	bmi.n	800439c <__swhatbuf_r+0x40>
 800437a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800437e:	e00e      	b.n	800439e <__swhatbuf_r+0x42>
 8004380:	466a      	mov	r2, sp
 8004382:	f000 f9a7 	bl	80046d4 <_fstat_r>
 8004386:	2800      	cmp	r0, #0
 8004388:	dbf1      	blt.n	800436e <__swhatbuf_r+0x12>
 800438a:	9a01      	ldr	r2, [sp, #4]
 800438c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004390:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004394:	425a      	negs	r2, r3
 8004396:	415a      	adcs	r2, r3
 8004398:	602a      	str	r2, [r5, #0]
 800439a:	e7ee      	b.n	800437a <__swhatbuf_r+0x1e>
 800439c:	2340      	movs	r3, #64	; 0x40
 800439e:	2000      	movs	r0, #0
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	b016      	add	sp, #88	; 0x58
 80043a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080043a8 <__smakebuf_r>:
 80043a8:	898b      	ldrh	r3, [r1, #12]
 80043aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043ac:	079d      	lsls	r5, r3, #30
 80043ae:	4606      	mov	r6, r0
 80043b0:	460c      	mov	r4, r1
 80043b2:	d507      	bpl.n	80043c4 <__smakebuf_r+0x1c>
 80043b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	6123      	str	r3, [r4, #16]
 80043bc:	2301      	movs	r3, #1
 80043be:	6163      	str	r3, [r4, #20]
 80043c0:	b002      	add	sp, #8
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	ab01      	add	r3, sp, #4
 80043c6:	466a      	mov	r2, sp
 80043c8:	f7ff ffc8 	bl	800435c <__swhatbuf_r>
 80043cc:	9900      	ldr	r1, [sp, #0]
 80043ce:	4605      	mov	r5, r0
 80043d0:	4630      	mov	r0, r6
 80043d2:	f000 f895 	bl	8004500 <_malloc_r>
 80043d6:	b948      	cbnz	r0, 80043ec <__smakebuf_r+0x44>
 80043d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043dc:	059a      	lsls	r2, r3, #22
 80043de:	d4ef      	bmi.n	80043c0 <__smakebuf_r+0x18>
 80043e0:	f023 0303 	bic.w	r3, r3, #3
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	81a3      	strh	r3, [r4, #12]
 80043ea:	e7e3      	b.n	80043b4 <__smakebuf_r+0xc>
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <__smakebuf_r+0x7c>)
 80043ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	6020      	str	r0, [r4, #0]
 80043f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	9b00      	ldr	r3, [sp, #0]
 80043fc:	6163      	str	r3, [r4, #20]
 80043fe:	9b01      	ldr	r3, [sp, #4]
 8004400:	6120      	str	r0, [r4, #16]
 8004402:	b15b      	cbz	r3, 800441c <__smakebuf_r+0x74>
 8004404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004408:	4630      	mov	r0, r6
 800440a:	f000 f975 	bl	80046f8 <_isatty_r>
 800440e:	b128      	cbz	r0, 800441c <__smakebuf_r+0x74>
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	81a3      	strh	r3, [r4, #12]
 800441c:	89a0      	ldrh	r0, [r4, #12]
 800441e:	4305      	orrs	r5, r0
 8004420:	81a5      	strh	r5, [r4, #12]
 8004422:	e7cd      	b.n	80043c0 <__smakebuf_r+0x18>
 8004424:	080041b5 	.word	0x080041b5

08004428 <_free_r>:
 8004428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800442a:	2900      	cmp	r1, #0
 800442c:	d044      	beq.n	80044b8 <_free_r+0x90>
 800442e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004432:	9001      	str	r0, [sp, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f1a1 0404 	sub.w	r4, r1, #4
 800443a:	bfb8      	it	lt
 800443c:	18e4      	addlt	r4, r4, r3
 800443e:	f000 f97d 	bl	800473c <__malloc_lock>
 8004442:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <_free_r+0x94>)
 8004444:	9801      	ldr	r0, [sp, #4]
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	b933      	cbnz	r3, 8004458 <_free_r+0x30>
 800444a:	6063      	str	r3, [r4, #4]
 800444c:	6014      	str	r4, [r2, #0]
 800444e:	b003      	add	sp, #12
 8004450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004454:	f000 b978 	b.w	8004748 <__malloc_unlock>
 8004458:	42a3      	cmp	r3, r4
 800445a:	d908      	bls.n	800446e <_free_r+0x46>
 800445c:	6825      	ldr	r5, [r4, #0]
 800445e:	1961      	adds	r1, r4, r5
 8004460:	428b      	cmp	r3, r1
 8004462:	bf01      	itttt	eq
 8004464:	6819      	ldreq	r1, [r3, #0]
 8004466:	685b      	ldreq	r3, [r3, #4]
 8004468:	1949      	addeq	r1, r1, r5
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	e7ed      	b.n	800444a <_free_r+0x22>
 800446e:	461a      	mov	r2, r3
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b10b      	cbz	r3, 8004478 <_free_r+0x50>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d9fa      	bls.n	800446e <_free_r+0x46>
 8004478:	6811      	ldr	r1, [r2, #0]
 800447a:	1855      	adds	r5, r2, r1
 800447c:	42a5      	cmp	r5, r4
 800447e:	d10b      	bne.n	8004498 <_free_r+0x70>
 8004480:	6824      	ldr	r4, [r4, #0]
 8004482:	4421      	add	r1, r4
 8004484:	1854      	adds	r4, r2, r1
 8004486:	42a3      	cmp	r3, r4
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	d1e0      	bne.n	800444e <_free_r+0x26>
 800448c:	681c      	ldr	r4, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	6053      	str	r3, [r2, #4]
 8004492:	4421      	add	r1, r4
 8004494:	6011      	str	r1, [r2, #0]
 8004496:	e7da      	b.n	800444e <_free_r+0x26>
 8004498:	d902      	bls.n	80044a0 <_free_r+0x78>
 800449a:	230c      	movs	r3, #12
 800449c:	6003      	str	r3, [r0, #0]
 800449e:	e7d6      	b.n	800444e <_free_r+0x26>
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	1961      	adds	r1, r4, r5
 80044a4:	428b      	cmp	r3, r1
 80044a6:	bf04      	itt	eq
 80044a8:	6819      	ldreq	r1, [r3, #0]
 80044aa:	685b      	ldreq	r3, [r3, #4]
 80044ac:	6063      	str	r3, [r4, #4]
 80044ae:	bf04      	itt	eq
 80044b0:	1949      	addeq	r1, r1, r5
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	6054      	str	r4, [r2, #4]
 80044b6:	e7ca      	b.n	800444e <_free_r+0x26>
 80044b8:	b003      	add	sp, #12
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	20000628 	.word	0x20000628

080044c0 <sbrk_aligned>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4e0e      	ldr	r6, [pc, #56]	; (80044fc <sbrk_aligned+0x3c>)
 80044c4:	460c      	mov	r4, r1
 80044c6:	6831      	ldr	r1, [r6, #0]
 80044c8:	4605      	mov	r5, r0
 80044ca:	b911      	cbnz	r1, 80044d2 <sbrk_aligned+0x12>
 80044cc:	f000 f88c 	bl	80045e8 <_sbrk_r>
 80044d0:	6030      	str	r0, [r6, #0]
 80044d2:	4621      	mov	r1, r4
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 f887 	bl	80045e8 <_sbrk_r>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	d00a      	beq.n	80044f4 <sbrk_aligned+0x34>
 80044de:	1cc4      	adds	r4, r0, #3
 80044e0:	f024 0403 	bic.w	r4, r4, #3
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d007      	beq.n	80044f8 <sbrk_aligned+0x38>
 80044e8:	1a21      	subs	r1, r4, r0
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 f87c 	bl	80045e8 <_sbrk_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d101      	bne.n	80044f8 <sbrk_aligned+0x38>
 80044f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80044f8:	4620      	mov	r0, r4
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	2000062c 	.word	0x2000062c

08004500 <_malloc_r>:
 8004500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004504:	1ccd      	adds	r5, r1, #3
 8004506:	f025 0503 	bic.w	r5, r5, #3
 800450a:	3508      	adds	r5, #8
 800450c:	2d0c      	cmp	r5, #12
 800450e:	bf38      	it	cc
 8004510:	250c      	movcc	r5, #12
 8004512:	2d00      	cmp	r5, #0
 8004514:	4607      	mov	r7, r0
 8004516:	db01      	blt.n	800451c <_malloc_r+0x1c>
 8004518:	42a9      	cmp	r1, r5
 800451a:	d905      	bls.n	8004528 <_malloc_r+0x28>
 800451c:	230c      	movs	r3, #12
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	2600      	movs	r6, #0
 8004522:	4630      	mov	r0, r6
 8004524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004528:	4e2e      	ldr	r6, [pc, #184]	; (80045e4 <_malloc_r+0xe4>)
 800452a:	f000 f907 	bl	800473c <__malloc_lock>
 800452e:	6833      	ldr	r3, [r6, #0]
 8004530:	461c      	mov	r4, r3
 8004532:	bb34      	cbnz	r4, 8004582 <_malloc_r+0x82>
 8004534:	4629      	mov	r1, r5
 8004536:	4638      	mov	r0, r7
 8004538:	f7ff ffc2 	bl	80044c0 <sbrk_aligned>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	4604      	mov	r4, r0
 8004540:	d14d      	bne.n	80045de <_malloc_r+0xde>
 8004542:	6834      	ldr	r4, [r6, #0]
 8004544:	4626      	mov	r6, r4
 8004546:	2e00      	cmp	r6, #0
 8004548:	d140      	bne.n	80045cc <_malloc_r+0xcc>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	4631      	mov	r1, r6
 800454e:	4638      	mov	r0, r7
 8004550:	eb04 0803 	add.w	r8, r4, r3
 8004554:	f000 f848 	bl	80045e8 <_sbrk_r>
 8004558:	4580      	cmp	r8, r0
 800455a:	d13a      	bne.n	80045d2 <_malloc_r+0xd2>
 800455c:	6821      	ldr	r1, [r4, #0]
 800455e:	3503      	adds	r5, #3
 8004560:	1a6d      	subs	r5, r5, r1
 8004562:	f025 0503 	bic.w	r5, r5, #3
 8004566:	3508      	adds	r5, #8
 8004568:	2d0c      	cmp	r5, #12
 800456a:	bf38      	it	cc
 800456c:	250c      	movcc	r5, #12
 800456e:	4629      	mov	r1, r5
 8004570:	4638      	mov	r0, r7
 8004572:	f7ff ffa5 	bl	80044c0 <sbrk_aligned>
 8004576:	3001      	adds	r0, #1
 8004578:	d02b      	beq.n	80045d2 <_malloc_r+0xd2>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	442b      	add	r3, r5
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	e00e      	b.n	80045a0 <_malloc_r+0xa0>
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	1b52      	subs	r2, r2, r5
 8004586:	d41e      	bmi.n	80045c6 <_malloc_r+0xc6>
 8004588:	2a0b      	cmp	r2, #11
 800458a:	d916      	bls.n	80045ba <_malloc_r+0xba>
 800458c:	1961      	adds	r1, r4, r5
 800458e:	42a3      	cmp	r3, r4
 8004590:	6025      	str	r5, [r4, #0]
 8004592:	bf18      	it	ne
 8004594:	6059      	strne	r1, [r3, #4]
 8004596:	6863      	ldr	r3, [r4, #4]
 8004598:	bf08      	it	eq
 800459a:	6031      	streq	r1, [r6, #0]
 800459c:	5162      	str	r2, [r4, r5]
 800459e:	604b      	str	r3, [r1, #4]
 80045a0:	4638      	mov	r0, r7
 80045a2:	f104 060b 	add.w	r6, r4, #11
 80045a6:	f000 f8cf 	bl	8004748 <__malloc_unlock>
 80045aa:	f026 0607 	bic.w	r6, r6, #7
 80045ae:	1d23      	adds	r3, r4, #4
 80045b0:	1af2      	subs	r2, r6, r3
 80045b2:	d0b6      	beq.n	8004522 <_malloc_r+0x22>
 80045b4:	1b9b      	subs	r3, r3, r6
 80045b6:	50a3      	str	r3, [r4, r2]
 80045b8:	e7b3      	b.n	8004522 <_malloc_r+0x22>
 80045ba:	6862      	ldr	r2, [r4, #4]
 80045bc:	42a3      	cmp	r3, r4
 80045be:	bf0c      	ite	eq
 80045c0:	6032      	streq	r2, [r6, #0]
 80045c2:	605a      	strne	r2, [r3, #4]
 80045c4:	e7ec      	b.n	80045a0 <_malloc_r+0xa0>
 80045c6:	4623      	mov	r3, r4
 80045c8:	6864      	ldr	r4, [r4, #4]
 80045ca:	e7b2      	b.n	8004532 <_malloc_r+0x32>
 80045cc:	4634      	mov	r4, r6
 80045ce:	6876      	ldr	r6, [r6, #4]
 80045d0:	e7b9      	b.n	8004546 <_malloc_r+0x46>
 80045d2:	230c      	movs	r3, #12
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	4638      	mov	r0, r7
 80045d8:	f000 f8b6 	bl	8004748 <__malloc_unlock>
 80045dc:	e7a1      	b.n	8004522 <_malloc_r+0x22>
 80045de:	6025      	str	r5, [r4, #0]
 80045e0:	e7de      	b.n	80045a0 <_malloc_r+0xa0>
 80045e2:	bf00      	nop
 80045e4:	20000628 	.word	0x20000628

080045e8 <_sbrk_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4d06      	ldr	r5, [pc, #24]	; (8004604 <_sbrk_r+0x1c>)
 80045ec:	2300      	movs	r3, #0
 80045ee:	4604      	mov	r4, r0
 80045f0:	4608      	mov	r0, r1
 80045f2:	602b      	str	r3, [r5, #0]
 80045f4:	f7fc faea 	bl	8000bcc <_sbrk>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d102      	bne.n	8004602 <_sbrk_r+0x1a>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	b103      	cbz	r3, 8004602 <_sbrk_r+0x1a>
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	20000630 	.word	0x20000630

08004608 <__sread>:
 8004608:	b510      	push	{r4, lr}
 800460a:	460c      	mov	r4, r1
 800460c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004610:	f000 f8a0 	bl	8004754 <_read_r>
 8004614:	2800      	cmp	r0, #0
 8004616:	bfab      	itete	ge
 8004618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800461a:	89a3      	ldrhlt	r3, [r4, #12]
 800461c:	181b      	addge	r3, r3, r0
 800461e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004622:	bfac      	ite	ge
 8004624:	6563      	strge	r3, [r4, #84]	; 0x54
 8004626:	81a3      	strhlt	r3, [r4, #12]
 8004628:	bd10      	pop	{r4, pc}

0800462a <__swrite>:
 800462a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800462e:	461f      	mov	r7, r3
 8004630:	898b      	ldrh	r3, [r1, #12]
 8004632:	05db      	lsls	r3, r3, #23
 8004634:	4605      	mov	r5, r0
 8004636:	460c      	mov	r4, r1
 8004638:	4616      	mov	r6, r2
 800463a:	d505      	bpl.n	8004648 <__swrite+0x1e>
 800463c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004640:	2302      	movs	r3, #2
 8004642:	2200      	movs	r2, #0
 8004644:	f000 f868 	bl	8004718 <_lseek_r>
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800464e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	4632      	mov	r2, r6
 8004656:	463b      	mov	r3, r7
 8004658:	4628      	mov	r0, r5
 800465a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800465e:	f000 b817 	b.w	8004690 <_write_r>

08004662 <__sseek>:
 8004662:	b510      	push	{r4, lr}
 8004664:	460c      	mov	r4, r1
 8004666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800466a:	f000 f855 	bl	8004718 <_lseek_r>
 800466e:	1c43      	adds	r3, r0, #1
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	bf15      	itete	ne
 8004674:	6560      	strne	r0, [r4, #84]	; 0x54
 8004676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800467a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800467e:	81a3      	strheq	r3, [r4, #12]
 8004680:	bf18      	it	ne
 8004682:	81a3      	strhne	r3, [r4, #12]
 8004684:	bd10      	pop	{r4, pc}

08004686 <__sclose>:
 8004686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800468a:	f000 b813 	b.w	80046b4 <_close_r>
	...

08004690 <_write_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4d07      	ldr	r5, [pc, #28]	; (80046b0 <_write_r+0x20>)
 8004694:	4604      	mov	r4, r0
 8004696:	4608      	mov	r0, r1
 8004698:	4611      	mov	r1, r2
 800469a:	2200      	movs	r2, #0
 800469c:	602a      	str	r2, [r5, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	f7fc fa43 	bl	8000b2a <_write>
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	d102      	bne.n	80046ae <_write_r+0x1e>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	b103      	cbz	r3, 80046ae <_write_r+0x1e>
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	bd38      	pop	{r3, r4, r5, pc}
 80046b0:	20000630 	.word	0x20000630

080046b4 <_close_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4d06      	ldr	r5, [pc, #24]	; (80046d0 <_close_r+0x1c>)
 80046b8:	2300      	movs	r3, #0
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f7fc fa4f 	bl	8000b62 <_close>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_close_r+0x1a>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_close_r+0x1a>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	20000630 	.word	0x20000630

080046d4 <_fstat_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4d07      	ldr	r5, [pc, #28]	; (80046f4 <_fstat_r+0x20>)
 80046d8:	2300      	movs	r3, #0
 80046da:	4604      	mov	r4, r0
 80046dc:	4608      	mov	r0, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	f7fc fa4a 	bl	8000b7a <_fstat>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	d102      	bne.n	80046f0 <_fstat_r+0x1c>
 80046ea:	682b      	ldr	r3, [r5, #0]
 80046ec:	b103      	cbz	r3, 80046f0 <_fstat_r+0x1c>
 80046ee:	6023      	str	r3, [r4, #0]
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
 80046f2:	bf00      	nop
 80046f4:	20000630 	.word	0x20000630

080046f8 <_isatty_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4d06      	ldr	r5, [pc, #24]	; (8004714 <_isatty_r+0x1c>)
 80046fc:	2300      	movs	r3, #0
 80046fe:	4604      	mov	r4, r0
 8004700:	4608      	mov	r0, r1
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	f7fc fa49 	bl	8000b9a <_isatty>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_isatty_r+0x1a>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	b103      	cbz	r3, 8004712 <_isatty_r+0x1a>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	20000630 	.word	0x20000630

08004718 <_lseek_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4d07      	ldr	r5, [pc, #28]	; (8004738 <_lseek_r+0x20>)
 800471c:	4604      	mov	r4, r0
 800471e:	4608      	mov	r0, r1
 8004720:	4611      	mov	r1, r2
 8004722:	2200      	movs	r2, #0
 8004724:	602a      	str	r2, [r5, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	f7fc fa42 	bl	8000bb0 <_lseek>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d102      	bne.n	8004736 <_lseek_r+0x1e>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	b103      	cbz	r3, 8004736 <_lseek_r+0x1e>
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	bd38      	pop	{r3, r4, r5, pc}
 8004738:	20000630 	.word	0x20000630

0800473c <__malloc_lock>:
 800473c:	4801      	ldr	r0, [pc, #4]	; (8004744 <__malloc_lock+0x8>)
 800473e:	f7ff be0b 	b.w	8004358 <__retarget_lock_acquire_recursive>
 8004742:	bf00      	nop
 8004744:	20000624 	.word	0x20000624

08004748 <__malloc_unlock>:
 8004748:	4801      	ldr	r0, [pc, #4]	; (8004750 <__malloc_unlock+0x8>)
 800474a:	f7ff be06 	b.w	800435a <__retarget_lock_release_recursive>
 800474e:	bf00      	nop
 8004750:	20000624 	.word	0x20000624

08004754 <_read_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d07      	ldr	r5, [pc, #28]	; (8004774 <_read_r+0x20>)
 8004758:	4604      	mov	r4, r0
 800475a:	4608      	mov	r0, r1
 800475c:	4611      	mov	r1, r2
 800475e:	2200      	movs	r2, #0
 8004760:	602a      	str	r2, [r5, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f7fc f9c4 	bl	8000af0 <_read>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_read_r+0x1e>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_read_r+0x1e>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	20000630 	.word	0x20000630

08004778 <_init>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

08004784 <_fini>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	bf00      	nop
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr
