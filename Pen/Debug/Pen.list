
Pen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000761c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  080077cc  080077cc  000177cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b30  08007b30  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b38  08007b38  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b38  08007b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  2000007c  08007bbc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  08007bbc  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001615f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003085  00000000  00000000  0003620b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00039290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad0b  00000000  00000000  0003b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160f7  00000000  00000000  000663f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf85  00000000  00000000  0007c4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a46f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005960  00000000  00000000  0017a4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080077b4 	.word	0x080077b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080077b4 	.word	0x080077b4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2007      	movs	r0, #7
 8000d90:	f000 fa44 	bl	800121c <bno055_writeData>
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	4619      	mov	r1, r3
 8000daa:	203d      	movs	r0, #61	; 0x3d
 8000dac:	f000 fa36 	bl	800121c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d103      	bne.n	8000dbe <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000db6:	2013      	movs	r0, #19
 8000db8:	f000 fa24 	bl	8001204 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000dbc:	e002      	b.n	8000dc4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000dbe:	2007      	movs	r0, #7
 8000dc0:	f000 fa20 	bl	8001204 <bno055_delay>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff ffe3 	bl	8000d9c <bno055_setOperationMode>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000dde:	200c      	movs	r0, #12
 8000de0:	f7ff ffdc 	bl	8000d9c <bno055_setOperationMode>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000dec:	2120      	movs	r1, #32
 8000dee:	203f      	movs	r0, #63	; 0x3f
 8000df0:	f000 fa14 	bl	800121c <bno055_writeData>
  bno055_delay(700);
 8000df4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000df8:	f000 fa04 	bl	8001204 <bno055_delay>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  bno055_reset();
 8000e06:	f7ff ffef 	bl	8000de8 <bno055_reset>

  uint8_t id = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	2201      	movs	r2, #1
 8000e12:	4619      	mov	r1, r3
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 faed 	bl	80013f4 <bno055_readData>
  if (id != BNO055_ID) {
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2ba0      	cmp	r3, #160	; 0xa0
 8000e1e:	d004      	beq.n	8000e2a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	4619      	mov	r1, r3
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <bno055_setup+0x4c>)
 8000e26:	f005 fad9 	bl	80063dc <iprintf>
  }
  bno055_setPage(0);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ffa8 	bl	8000d80 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	203f      	movs	r0, #63	; 0x3f
 8000e34:	f000 f9f2 	bl	800121c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000e38:	f7ff ffc8 	bl	8000dcc <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000e3c:	200a      	movs	r0, #10
 8000e3e:	f000 f9e1 	bl	8001204 <bno055_delay>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	080077cc 	.word	0x080077cc

08000e50 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000e50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e54:	b09e      	sub	sp, #120	; 0x78
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff ff8e 	bl	8000d80 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e68:	2b20      	cmp	r3, #32
 8000e6a:	d108      	bne.n	8000e7e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000e6c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e74:	2208      	movs	r2, #8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fabc 	bl	80013f4 <bno055_readData>
 8000e7c:	e007      	b.n	8000e8e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000e7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e86:	2206      	movs	r2, #6
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fab3 	bl	80013f4 <bno055_readData>

  double scale = 1;
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b8b      	ldr	r3, [pc, #556]	; (80010c0 <bno055_getVector+0x270>)
 8000e94:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e9c:	2b0e      	cmp	r3, #14
 8000e9e:	d109      	bne.n	8000eb4 <bno055_getVector+0x64>
    scale = magScale;
 8000ea0:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <bno055_getVector+0x274>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fb35 	bl	8000514 <__aeabi_ui2d>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000eb2:	e03e      	b.n	8000f32 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d007      	beq.n	8000ecc <bno055_getVector+0x7c>
 8000ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ec0:	2b28      	cmp	r3, #40	; 0x28
 8000ec2:	d003      	beq.n	8000ecc <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8000eca:	d109      	bne.n	8000ee0 <bno055_getVector+0x90>
    scale = accelScale;
 8000ecc:	4b7e      	ldr	r3, [pc, #504]	; (80010c8 <bno055_getVector+0x278>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fb1f 	bl	8000514 <__aeabi_ui2d>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000ede:	e028      	b.n	8000f32 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee4:	2b14      	cmp	r3, #20
 8000ee6:	d109      	bne.n	8000efc <bno055_getVector+0xac>
    scale = angularRateScale;
 8000ee8:	4b78      	ldr	r3, [pc, #480]	; (80010cc <bno055_getVector+0x27c>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fb11 	bl	8000514 <__aeabi_ui2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000efa:	e01a      	b.n	8000f32 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f00:	2b1a      	cmp	r3, #26
 8000f02:	d109      	bne.n	8000f18 <bno055_getVector+0xc8>
    scale = eulerScale;
 8000f04:	4b72      	ldr	r3, [pc, #456]	; (80010d0 <bno055_getVector+0x280>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fb03 	bl	8000514 <__aeabi_ui2d>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000f16:	e00c      	b.n	8000f32 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f1c:	2b20      	cmp	r3, #32
 8000f1e:	d108      	bne.n	8000f32 <bno055_getVector+0xe2>
    scale = quaScale;
 8000f20:	4b6c      	ldr	r3, [pc, #432]	; (80010d4 <bno055_getVector+0x284>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff faf5 	bl	8000514 <__aeabi_ui2d>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f36:	2220      	movs	r2, #32
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 fa46 	bl	80063cc <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d150      	bne.n	8000fea <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000f48:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff faea 	bl	8000534 <__aeabi_i2d>
 8000f60:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f64:	f7ff fc7a 	bl	800085c <__aeabi_ddiv>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000f70:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fad6 	bl	8000534 <__aeabi_i2d>
 8000f88:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f8c:	f7ff fc66 	bl	800085c <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000f98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fac2 	bl	8000534 <__aeabi_i2d>
 8000fb0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000fb4:	f7ff fc52 	bl	800085c <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000fc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff faae 	bl	8000534 <__aeabi_i2d>
 8000fd8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000fdc:	f7ff fc3e 	bl	800085c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000fe8:	e03b      	b.n	8001062 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000fea:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa99 	bl	8000534 <__aeabi_i2d>
 8001002:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001006:	f7ff fc29 	bl	800085c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001012:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21b      	sxth	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa85 	bl	8000534 <__aeabi_i2d>
 800102a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800102e:	f7ff fc15 	bl	800085c <__aeabi_ddiv>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800103a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21b      	sxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa71 	bl	8000534 <__aeabi_i2d>
 8001052:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001056:	f7ff fc01 	bl	800085c <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001062:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001066:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001072:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001076:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800107a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800107e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001082:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001086:	ec49 8b14 	vmov	d4, r8, r9
 800108a:	ec45 4b15 	vmov	d5, r4, r5
 800108e:	ec41 0b16 	vmov	d6, r0, r1
 8001092:	ec43 2b17 	vmov	d7, r2, r3
}
 8001096:	eeb0 0a44 	vmov.f32	s0, s8
 800109a:	eef0 0a64 	vmov.f32	s1, s9
 800109e:	eeb0 1a45 	vmov.f32	s2, s10
 80010a2:	eef0 1a65 	vmov.f32	s3, s11
 80010a6:	eeb0 2a46 	vmov.f32	s4, s12
 80010aa:	eef0 2a66 	vmov.f32	s5, s13
 80010ae:	eeb0 3a47 	vmov.f32	s6, s14
 80010b2:	eef0 3a67 	vmov.f32	s7, s15
 80010b6:	3778      	adds	r7, #120	; 0x78
 80010b8:	46bd      	mov	sp, r7
 80010ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010be:	bf00      	nop
 80010c0:	3ff00000 	.word	0x3ff00000
 80010c4:	20000006 	.word	0x20000006
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000002 	.word	0x20000002
 80010d0:	20000004 	.word	0x20000004
 80010d4:	20000008 	.word	0x20000008

080010d8 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80010d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010dc:	b090      	sub	sp, #64	; 0x40
 80010de:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80010e0:	201a      	movs	r0, #26
 80010e2:	f7ff feb5 	bl	8000e50 <bno055_getVector>
 80010e6:	eeb0 4a40 	vmov.f32	s8, s0
 80010ea:	eef0 4a60 	vmov.f32	s9, s1
 80010ee:	eeb0 5a41 	vmov.f32	s10, s2
 80010f2:	eef0 5a61 	vmov.f32	s11, s3
 80010f6:	eeb0 6a42 	vmov.f32	s12, s4
 80010fa:	eef0 6a62 	vmov.f32	s13, s5
 80010fe:	eeb0 7a43 	vmov.f32	s14, s6
 8001102:	eef0 7a63 	vmov.f32	s15, s7
 8001106:	ed87 4b08 	vstr	d4, [r7, #32]
 800110a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800110e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001112:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001116:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800111a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800111e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001122:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001126:	ec49 8b14 	vmov	d4, r8, r9
 800112a:	ec45 4b15 	vmov	d5, r4, r5
 800112e:	ec41 0b16 	vmov	d6, r0, r1
 8001132:	ec43 2b17 	vmov	d7, r2, r3
}
 8001136:	eeb0 0a44 	vmov.f32	s0, s8
 800113a:	eef0 0a64 	vmov.f32	s1, s9
 800113e:	eeb0 1a45 	vmov.f32	s2, s10
 8001142:	eef0 1a65 	vmov.f32	s3, s11
 8001146:	eeb0 2a46 	vmov.f32	s4, s12
 800114a:	eef0 2a66 	vmov.f32	s5, s13
 800114e:	eeb0 3a47 	vmov.f32	s6, s14
 8001152:	eef0 3a67 	vmov.f32	s7, s15
 8001156:	3740      	adds	r7, #64	; 0x40
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800115e <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 800115e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001162:	b090      	sub	sp, #64	; 0x40
 8001164:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001166:	2020      	movs	r0, #32
 8001168:	f7ff fe72 	bl	8000e50 <bno055_getVector>
 800116c:	eeb0 4a40 	vmov.f32	s8, s0
 8001170:	eef0 4a60 	vmov.f32	s9, s1
 8001174:	eeb0 5a41 	vmov.f32	s10, s2
 8001178:	eef0 5a61 	vmov.f32	s11, s3
 800117c:	eeb0 6a42 	vmov.f32	s12, s4
 8001180:	eef0 6a62 	vmov.f32	s13, s5
 8001184:	eeb0 7a43 	vmov.f32	s14, s6
 8001188:	eef0 7a63 	vmov.f32	s15, s7
 800118c:	ed87 4b08 	vstr	d4, [r7, #32]
 8001190:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001194:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001198:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800119c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80011a0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80011a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011ac:	ec49 8b14 	vmov	d4, r8, r9
 80011b0:	ec45 4b15 	vmov	d5, r4, r5
 80011b4:	ec41 0b16 	vmov	d6, r0, r1
 80011b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80011bc:	eeb0 0a44 	vmov.f32	s0, s8
 80011c0:	eef0 0a64 	vmov.f32	s1, s9
 80011c4:	eeb0 1a45 	vmov.f32	s2, s10
 80011c8:	eef0 1a65 	vmov.f32	s3, s11
 80011cc:	eeb0 2a46 	vmov.f32	s4, s12
 80011d0:	eef0 2a66 	vmov.f32	s5, s13
 80011d4:	eeb0 3a47 	vmov.f32	s6, s14
 80011d8:	eef0 3a67 	vmov.f32	s7, s15
 80011dc:	3740      	adds	r7, #64	; 0x40
 80011de:	46bd      	mov	sp, r7
 80011e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080011e4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <bno055_assignI2C+0x1c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000098 	.word	0x20000098

08001204 <bno055_delay>:

void bno055_delay(int time) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fee6 	bl	8001fe0 <HAL_Delay>
#endif
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af02      	add	r7, sp, #8
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	733b      	strb	r3, [r7, #12]
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001234:	4b5a      	ldr	r3, [pc, #360]	; (80013a0 <bno055_writeData+0x184>)
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	f107 020c 	add.w	r2, r7, #12
 800123c:	230a      	movs	r3, #10
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2302      	movs	r3, #2
 8001242:	2150      	movs	r1, #80	; 0x50
 8001244:	f001 fad4 	bl	80027f0 <HAL_I2C_Master_Transmit>
 8001248:	4603      	mov	r3, r0
 800124a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80a0 	beq.w	8001394 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d103      	bne.n	8001262 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800125a:	4852      	ldr	r0, [pc, #328]	; (80013a4 <bno055_writeData+0x188>)
 800125c:	f005 f944 	bl	80064e8 <puts>
 8001260:	e012      	b.n	8001288 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d103      	bne.n	8001270 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001268:	484f      	ldr	r0, [pc, #316]	; (80013a8 <bno055_writeData+0x18c>)
 800126a:	f005 f93d 	bl	80064e8 <puts>
 800126e:	e00b      	b.n	8001288 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d103      	bne.n	800127e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001276:	484d      	ldr	r0, [pc, #308]	; (80013ac <bno055_writeData+0x190>)
 8001278:	f005 f936 	bl	80064e8 <puts>
 800127c:	e004      	b.n	8001288 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	4619      	mov	r1, r3
 8001282:	484b      	ldr	r0, [pc, #300]	; (80013b0 <bno055_writeData+0x194>)
 8001284:	f005 f8aa 	bl	80063dc <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001288:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <bno055_writeData+0x184>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fca7 	bl	8002be0 <HAL_I2C_GetError>
 8001292:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d07e      	beq.n	8001398 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d103      	bne.n	80012a8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80012a0:	4844      	ldr	r0, [pc, #272]	; (80013b4 <bno055_writeData+0x198>)
 80012a2:	f005 f921 	bl	80064e8 <puts>
 80012a6:	e021      	b.n	80012ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d103      	bne.n	80012b6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <bno055_writeData+0x19c>)
 80012b0:	f005 f91a 	bl	80064e8 <puts>
 80012b4:	e01a      	b.n	80012ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d103      	bne.n	80012c4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80012bc:	483f      	ldr	r0, [pc, #252]	; (80013bc <bno055_writeData+0x1a0>)
 80012be:	f005 f913 	bl	80064e8 <puts>
 80012c2:	e013      	b.n	80012ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d103      	bne.n	80012d2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80012ca:	483d      	ldr	r0, [pc, #244]	; (80013c0 <bno055_writeData+0x1a4>)
 80012cc:	f005 f90c 	bl	80064e8 <puts>
 80012d0:	e00c      	b.n	80012ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b10      	cmp	r3, #16
 80012d6:	d103      	bne.n	80012e0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80012d8:	483a      	ldr	r0, [pc, #232]	; (80013c4 <bno055_writeData+0x1a8>)
 80012da:	f005 f905 	bl	80064e8 <puts>
 80012de:	e005      	b.n	80012ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d102      	bne.n	80012ec <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80012e6:	4838      	ldr	r0, [pc, #224]	; (80013c8 <bno055_writeData+0x1ac>)
 80012e8:	f005 f8fe 	bl	80064e8 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <bno055_writeData+0x184>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fc67 	bl	8002bc4 <HAL_I2C_GetState>
 80012f6:	4603      	mov	r3, r0
 80012f8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001300:	4832      	ldr	r0, [pc, #200]	; (80013cc <bno055_writeData+0x1b0>)
 8001302:	f005 f8f1 	bl	80064e8 <puts>
 8001306:	e048      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b20      	cmp	r3, #32
 800130c:	d103      	bne.n	8001316 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800130e:	482f      	ldr	r0, [pc, #188]	; (80013cc <bno055_writeData+0x1b0>)
 8001310:	f005 f8ea 	bl	80064e8 <puts>
 8001314:	e041      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b24      	cmp	r3, #36	; 0x24
 800131a:	d103      	bne.n	8001324 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800131c:	482c      	ldr	r0, [pc, #176]	; (80013d0 <bno055_writeData+0x1b4>)
 800131e:	f005 f8e3 	bl	80064e8 <puts>
 8001322:	e03a      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b21      	cmp	r3, #33	; 0x21
 8001328:	d103      	bne.n	8001332 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800132a:	482a      	ldr	r0, [pc, #168]	; (80013d4 <bno055_writeData+0x1b8>)
 800132c:	f005 f8dc 	bl	80064e8 <puts>
 8001330:	e033      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b22      	cmp	r3, #34	; 0x22
 8001336:	d103      	bne.n	8001340 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001338:	4827      	ldr	r0, [pc, #156]	; (80013d8 <bno055_writeData+0x1bc>)
 800133a:	f005 f8d5 	bl	80064e8 <puts>
 800133e:	e02c      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b28      	cmp	r3, #40	; 0x28
 8001344:	d103      	bne.n	800134e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001346:	4825      	ldr	r0, [pc, #148]	; (80013dc <bno055_writeData+0x1c0>)
 8001348:	f005 f8ce 	bl	80064e8 <puts>
 800134c:	e025      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b29      	cmp	r3, #41	; 0x29
 8001352:	d103      	bne.n	800135c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001354:	4822      	ldr	r0, [pc, #136]	; (80013e0 <bno055_writeData+0x1c4>)
 8001356:	f005 f8c7 	bl	80064e8 <puts>
 800135a:	e01e      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	2b2a      	cmp	r3, #42	; 0x2a
 8001360:	d103      	bne.n	800136a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001362:	4820      	ldr	r0, [pc, #128]	; (80013e4 <bno055_writeData+0x1c8>)
 8001364:	f005 f8c0 	bl	80064e8 <puts>
 8001368:	e017      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b60      	cmp	r3, #96	; 0x60
 800136e:	d103      	bne.n	8001378 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001370:	481d      	ldr	r0, [pc, #116]	; (80013e8 <bno055_writeData+0x1cc>)
 8001372:	f005 f8b9 	bl	80064e8 <puts>
 8001376:	e010      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2ba0      	cmp	r3, #160	; 0xa0
 800137c:	d103      	bne.n	8001386 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800137e:	481b      	ldr	r0, [pc, #108]	; (80013ec <bno055_writeData+0x1d0>)
 8001380:	f005 f8b2 	bl	80064e8 <puts>
 8001384:	e009      	b.n	800139a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2be0      	cmp	r3, #224	; 0xe0
 800138a:	d106      	bne.n	800139a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 800138c:	4818      	ldr	r0, [pc, #96]	; (80013f0 <bno055_writeData+0x1d4>)
 800138e:	f005 f8ab 	bl	80064e8 <puts>
 8001392:	e002      	b.n	800139a <bno055_writeData+0x17e>
    return;
 8001394:	bf00      	nop
 8001396:	e000      	b.n	800139a <bno055_writeData+0x17e>
    return;
 8001398:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000098 	.word	0x20000098
 80013a4:	08007808 	.word	0x08007808
 80013a8:	0800782c 	.word	0x0800782c
 80013ac:	08007854 	.word	0x08007854
 80013b0:	08007878 	.word	0x08007878
 80013b4:	08007890 	.word	0x08007890
 80013b8:	080078a4 	.word	0x080078a4
 80013bc:	080078b8 	.word	0x080078b8
 80013c0:	080078cc 	.word	0x080078cc
 80013c4:	080078e0 	.word	0x080078e0
 80013c8:	080078f4 	.word	0x080078f4
 80013cc:	0800790c 	.word	0x0800790c
 80013d0:	08007924 	.word	0x08007924
 80013d4:	08007938 	.word	0x08007938
 80013d8:	08007950 	.word	0x08007950
 80013dc:	08007968 	.word	0x08007968
 80013e0:	08007980 	.word	0x08007980
 80013e4:	080079a0 	.word	0x080079a0
 80013e8:	080079c0 	.word	0x080079c0
 80013ec:	080079d8 	.word	0x080079d8
 80013f0:	080079f0 	.word	0x080079f0

080013f4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	4613      	mov	r3, r2
 8001402:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <bno055_readData+0x40>)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	1dfa      	adds	r2, r7, #7
 800140a:	2364      	movs	r3, #100	; 0x64
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	2150      	movs	r1, #80	; 0x50
 8001412:	f001 f9ed 	bl	80027f0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <bno055_readData+0x40>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	b29b      	uxth	r3, r3
 800141e:	2264      	movs	r2, #100	; 0x64
 8001420:	9200      	str	r2, [sp, #0]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	2150      	movs	r1, #80	; 0x50
 8001426:	f001 fad7 	bl	80029d8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000098 	.word	0x20000098

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	b097      	sub	sp, #92	; 0x5c
 800143c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t MSG[7] = {'h', 'e', 'l', 'l', 'o', '\r', '\n'};
 800143e:	4a71      	ldr	r2, [pc, #452]	; (8001604 <main+0x1cc>)
 8001440:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001448:	6018      	str	r0, [r3, #0]
 800144a:	3304      	adds	r3, #4
 800144c:	8019      	strh	r1, [r3, #0]
 800144e:	3302      	adds	r3, #2
 8001450:	0c0a      	lsrs	r2, r1, #16
 8001452:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[35] = {'\0'};
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
 8001458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145c:	221f      	movs	r2, #31
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f004 ffb3 	bl	80063cc <memset>
	  uint8_t X = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f000 fd43 	bl	8001ef6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f8d6 	bl	8001620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 f9d2 	bl	800181c <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001478:	f000 f9a2 	bl	80017c0 <MX_USB_OTG_FS_PCD_Init>
  MX_LPUART1_UART_Init();
 800147c:	f000 f974 	bl	8001768 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001480:	f000 f932 	bl	80016e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8001484:	4860      	ldr	r0, [pc, #384]	; (8001608 <main+0x1d0>)
 8001486:	f7ff fead 	bl	80011e4 <bno055_assignI2C>
	bno055_setup();
 800148a:	f7ff fcb9 	bl	8000e00 <bno055_setup>
	bno055_setOperationModeNDOF();
 800148e:	f7ff fca4 	bl	8000dda <bno055_setOperationModeNDOF>
  for (int i=0; i<200; i++)
 8001492:	2300      	movs	r3, #0
 8001494:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001496:	e007      	b.n	80014a8 <main+0x70>
   {
     data[i] = 'i';
 8001498:	4a5c      	ldr	r2, [pc, #368]	; (800160c <main+0x1d4>)
 800149a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149c:	4413      	add	r3, r2
 800149e:	2269      	movs	r2, #105	; 0x69
 80014a0:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<200; i++)
 80014a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a4:	3301      	adds	r3, #1
 80014a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014aa:	2bc7      	cmp	r3, #199	; 0xc7
 80014ac:	ddf4      	ble.n	8001498 <main+0x60>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOB, LD2_Blue_Pin);
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	4857      	ldr	r0, [pc, #348]	; (8001610 <main+0x1d8>)
 80014b2:	f001 f8f3 	bl	800269c <HAL_GPIO_TogglePin>
			  myprintf("Hello\n");
		  else
			  myprintf("you typed '%c'\n",i);
	  }*/

	  bno055_vector_t v = bno055_getVectorEuler();
 80014b6:	f7ff fe0f 	bl	80010d8 <bno055_getVectorEuler>
 80014ba:	eeb0 4a40 	vmov.f32	s8, s0
 80014be:	eef0 4a60 	vmov.f32	s9, s1
 80014c2:	eeb0 5a41 	vmov.f32	s10, s2
 80014c6:	eef0 5a61 	vmov.f32	s11, s3
 80014ca:	eeb0 6a42 	vmov.f32	s12, s4
 80014ce:	eef0 6a62 	vmov.f32	s13, s5
 80014d2:	eeb0 7a43 	vmov.f32	s14, s6
 80014d6:	eef0 7a63 	vmov.f32	s15, s7
 80014da:	ed87 4b00 	vstr	d4, [r7]
 80014de:	ed87 5b02 	vstr	d5, [r7, #8]
 80014e2:	ed87 6b04 	vstr	d6, [r7, #16]
 80014e6:	ed87 7b06 	vstr	d7, [r7, #24]
	  myprintf("Heading: %d Roll: %d Pitch: %d\r\n", (int)(v.x * 100), (int)(v.y * 100), (int)(v.z * 100));
 80014ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	4b48      	ldr	r3, [pc, #288]	; (8001614 <main+0x1dc>)
 80014f4:	f7ff f888 	bl	8000608 <__aeabi_dmul>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fa94 	bl	8000a2c <__aeabi_d2iz>
 8001504:	4604      	mov	r4, r0
 8001506:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b41      	ldr	r3, [pc, #260]	; (8001614 <main+0x1dc>)
 8001510:	f7ff f87a 	bl	8000608 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fa86 	bl	8000a2c <__aeabi_d2iz>
 8001520:	4605      	mov	r5, r0
 8001522:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <main+0x1dc>)
 800152c:	f7ff f86c 	bl	8000608 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fa78 	bl	8000a2c <__aeabi_d2iz>
 800153c:	4603      	mov	r3, r0
 800153e:	462a      	mov	r2, r5
 8001540:	4621      	mov	r1, r4
 8001542:	4835      	ldr	r0, [pc, #212]	; (8001618 <main+0x1e0>)
 8001544:	f000 fa14 	bl	8001970 <myprintf>
	  v = bno055_getVectorQuaternion();
 8001548:	f7ff fe09 	bl	800115e <bno055_getVectorQuaternion>
 800154c:	eeb0 4a40 	vmov.f32	s8, s0
 8001550:	eef0 4a60 	vmov.f32	s9, s1
 8001554:	eeb0 5a41 	vmov.f32	s10, s2
 8001558:	eef0 5a61 	vmov.f32	s11, s3
 800155c:	eeb0 6a42 	vmov.f32	s12, s4
 8001560:	eef0 6a62 	vmov.f32	s13, s5
 8001564:	eeb0 7a43 	vmov.f32	s14, s6
 8001568:	eef0 7a63 	vmov.f32	s15, s7
 800156c:	ed87 4b00 	vstr	d4, [r7]
 8001570:	ed87 5b02 	vstr	d5, [r7, #8]
 8001574:	ed87 6b04 	vstr	d6, [r7, #16]
 8001578:	ed87 7b06 	vstr	d7, [r7, #24]
	  myprintf("W: %d X: %d Y: %d Z: %d\r\n", (int)(v.w * 100), (int)(v.x * 100), (int)(v.y * 100), (int)(v.z * 100));
 800157c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <main+0x1dc>)
 8001586:	f7ff f83f 	bl	8000608 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fa4b 	bl	8000a2c <__aeabi_d2iz>
 8001596:	4604      	mov	r4, r0
 8001598:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <main+0x1dc>)
 80015a2:	f7ff f831 	bl	8000608 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fa3d 	bl	8000a2c <__aeabi_d2iz>
 80015b2:	4605      	mov	r5, r0
 80015b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <main+0x1dc>)
 80015be:	f7ff f823 	bl	8000608 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa2f 	bl	8000a2c <__aeabi_d2iz>
 80015ce:	4606      	mov	r6, r0
 80015d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <main+0x1dc>)
 80015da:	f7ff f815 	bl	8000608 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fa21 	bl	8000a2c <__aeabi_d2iz>
 80015ea:	4603      	mov	r3, r0
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4633      	mov	r3, r6
 80015f0:	462a      	mov	r2, r5
 80015f2:	4621      	mov	r1, r4
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <main+0x1e4>)
 80015f6:	f000 f9bb 	bl	8001970 <myprintf>
	  HAL_Delay(100);
 80015fa:	2064      	movs	r0, #100	; 0x64
 80015fc:	f000 fcf0 	bl	8001fe0 <HAL_Delay>
  {
 8001600:	e755      	b.n	80014ae <main+0x76>
 8001602:	bf00      	nop
 8001604:	08007a48 	.word	0x08007a48
 8001608:	2000009c 	.word	0x2000009c
 800160c:	20000680 	.word	0x20000680
 8001610:	48000400 	.word	0x48000400
 8001614:	40590000 	.word	0x40590000
 8001618:	08007a08 	.word	0x08007a08
 800161c:	08007a2c 	.word	0x08007a2c

08001620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b096      	sub	sp, #88	; 0x58
 8001624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	2244      	movs	r2, #68	; 0x44
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fecc 	bl	80063cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001642:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001646:	f001 ff4d 	bl	80034e4 <HAL_PWREx_ControlVoltageScaling>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001650:	f000 f9c4 	bl	80019dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001654:	f001 ff28 	bl	80034a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <SystemClock_Config+0xc4>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <SystemClock_Config+0xc4>)
 8001660:	f023 0318 	bic.w	r3, r3, #24
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001668:	2314      	movs	r3, #20
 800166a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800166c:	2301      	movs	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001670:	2301      	movs	r3, #1
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001678:	2360      	movs	r3, #96	; 0x60
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001680:	2301      	movs	r3, #1
 8001682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001684:	2301      	movs	r3, #1
 8001686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001688:	2310      	movs	r3, #16
 800168a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168c:	2302      	movs	r3, #2
 800168e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001690:	2302      	movs	r3, #2
 8001692:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001694:	2302      	movs	r3, #2
 8001696:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4618      	mov	r0, r3
 800169e:	f001 ff97 	bl	80035d0 <HAL_RCC_OscConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80016a8:	f000 f998 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ac:	230f      	movs	r3, #15
 80016ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b0:	2303      	movs	r3, #3
 80016b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016c2:	463b      	mov	r3, r7
 80016c4:	2101      	movs	r1, #1
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fb9c 	bl	8003e04 <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80016d2:	f000 f983 	bl	80019dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016d6:	f003 f8b5 	bl	8004844 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016da:	bf00      	nop
 80016dc:	3758      	adds	r7, #88	; 0x58
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000

080016e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_I2C1_Init+0x74>)
 80016ee:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <MX_I2C1_Init+0x78>)
 80016f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_I2C1_Init+0x74>)
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <MX_I2C1_Init+0x7c>)
 80016f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_I2C1_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_I2C1_Init+0x74>)
 8001700:	2201      	movs	r2, #1
 8001702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_I2C1_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_I2C1_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_I2C1_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_I2C1_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_I2C1_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001722:	480e      	ldr	r0, [pc, #56]	; (800175c <MX_I2C1_Init+0x74>)
 8001724:	f000 ffd4 	bl	80026d0 <HAL_I2C_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800172e:	f000 f955 	bl	80019dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001732:	2100      	movs	r1, #0
 8001734:	4809      	ldr	r0, [pc, #36]	; (800175c <MX_I2C1_Init+0x74>)
 8001736:	f001 fcd7 	bl	80030e8 <HAL_I2CEx_ConfigAnalogFilter>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001740:	f000 f94c 	bl	80019dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_I2C1_Init+0x74>)
 8001748:	f001 fd19 	bl	800317e <HAL_I2CEx_ConfigDigitalFilter>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001752:	f000 f943 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000009c 	.word	0x2000009c
 8001760:	40005400 	.word	0x40005400
 8001764:	00303d5b 	.word	0x00303d5b

08001768 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <MX_LPUART1_UART_Init+0x54>)
 8001770:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 8001774:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001778:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_LPUART1_UART_Init+0x50>)
 80017a6:	f003 fa2b 	bl	8004c00 <HAL_UART_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80017b0:	f000 f914 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200000f0 	.word	0x200000f0
 80017bc:	40008000 	.word	0x40008000

080017c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ce:	2206      	movs	r2, #6
 80017d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d4:	2202      	movs	r2, #2
 80017d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017da:	2202      	movs	r2, #2
 80017dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001804:	f001 fd07 	bl	8003216 <HAL_PCD_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800180e:	f000 f8e5 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000174 	.word	0x20000174

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <MX_GPIO_Init+0x120>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a41      	ldr	r2, [pc, #260]	; (800193c <MX_GPIO_Init+0x120>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <MX_GPIO_Init+0x120>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	4b3c      	ldr	r3, [pc, #240]	; (800193c <MX_GPIO_Init+0x120>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a3b      	ldr	r2, [pc, #236]	; (800193c <MX_GPIO_Init+0x120>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <MX_GPIO_Init+0x120>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b36      	ldr	r3, [pc, #216]	; (800193c <MX_GPIO_Init+0x120>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a35      	ldr	r2, [pc, #212]	; (800193c <MX_GPIO_Init+0x120>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <MX_GPIO_Init+0x120>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <MX_GPIO_Init+0x120>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a2f      	ldr	r2, [pc, #188]	; (800193c <MX_GPIO_Init+0x120>)
 8001880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_GPIO_Init+0x120>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001892:	f001 fe8d 	bl	80035b0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <MX_GPIO_Init+0x120>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a28      	ldr	r2, [pc, #160]	; (800193c <MX_GPIO_Init+0x120>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_GPIO_Init+0x120>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80018b4:	4822      	ldr	r0, [pc, #136]	; (8001940 <MX_GPIO_Init+0x124>)
 80018b6:	f000 fed9 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2140      	movs	r1, #64	; 0x40
 80018be:	4821      	ldr	r0, [pc, #132]	; (8001944 <MX_GPIO_Init+0x128>)
 80018c0:	f000 fed4 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	481b      	ldr	r0, [pc, #108]	; (8001948 <MX_GPIO_Init+0x12c>)
 80018dc:	f000 fd34 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Blue_Pin;
 80018e0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <MX_GPIO_Init+0x124>)
 80018fa:	f000 fd25 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018fe:	2320      	movs	r3, #32
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_GPIO_Init+0x128>)
 8001912:	f000 fd19 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001916:	2340      	movs	r3, #64	; 0x40
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_GPIO_Init+0x128>)
 800192e:	f000 fd0b 	bl	8002348 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	48000400 	.word	0x48000400
 8001944:	48001800 	.word	0x48001800
 8001948:	48000800 	.word	0x48000800

0800194c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001954:	1d39      	adds	r1, r7, #4
 8001956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195a:	2201      	movs	r2, #1
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <__io_putchar+0x20>)
 800195e:	f003 f99d 	bl	8004c9c <HAL_UART_Transmit>

  return ch;
 8001962:	687b      	ldr	r3, [r7, #4]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200000f0 	.word	0x200000f0

08001970 <myprintf>:
void mywrite (unsigned char *st, int nby)
{
   if (nby) HAL_UART_Transmit(&hlpuart1,st,nby,10);
}
void myprintf (const char *fmt, ...)
{
 8001970:	b40f      	push	{r0, r1, r2, r3}
 8001972:	b580      	push	{r7, lr}
 8001974:	b0c2      	sub	sp, #264	; 0x108
 8001976:	af00      	add	r7, sp, #0
   va_list arglist;
   int nby;
   unsigned char st[256];

   if (!fmt) return;
 8001978:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800197c:	2b00      	cmp	r3, #0
 800197e:	d022      	beq.n	80019c6 <myprintf+0x56>
   va_start(arglist,fmt);
 8001980:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001984:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   nby = vsnprintf((char *)st,sizeof(st),fmt,arglist);
 8001988:	4638      	mov	r0, r7
 800198a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800198e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001996:	f004 fddb 	bl	8006550 <vsniprintf>
 800199a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   va_end(arglist);
   if (nby < 0) { nby = sizeof(st)-1; } //print truncated string in case too long
 800199e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da02      	bge.n	80019ac <myprintf+0x3c>
 80019a6:	23ff      	movs	r3, #255	; 0xff
 80019a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   if (nby) HAL_UART_Transmit(&hlpuart1,st,nby,10);
 80019ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <myprintf+0x58>
 80019b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4639      	mov	r1, r7
 80019bc:	230a      	movs	r3, #10
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <myprintf+0x68>)
 80019c0:	f003 f96c 	bl	8004c9c <HAL_UART_Transmit>
 80019c4:	e000      	b.n	80019c8 <myprintf+0x58>
   if (!fmt) return;
 80019c6:	bf00      	nop
}
 80019c8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80019cc:	46bd      	mov	sp, r7
 80019ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019d2:	b004      	add	sp, #16
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200000f0 	.word	0x200000f0

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_MspInit+0x44>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_MspInit+0x44>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6613      	str	r3, [r2, #96]	; 0x60
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_MspInit+0x44>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_MspInit+0x44>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <HAL_MspInit+0x44>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6593      	str	r3, [r2, #88]	; 0x58
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_MspInit+0x44>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0ac      	sub	sp, #176	; 0xb0
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	228c      	movs	r2, #140	; 0x8c
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fcbb 	bl	80063cc <memset>
  if(hi2c->Instance==I2C1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <HAL_I2C_MspInit+0xb0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d13b      	bne.n	8001ad8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a60:	2340      	movs	r3, #64	; 0x40
 8001a62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fbed 	bl	800424c <HAL_RCCEx_PeriphCLKConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a78:	f7ff ffb0 	bl	80019dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9c:	2312      	movs	r3, #18
 8001a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001abc:	f000 fc44 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ad8:	bf00      	nop
 8001ada:	37b0      	adds	r7, #176	; 0xb0
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	48000400 	.word	0x48000400

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b0ac      	sub	sp, #176	; 0xb0
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	228c      	movs	r2, #140	; 0x8c
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 fc5d 	bl	80063cc <memset>
  if(huart->Instance==LPUART1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <HAL_UART_MspInit+0xc4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d145      	bne.n	8001ba8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 fb8f 	bl	800424c <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b34:	f7ff ff52 	bl	80019dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_UART_MspInit+0xc8>)
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_UART_MspInit+0xc8>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_UART_MspInit+0xc8>)
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_UART_MspInit+0xc8>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_UART_MspInit+0xc8>)
 8001b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_UART_MspInit+0xc8>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001b68:	f001 fd22 	bl	80035b0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b86:	2308      	movs	r3, #8
 8001b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b90:	4619      	mov	r1, r3
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <HAL_UART_MspInit+0xcc>)
 8001b94:	f000 fbd8 	bl	8002348 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2046      	movs	r0, #70	; 0x46
 8001b9e:	f000 fb1e 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001ba2:	2046      	movs	r0, #70	; 0x46
 8001ba4:	f000 fb37 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	37b0      	adds	r7, #176	; 0xb0
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40008000 	.word	0x40008000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48001800 	.word	0x48001800

08001bbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0ae      	sub	sp, #184	; 0xb8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	228c      	movs	r2, #140	; 0x8c
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 fbf5 	bl	80063cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bea:	d16b      	bne.n	8001cc4 <HAL_PCD_MspInit+0x108>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001bf2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001c02:	2318      	movs	r3, #24
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fb15 	bl	800424c <HAL_RCCEx_PeriphCLKConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001c28:	f7ff fed8 	bl	80019dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c44:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c5e:	230a      	movs	r3, #10
 8001c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6e:	f000 fb6b 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d114      	bne.n	8001cc0 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001cae:	f001 fc6f 	bl	8003590 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cbe:	e001      	b.n	8001cc4 <HAL_PCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8001cc0:	f001 fc66 	bl	8003590 <HAL_PWREx_EnableVddUSB>
}
 8001cc4:	bf00      	nop
 8001cc6:	37b8      	adds	r7, #184	; 0xb8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <UsageFault_Handler+0x4>

08001cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1c:	f000 f940 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <LPUART1_IRQHandler+0x10>)
 8001d2a:	f003 f84b 	bl	8004dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000f0 	.word	0x200000f0

08001d38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e00a      	b.n	8001d60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d4a:	f3af 8000 	nop.w
 8001d4e:	4601      	mov	r1, r0
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60ba      	str	r2, [r7, #8]
 8001d56:	b2ca      	uxtb	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf0      	blt.n	8001d4a <_read+0x12>
  }

  return len;
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e009      	b.n	8001d98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fddd 	bl	800194c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dbf1      	blt.n	8001d84 <_write+0x12>
  }
  return len;
 8001da0:	687b      	ldr	r3, [r7, #4]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_close>:

int _close(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_isatty>:

int _isatty(int file)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e1c:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <_sbrk+0x5c>)
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <_sbrk+0x60>)
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <_sbrk+0x64>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <_sbrk+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d207      	bcs.n	8001e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e44:	f004 fa8a 	bl	800635c <__errno>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e52:	e009      	b.n	8001e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <_sbrk+0x64>)
 8001e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20050000 	.word	0x20050000
 8001e74:	00000400 	.word	0x00000400
 8001e78:	20000748 	.word	0x20000748
 8001e7c:	20000760 	.word	0x20000760

08001e80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <SystemInit+0x20>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <SystemInit+0x20>)
 8001e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001edc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea8:	f7ff ffea 	bl	8001e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eae:	490d      	ldr	r1, [pc, #52]	; (8001ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <LoopForever+0xe>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ec4:	4c0a      	ldr	r4, [pc, #40]	; (8001ef0 <LoopForever+0x16>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f004 fa49 	bl	8006368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ed6:	f7ff faaf 	bl	8001438 <main>

08001eda <LoopForever>:

LoopForever:
    b LoopForever
 8001eda:	e7fe      	b.n	8001eda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001edc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001ee8:	08007b40 	.word	0x08007b40
  ldr r2, =_sbss
 8001eec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ef0:	20000760 	.word	0x20000760

08001ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ef4:	e7fe      	b.n	8001ef4 <ADC1_2_IRQHandler>

08001ef6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f000 f961 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 f80e 	bl	8001f28 <HAL_InitTick>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	71fb      	strb	r3, [r7, #7]
 8001f16:	e001      	b.n	8001f1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f18:	f7ff fd66 	bl	80019e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_InitTick+0x6c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d023      	beq.n	8001f84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_InitTick+0x70>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_InitTick+0x6c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f96d 	bl	8002232 <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d809      	bhi.n	8001f78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f6c:	f000 f937 	bl	80021de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_InitTick+0x74>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e007      	b.n	8001f88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e004      	b.n	8001f88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e001      	b.n	8001f88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000014 	.word	0x20000014
 8001f98:	2000000c 	.word	0x2000000c
 8001f9c:	20000010 	.word	0x20000010

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000014 	.word	0x20000014
 8001fc4:	2000074c 	.word	0x2000074c

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2000074c 	.word	0x2000074c

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000014 	.word	0x20000014

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff29 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff3e 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff31 	bl	800208c <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d008      	beq.n	8002274 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2204      	movs	r2, #4
 8002266:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e022      	b.n	80022ba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 020e 	bic.w	r2, r2, #14
 8002282:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	f003 021c 	and.w	r2, r3, #28
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d005      	beq.n	80022ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2204      	movs	r2, #4
 80022e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	e029      	b.n	800233e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 020e 	bic.w	r2, r2, #14
 80022f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f003 021c 	and.w	r2, r3, #28
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
    }
  }
  return status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	e166      	b.n	8002626 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8158 	beq.w	8002620 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d005      	beq.n	8002388 <HAL_GPIO_Init+0x40>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d130      	bne.n	80023ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023be:	2201      	movs	r2, #1
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 0201 	and.w	r2, r3, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d017      	beq.n	8002426 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d123      	bne.n	800247a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	6939      	ldr	r1, [r7, #16]
 8002476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0203 	and.w	r2, r3, #3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80b2 	beq.w	8002620 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_GPIO_Init+0x2fc>)
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	4a60      	ldr	r2, [pc, #384]	; (8002644 <HAL_GPIO_Init+0x2fc>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6613      	str	r3, [r2, #96]	; 0x60
 80024c8:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <HAL_GPIO_Init+0x2fc>)
 80024ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024d4:	4a5c      	ldr	r2, [pc, #368]	; (8002648 <HAL_GPIO_Init+0x300>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024fe:	d02b      	beq.n	8002558 <HAL_GPIO_Init+0x210>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a52      	ldr	r2, [pc, #328]	; (800264c <HAL_GPIO_Init+0x304>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d025      	beq.n	8002554 <HAL_GPIO_Init+0x20c>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a51      	ldr	r2, [pc, #324]	; (8002650 <HAL_GPIO_Init+0x308>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d01f      	beq.n	8002550 <HAL_GPIO_Init+0x208>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a50      	ldr	r2, [pc, #320]	; (8002654 <HAL_GPIO_Init+0x30c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d019      	beq.n	800254c <HAL_GPIO_Init+0x204>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a4f      	ldr	r2, [pc, #316]	; (8002658 <HAL_GPIO_Init+0x310>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_GPIO_Init+0x200>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a4e      	ldr	r2, [pc, #312]	; (800265c <HAL_GPIO_Init+0x314>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00d      	beq.n	8002544 <HAL_GPIO_Init+0x1fc>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a4d      	ldr	r2, [pc, #308]	; (8002660 <HAL_GPIO_Init+0x318>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <HAL_GPIO_Init+0x1f8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4c      	ldr	r2, [pc, #304]	; (8002664 <HAL_GPIO_Init+0x31c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d101      	bne.n	800253c <HAL_GPIO_Init+0x1f4>
 8002538:	2307      	movs	r3, #7
 800253a:	e00e      	b.n	800255a <HAL_GPIO_Init+0x212>
 800253c:	2308      	movs	r3, #8
 800253e:	e00c      	b.n	800255a <HAL_GPIO_Init+0x212>
 8002540:	2306      	movs	r3, #6
 8002542:	e00a      	b.n	800255a <HAL_GPIO_Init+0x212>
 8002544:	2305      	movs	r3, #5
 8002546:	e008      	b.n	800255a <HAL_GPIO_Init+0x212>
 8002548:	2304      	movs	r3, #4
 800254a:	e006      	b.n	800255a <HAL_GPIO_Init+0x212>
 800254c:	2303      	movs	r3, #3
 800254e:	e004      	b.n	800255a <HAL_GPIO_Init+0x212>
 8002550:	2302      	movs	r3, #2
 8002552:	e002      	b.n	800255a <HAL_GPIO_Init+0x212>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_GPIO_Init+0x212>
 8002558:	2300      	movs	r3, #0
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	f002 0203 	and.w	r2, r2, #3
 8002560:	0092      	lsls	r2, r2, #2
 8002562:	4093      	lsls	r3, r2
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800256a:	4937      	ldr	r1, [pc, #220]	; (8002648 <HAL_GPIO_Init+0x300>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_GPIO_Init+0x320>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800259c:	4a32      	ldr	r2, [pc, #200]	; (8002668 <HAL_GPIO_Init+0x320>)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_GPIO_Init+0x320>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025c6:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_GPIO_Init+0x320>)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_GPIO_Init+0x320>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025f0:	4a1d      	ldr	r2, [pc, #116]	; (8002668 <HAL_GPIO_Init+0x320>)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_GPIO_Init+0x320>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_GPIO_Init+0x320>)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3301      	adds	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f ae91 	bne.w	8002358 <HAL_GPIO_Init+0x10>
  }
}
 8002636:	bf00      	nop
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40021000 	.word	0x40021000
 8002648:	40010000 	.word	0x40010000
 800264c:	48000400 	.word	0x48000400
 8002650:	48000800 	.word	0x48000800
 8002654:	48000c00 	.word	0x48000c00
 8002658:	48001000 	.word	0x48001000
 800265c:	48001400 	.word	0x48001400
 8002660:	48001800 	.word	0x48001800
 8002664:	48001c00 	.word	0x48001c00
 8002668:	40010400 	.word	0x40010400

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002688:	e002      	b.n	8002690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4013      	ands	r3, r2
 80026b4:	041a      	lsls	r2, r3, #16
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43d9      	mvns	r1, r3
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	400b      	ands	r3, r1
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e081      	b.n	80027e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff f99a 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	; 0x24
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002720:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002730:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	e006      	b.n	8002758 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002756:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d104      	bne.n	800276a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002768:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800278c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69d9      	ldr	r1, [r3, #28]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	461a      	mov	r2, r3
 80027fc:	460b      	mov	r3, r1
 80027fe:	817b      	strh	r3, [r7, #10]
 8002800:	4613      	mov	r3, r2
 8002802:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b20      	cmp	r3, #32
 800280e:	f040 80da 	bne.w	80029c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2C_Master_Transmit+0x30>
 800281c:	2302      	movs	r3, #2
 800281e:	e0d3      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x1d8>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002828:	f7ff fbce 	bl	8001fc8 <HAL_GetTick>
 800282c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	2319      	movs	r3, #25
 8002834:	2201      	movs	r2, #1
 8002836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 fa00 	bl	8002c40 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0be      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2221      	movs	r2, #33	; 0x21
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2210      	movs	r2, #16
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	893a      	ldrh	r2, [r7, #8]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2bff      	cmp	r3, #255	; 0xff
 800287a:	d90e      	bls.n	800289a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	22ff      	movs	r2, #255	; 0xff
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	b2da      	uxtb	r2, r3
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fbf6 	bl	8003084 <I2C_TransferConfig>
 8002898:	e06c      	b.n	8002974 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	4b48      	ldr	r3, [pc, #288]	; (80029d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fbe5 	bl	8003084 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028ba:	e05b      	b.n	8002974 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	6a39      	ldr	r1, [r7, #32]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f9fd 	bl	8002cc0 <I2C_WaitOnTXISFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e07b      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	781a      	ldrb	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d034      	beq.n	8002974 <HAL_I2C_Master_Transmit+0x184>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d130      	bne.n	8002974 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2200      	movs	r2, #0
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f98f 	bl	8002c40 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e04d      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2bff      	cmp	r3, #255	; 0xff
 8002934:	d90e      	bls.n	8002954 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	22ff      	movs	r2, #255	; 0xff
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	b2da      	uxtb	r2, r3
 8002942:	8979      	ldrh	r1, [r7, #10]
 8002944:	2300      	movs	r3, #0
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fb99 	bl	8003084 <I2C_TransferConfig>
 8002952:	e00f      	b.n	8002974 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	b2da      	uxtb	r2, r3
 8002964:	8979      	ldrh	r1, [r7, #10]
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fb88 	bl	8003084 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d19e      	bne.n	80028bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	6a39      	ldr	r1, [r7, #32]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f9dc 	bl	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01a      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80029a6:	400b      	ands	r3, r1
 80029a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	80002000 	.word	0x80002000
 80029d4:	fe00e800 	.word	0xfe00e800

080029d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	461a      	mov	r2, r3
 80029e4:	460b      	mov	r3, r1
 80029e6:	817b      	strh	r3, [r7, #10]
 80029e8:	4613      	mov	r3, r2
 80029ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	f040 80db 	bne.w	8002bb0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_I2C_Master_Receive+0x30>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e0d4      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x1da>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a10:	f7ff fada 	bl	8001fc8 <HAL_GetTick>
 8002a14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2319      	movs	r3, #25
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f90c 	bl	8002c40 <I2C_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0bf      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2222      	movs	r2, #34	; 0x22
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	893a      	ldrh	r2, [r7, #8]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2bff      	cmp	r3, #255	; 0xff
 8002a62:	d90e      	bls.n	8002a82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	22ff      	movs	r2, #255	; 0xff
 8002a68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	8979      	ldrh	r1, [r7, #10]
 8002a72:	4b52      	ldr	r3, [pc, #328]	; (8002bbc <HAL_I2C_Master_Receive+0x1e4>)
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fb02 	bl	8003084 <I2C_TransferConfig>
 8002a80:	e06d      	b.n	8002b5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_I2C_Master_Receive+0x1e4>)
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 faf1 	bl	8003084 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002aa2:	e05c      	b.n	8002b5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	6a39      	ldr	r1, [r7, #32]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f985 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e07c      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d034      	beq.n	8002b5e <HAL_I2C_Master_Receive+0x186>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d130      	bne.n	8002b5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	2200      	movs	r2, #0
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f89a 	bl	8002c40 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e04d      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2bff      	cmp	r3, #255	; 0xff
 8002b1e:	d90e      	bls.n	8002b3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	22ff      	movs	r2, #255	; 0xff
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	8979      	ldrh	r1, [r7, #10]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 faa4 	bl	8003084 <I2C_TransferConfig>
 8002b3c:	e00f      	b.n	8002b5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	8979      	ldrh	r1, [r7, #10]
 8002b50:	2300      	movs	r3, #0
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fa93 	bl	8003084 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d19d      	bne.n	8002aa4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	6a39      	ldr	r1, [r7, #32]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f8e7 	bl	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e01a      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2220      	movs	r2, #32
 8002b82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_I2C_Master_Receive+0x1e8>)
 8002b90:	400b      	ands	r3, r1
 8002b92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	80002400 	.word	0x80002400
 8002bc0:	fe00e800 	.word	0xfe00e800

08002bc4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd2:	b2db      	uxtb	r3, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d103      	bne.n	8002c16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2200      	movs	r2, #0
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d007      	beq.n	8002c34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	619a      	str	r2, [r3, #24]
  }
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c50:	e022      	b.n	8002c98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c58:	d01e      	beq.n	8002c98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7ff f9b5 	bl	8001fc8 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d113      	bne.n	8002c98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f043 0220 	orr.w	r2, r3, #32
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e00f      	b.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d0cd      	beq.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ccc:	e02c      	b.n	8002d28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f8ea 	bl	8002eac <I2C_IsErrorOccurred>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e02a      	b.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce8:	d01e      	beq.n	8002d28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cea:	f7ff f96d 	bl	8001fc8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d113      	bne.n	8002d28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e007      	b.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d1cb      	bne.n	8002cce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d4c:	e028      	b.n	8002da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f8aa 	bl	8002eac <I2C_IsErrorOccurred>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e026      	b.n	8002db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7ff f931 	bl	8001fc8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d113      	bne.n	8002da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	f043 0220 	orr.w	r2, r3, #32
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e007      	b.n	8002db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d1cf      	bne.n	8002d4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dc4:	e064      	b.n	8002e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f86e 	bl	8002eac <I2C_IsErrorOccurred>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e062      	b.n	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d138      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d105      	bne.n	8002e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e04e      	b.n	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d107      	bne.n	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2210      	movs	r2, #16
 8002e16:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
 8002e1e:	e002      	b.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e022      	b.n	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7ff f8b5 	bl	8001fc8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10f      	bne.n	8002e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d193      	bne.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	fe00e800 	.word	0xfe00e800

08002eac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d075      	beq.n	8002fc4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2210      	movs	r2, #16
 8002ede:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ee0:	e056      	b.n	8002f90 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee8:	d052      	beq.n	8002f90 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7ff f86d 	bl	8001fc8 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_IsErrorOccurred+0x54>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d147      	bne.n	8002f90 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f22:	d12e      	bne.n	8002f82 <I2C_IsErrorOccurred+0xd6>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f2a:	d02a      	beq.n	8002f82 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d027      	beq.n	8002f82 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f42:	f7ff f841 	bl	8001fc8 <HAL_GetTick>
 8002f46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f48:	e01b      	b.n	8002f82 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f4a:	f7ff f83d 	bl	8001fc8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b19      	cmp	r3, #25
 8002f56:	d914      	bls.n	8002f82 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d1dc      	bne.n	8002f4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d003      	beq.n	8002fa6 <I2C_IsErrorOccurred+0xfa>
 8002f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d09d      	beq.n	8002ee2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f043 0308 	orr.w	r3, r3, #8
 8002ffe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003008:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01c      	beq.n	8003074 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff fddc 	bl	8002bf8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <I2C_IsErrorOccurred+0x1d4>)
 800304c:	400b      	ands	r3, r1
 800304e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003078:	4618      	mov	r0, r3
 800307a:	3728      	adds	r7, #40	; 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	fe00e800 	.word	0xfe00e800

08003084 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	817b      	strh	r3, [r7, #10]
 8003092:	4613      	mov	r3, r2
 8003094:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800309c:	7a7b      	ldrb	r3, [r7, #9]
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	0d5b      	lsrs	r3, r3, #21
 80030be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <I2C_TransferConfig+0x60>)
 80030c4:	430b      	orrs	r3, r1
 80030c6:	43db      	mvns	r3, r3
 80030c8:	ea02 0103 	and.w	r1, r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	03ff63ff 	.word	0x03ff63ff

080030e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d138      	bne.n	8003170 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003108:	2302      	movs	r3, #2
 800310a:	e032      	b.n	8003172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800313a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800317e:	b480      	push	{r7}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	d139      	bne.n	8003208 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800319e:	2302      	movs	r3, #2
 80031a0:	e033      	b.n	800320a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2224      	movs	r2, #36	; 0x24
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003218:	b08f      	sub	sp, #60	; 0x3c
 800321a:	af0a      	add	r7, sp, #40	; 0x28
 800321c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e116      	b.n	8003456 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fe fcba 	bl	8001bbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2203      	movs	r2, #3
 800324c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f002 fdee 	bl	8005e48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	687e      	ldr	r6, [r7, #4]
 8003274:	466d      	mov	r5, sp
 8003276:	f106 0410 	add.w	r4, r6, #16
 800327a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003282:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003286:	e885 0003 	stmia.w	r5, {r0, r1}
 800328a:	1d33      	adds	r3, r6, #4
 800328c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800328e:	6838      	ldr	r0, [r7, #0]
 8003290:	f002 fdae 	bl	8005df0 <USB_CoreInit>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0d7      	b.n	8003456 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 fddc 	bl	8005e6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
 80032b6:	e04a      	b.n	800334e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	333d      	adds	r3, #61	; 0x3d
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	333c      	adds	r3, #60	; 0x3c
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	b298      	uxth	r0, r3
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	3344      	adds	r3, #68	; 0x44
 80032f4:	4602      	mov	r2, r0
 80032f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	3340      	adds	r3, #64	; 0x40
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	3348      	adds	r3, #72	; 0x48
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	334c      	adds	r3, #76	; 0x4c
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3354      	adds	r3, #84	; 0x54
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	3301      	adds	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d3af      	bcc.n	80032b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003358:	2300      	movs	r3, #0
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e044      	b.n	80033e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800335e:	7bfa      	ldrb	r2, [r7, #15]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	3301      	adds	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d3b5      	bcc.n	800335e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	687e      	ldr	r6, [r7, #4]
 80033fa:	466d      	mov	r5, sp
 80033fc:	f106 0410 	add.w	r4, r6, #16
 8003400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003408:	e894 0003 	ldmia.w	r4, {r0, r1}
 800340c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003410:	1d33      	adds	r3, r6, #4
 8003412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003414:	6838      	ldr	r0, [r7, #0]
 8003416:	f002 fd75 	bl	8005f04 <USB_DevInit>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e014      	b.n	8003456 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f80a 	bl	800345e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f002 ff21 	bl	8006296 <USB_DevDisconnect>

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800345e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	f043 0303 	orr.w	r3, r3, #3
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	6013      	str	r3, [r2, #0]
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40007000 	.word	0x40007000

080034c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40007000 	.word	0x40007000

080034e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f2:	d130      	bne.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d038      	beq.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003510:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2232      	movs	r2, #50	; 0x32
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9b      	lsrs	r3, r3, #18
 8003524:	3301      	adds	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003528:	e002      	b.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b01      	subs	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353c:	d102      	bne.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x60>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f2      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003550:	d110      	bne.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e00f      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	d007      	beq.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003564:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800356c:	4a05      	ldr	r2, [pc, #20]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003572:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40007000 	.word	0x40007000
 8003588:	2000000c 	.word	0x2000000c
 800358c:	431bde83 	.word	0x431bde83

08003590 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800359a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800359e:	6053      	str	r3, [r2, #4]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40007000 	.word	0x40007000

080035b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80035ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035be:	6053      	str	r3, [r2, #4]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40007000 	.word	0x40007000

080035d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f000 bc08 	b.w	8003df4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e4:	4b96      	ldr	r3, [pc, #600]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ee:	4b94      	ldr	r3, [pc, #592]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80e4 	beq.w	80037ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_RCC_OscConfig+0x4c>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	f040 808b 	bne.w	800372a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b01      	cmp	r3, #1
 8003618:	f040 8087 	bne.w	800372a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800361c:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_OscConfig+0x64>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e3df      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	4b81      	ldr	r3, [pc, #516]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d004      	beq.n	800364e <HAL_RCC_OscConfig+0x7e>
 8003644:	4b7e      	ldr	r3, [pc, #504]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364c:	e005      	b.n	800365a <HAL_RCC_OscConfig+0x8a>
 800364e:	4b7c      	ldr	r3, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800365a:	4293      	cmp	r3, r2
 800365c:	d223      	bcs.n	80036a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fd92 	bl	800418c <RCC_SetFlashLatencyFromMSIRange>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e3c0      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003672:	4b73      	ldr	r3, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a72      	ldr	r2, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003678:	f043 0308 	orr.w	r3, r3, #8
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b70      	ldr	r3, [pc, #448]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	496d      	ldr	r1, [pc, #436]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003690:	4b6b      	ldr	r3, [pc, #428]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	4968      	ldr	r1, [pc, #416]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
 80036a4:	e025      	b.n	80036f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a6:	4b66      	ldr	r3, [pc, #408]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a65      	ldr	r2, [pc, #404]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036ac:	f043 0308 	orr.w	r3, r3, #8
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b63      	ldr	r3, [pc, #396]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4960      	ldr	r1, [pc, #384]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c4:	4b5e      	ldr	r3, [pc, #376]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	495b      	ldr	r1, [pc, #364]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fd52 	bl	800418c <RCC_SetFlashLatencyFromMSIRange>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e380      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036f2:	f000 fc87 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 80036f6:	4602      	mov	r2, r0
 80036f8:	4b51      	ldr	r3, [pc, #324]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	4950      	ldr	r1, [pc, #320]	; (8003844 <HAL_RCC_OscConfig+0x274>)
 8003704:	5ccb      	ldrb	r3, [r1, r3]
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	fa22 f303 	lsr.w	r3, r2, r3
 800370e:	4a4e      	ldr	r2, [pc, #312]	; (8003848 <HAL_RCC_OscConfig+0x278>)
 8003710:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003712:	4b4e      	ldr	r3, [pc, #312]	; (800384c <HAL_RCC_OscConfig+0x27c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fc06 	bl	8001f28 <HAL_InitTick>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d052      	beq.n	80037cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	e364      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d032      	beq.n	8003798 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a42      	ldr	r2, [pc, #264]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800373e:	f7fe fc43 	bl	8001fc8 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003746:	f7fe fc3f 	bl	8001fc8 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e34d      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a35      	ldr	r2, [pc, #212]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800376a:	f043 0308 	orr.w	r3, r3, #8
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b33      	ldr	r3, [pc, #204]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4930      	ldr	r1, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003782:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	492b      	ldr	r1, [pc, #172]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
 8003796:	e01a      	b.n	80037ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003798:	4b29      	ldr	r3, [pc, #164]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a28      	ldr	r2, [pc, #160]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037a4:	f7fe fc10 	bl	8001fc8 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037ac:	f7fe fc0c 	bl	8001fc8 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e31a      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x1dc>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d073      	beq.n	80038c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d005      	beq.n	80037ec <HAL_RCC_OscConfig+0x21c>
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d10e      	bne.n	8003804 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b14      	ldr	r3, [pc, #80]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d063      	beq.n	80038c0 <HAL_RCC_OscConfig+0x2f0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d15f      	bne.n	80038c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e2f7      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x24c>
 800380e:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e025      	b.n	8003868 <HAL_RCC_OscConfig+0x298>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d114      	bne.n	8003850 <HAL_RCC_OscConfig+0x280>
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a05      	ldr	r2, [pc, #20]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a02      	ldr	r2, [pc, #8]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e013      	b.n	8003868 <HAL_RCC_OscConfig+0x298>
 8003840:	40021000 	.word	0x40021000
 8003844:	08007a50 	.word	0x08007a50
 8003848:	2000000c 	.word	0x2000000c
 800384c:	20000010 	.word	0x20000010
 8003850:	4ba0      	ldr	r3, [pc, #640]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a9f      	ldr	r2, [pc, #636]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b9d      	ldr	r3, [pc, #628]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a9c      	ldr	r2, [pc, #624]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d013      	beq.n	8003898 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe fbaa 	bl	8001fc8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe fba6 	bl	8001fc8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e2b4      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388a:	4b92      	ldr	r3, [pc, #584]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x2a8>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe fb96 	bl	8001fc8 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7fe fb92 	bl	8001fc8 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e2a0      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b2:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x2d0>
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d060      	beq.n	8003990 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_OscConfig+0x310>
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d119      	bne.n	800390e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d116      	bne.n	800390e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e0:	4b7c      	ldr	r3, [pc, #496]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_OscConfig+0x328>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e27d      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f8:	4b76      	ldr	r3, [pc, #472]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	4973      	ldr	r1, [pc, #460]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800390c:	e040      	b.n	8003990 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d023      	beq.n	800395e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003916:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fe fb51 	bl	8001fc8 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392a:	f7fe fb4d 	bl	8001fc8 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e25b      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800393c:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003948:	4b62      	ldr	r3, [pc, #392]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	495f      	ldr	r1, [pc, #380]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
 800395c:	e018      	b.n	8003990 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395e:	4b5d      	ldr	r3, [pc, #372]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5c      	ldr	r2, [pc, #368]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7fe fb2d 	bl	8001fc8 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003972:	f7fe fb29 	bl	8001fc8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e237      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d03c      	beq.n	8003a16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01c      	beq.n	80039de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a4:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039aa:	4a4a      	ldr	r2, [pc, #296]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fe fb08 	bl	8001fc8 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fe fb04 	bl	8001fc8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e212      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ef      	beq.n	80039bc <HAL_RCC_OscConfig+0x3ec>
 80039dc:	e01b      	b.n	8003a16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e4:	4a3b      	ldr	r2, [pc, #236]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7fe faeb 	bl	8001fc8 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f6:	f7fe fae7 	bl	8001fc8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1f5      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a08:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ef      	bne.n	80039f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80a6 	beq.w	8003b70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a24:	2300      	movs	r3, #0
 8003a26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <HAL_RCC_OscConfig+0x508>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d118      	bne.n	8003a8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <HAL_RCC_OscConfig+0x508>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_RCC_OscConfig+0x508>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a68:	f7fe faae 	bl	8001fc8 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a70:	f7fe faaa 	bl	8001fc8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e1b8      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <HAL_RCC_OscConfig+0x508>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d108      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4d8>
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa6:	e029      	b.n	8003afc <HAL_RCC_OscConfig+0x52c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d115      	bne.n	8003adc <HAL_RCC_OscConfig+0x50c>
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad0:	e014      	b.n	8003afc <HAL_RCC_OscConfig+0x52c>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	4b9d      	ldr	r3, [pc, #628]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	4a9c      	ldr	r2, [pc, #624]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aec:	4b99      	ldr	r3, [pc, #612]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	4a98      	ldr	r2, [pc, #608]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003af4:	f023 0304 	bic.w	r3, r3, #4
 8003af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d016      	beq.n	8003b32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fe fa60 	bl	8001fc8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fa5c 	bl	8001fc8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e168      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b22:	4b8c      	ldr	r3, [pc, #560]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ed      	beq.n	8003b0c <HAL_RCC_OscConfig+0x53c>
 8003b30:	e015      	b.n	8003b5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fe fa49 	bl	8001fc8 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fe fa45 	bl	8001fc8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e151      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b50:	4b80      	ldr	r3, [pc, #512]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ed      	bne.n	8003b3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5e:	7ffb      	ldrb	r3, [r7, #31]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b64:	4b7b      	ldr	r3, [pc, #492]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	4a7a      	ldr	r2, [pc, #488]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d03c      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b84:	4b73      	ldr	r3, [pc, #460]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8a:	4a72      	ldr	r2, [pc, #456]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe fa18 	bl	8001fc8 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b9c:	f7fe fa14 	bl	8001fc8 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e122      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bae:	4b69      	ldr	r3, [pc, #420]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ef      	beq.n	8003b9c <HAL_RCC_OscConfig+0x5cc>
 8003bbc:	e01b      	b.n	8003bf6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bbe:	4b65      	ldr	r3, [pc, #404]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc4:	4a63      	ldr	r2, [pc, #396]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fe f9fb 	bl	8001fc8 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd6:	f7fe f9f7 	bl	8001fc8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e105      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be8:	4b5a      	ldr	r3, [pc, #360]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ef      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80f9 	beq.w	8003df2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	f040 80cf 	bne.w	8003da8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c0a:	4b52      	ldr	r3, [pc, #328]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0203 	and.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d12c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d123      	bne.n	8003c78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d11b      	bne.n	8003c78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d113      	bne.n	8003c78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d109      	bne.n	8003c78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	3b01      	subs	r3, #1
 8003c72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d071      	beq.n	8003d5c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d068      	beq.n	8003d50 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c7e:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d105      	bne.n	8003c96 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c8a:	4b32      	ldr	r3, [pc, #200]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0ac      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2d      	ldr	r2, [pc, #180]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca6:	f7fe f98f 	bl	8001fc8 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cae:	f7fe f98b 	bl	8001fc8 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e099      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc0:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ccc:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <HAL_RCC_OscConfig+0x788>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce6:	0212      	lsls	r2, r2, #8
 8003ce8:	4311      	orrs	r1, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cee:	0852      	lsrs	r2, r2, #1
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	0552      	lsls	r2, r2, #21
 8003cf4:	4311      	orrs	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cfa:	0852      	lsrs	r2, r2, #1
 8003cfc:	3a01      	subs	r2, #1
 8003cfe:	0652      	lsls	r2, r2, #25
 8003d00:	4311      	orrs	r1, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d06:	06d2      	lsls	r2, r2, #27
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	4912      	ldr	r1, [pc, #72]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d10:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0f      	ldr	r2, [pc, #60]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d28:	f7fe f94e 	bl	8001fc8 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe f94a 	bl	8001fc8 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e058      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d4e:	e050      	b.n	8003df2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e04f      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
 8003d54:	40021000 	.word	0x40021000
 8003d58:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5c:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d144      	bne.n	8003df2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a23      	ldr	r2, [pc, #140]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a20      	ldr	r2, [pc, #128]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d80:	f7fe f922 	bl	8001fc8 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fe f91e 	bl	8001fc8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e02c      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9a:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x7b8>
 8003da6:	e024      	b.n	8003df2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d01f      	beq.n	8003dee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fe f905 	bl	8001fc8 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fe f901 	bl	8001fc8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e00f      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	4905      	ldr	r1, [pc, #20]	; (8003dfc <HAL_RCC_OscConfig+0x82c>)
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCC_OscConfig+0x830>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	60cb      	str	r3, [r1, #12]
 8003dec:	e001      	b.n	8003df2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	feeefffc 	.word	0xfeeefffc

08003e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0e7      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b75      	ldr	r3, [pc, #468]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d910      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b72      	ldr	r3, [pc, #456]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 0207 	bic.w	r2, r3, #7
 8003e2e:	4970      	ldr	r1, [pc, #448]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b6e      	ldr	r3, [pc, #440]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0cf      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b66      	ldr	r3, [pc, #408]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d908      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e64:	4b63      	ldr	r3, [pc, #396]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4960      	ldr	r1, [pc, #384]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04c      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8a:	4b5a      	ldr	r3, [pc, #360]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d121      	bne.n	8003eda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0a6      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea2:	4b54      	ldr	r3, [pc, #336]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d115      	bne.n	8003eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e09a      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eba:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e08e      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eca:	4b4a      	ldr	r3, [pc, #296]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e086      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eda:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4943      	ldr	r1, [pc, #268]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eec:	f7fe f86c 	bl	8001fc8 <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef4:	f7fe f868 	bl	8001fc8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e06e      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 020c 	and.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1eb      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d010      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d208      	bcs.n	8003f4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	492b      	ldr	r1, [pc, #172]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4a:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d210      	bcs.n	8003f7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 0207 	bic.w	r2, r3, #7
 8003f60:	4923      	ldr	r1, [pc, #140]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e036      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4918      	ldr	r1, [pc, #96]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4910      	ldr	r1, [pc, #64]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb8:	f000 f824 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	490b      	ldr	r1, [pc, #44]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd4:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003fd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1fc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd ffa3 	bl	8001f28 <HAL_InitTick>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08007a50 	.word	0x08007a50
 8003ffc:	2000000c 	.word	0x2000000c
 8004000:	20000010 	.word	0x20000010

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004012:	4b3e      	ldr	r3, [pc, #248]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800401c:	4b3b      	ldr	r3, [pc, #236]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x34>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d121      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d11e      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004038:	4b34      	ldr	r3, [pc, #208]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004044:	4b31      	ldr	r3, [pc, #196]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 8004046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e005      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004054:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004068:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004074:	e00a      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d102      	bne.n	8004082 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800407c:	4b25      	ldr	r3, [pc, #148]	; (8004114 <HAL_RCC_GetSysClockFreq+0x110>)
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	e004      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d101      	bne.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <HAL_RCC_GetSysClockFreq+0x114>)
 800408a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d134      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004092:	4b1e      	ldr	r3, [pc, #120]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0xa6>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d003      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0xac>
 80040a8:	e005      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCC_GetSysClockFreq+0x110>)
 80040ac:	617b      	str	r3, [r7, #20]
      break;
 80040ae:	e005      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040b0:	4b19      	ldr	r3, [pc, #100]	; (8004118 <HAL_RCC_GetSysClockFreq+0x114>)
 80040b2:	617b      	str	r3, [r7, #20]
      break;
 80040b4:	e002      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	617b      	str	r3, [r7, #20]
      break;
 80040ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040bc:	4b13      	ldr	r3, [pc, #76]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	3301      	adds	r3, #1
 80040c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	fb03 f202 	mul.w	r2, r3, r2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	0e5b      	lsrs	r3, r3, #25
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	3301      	adds	r3, #1
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040fc:	69bb      	ldr	r3, [r7, #24]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3724      	adds	r7, #36	; 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	08007a68 	.word	0x08007a68
 8004114:	00f42400 	.word	0x00f42400
 8004118:	007a1200 	.word	0x007a1200

0800411c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_RCC_GetHCLKFreq+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	2000000c 	.word	0x2000000c

08004134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004138:	f7ff fff0 	bl	800411c <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4904      	ldr	r1, [pc, #16]	; (800415c <HAL_RCC_GetPCLK1Freq+0x28>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	08007a60 	.word	0x08007a60

08004160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004164:	f7ff ffda 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0adb      	lsrs	r3, r3, #11
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4904      	ldr	r1, [pc, #16]	; (8004188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000
 8004188:	08007a60 	.word	0x08007a60

0800418c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004198:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041a4:	f7ff f990 	bl	80034c8 <HAL_PWREx_GetVoltageRange>
 80041a8:	6178      	str	r0, [r7, #20]
 80041aa:	e014      	b.n	80041d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	4a24      	ldr	r2, [pc, #144]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6593      	str	r3, [r2, #88]	; 0x58
 80041b8:	4b22      	ldr	r3, [pc, #136]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041c4:	f7ff f980 	bl	80034c8 <HAL_PWREx_GetVoltageRange>
 80041c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041dc:	d10b      	bne.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b80      	cmp	r3, #128	; 0x80
 80041e2:	d919      	bls.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2ba0      	cmp	r3, #160	; 0xa0
 80041e8:	d902      	bls.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ea:	2302      	movs	r3, #2
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e013      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f0:	2301      	movs	r3, #1
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e010      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d902      	bls.n	8004202 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041fc:	2303      	movs	r3, #3
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	e00a      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d102      	bne.n	800420e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004208:	2302      	movs	r3, #2
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	e004      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b70      	cmp	r3, #112	; 0x70
 8004212:	d101      	bne.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004214:	2301      	movs	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 0207 	bic.w	r2, r3, #7
 8004220:	4909      	ldr	r1, [pc, #36]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	429a      	cmp	r2, r3
 8004234:	d001      	beq.n	800423a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000
 8004248:	40022000 	.word	0x40022000

0800424c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004254:	2300      	movs	r3, #0
 8004256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004258:	2300      	movs	r3, #0
 800425a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004264:	2b00      	cmp	r3, #0
 8004266:	d041      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800426c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004270:	d02a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004272:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004276:	d824      	bhi.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800427c:	d008      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800427e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004282:	d81e      	bhi.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800428c:	d010      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800428e:	e018      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004290:	4b86      	ldr	r3, [pc, #536]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a85      	ldr	r2, [pc, #532]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800429c:	e015      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fadd 	bl	8004864 <RCCEx_PLLSAI1_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ae:	e00c      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3320      	adds	r3, #32
 80042b4:	2100      	movs	r1, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fbc6 	bl	8004a48 <RCCEx_PLLSAI2_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042c0:	e003      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	74fb      	strb	r3, [r7, #19]
      break;
 80042c6:	e000      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d0:	4b76      	ldr	r3, [pc, #472]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042de:	4973      	ldr	r1, [pc, #460]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042e6:	e001      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d041      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004300:	d02a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004306:	d824      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800430c:	d008      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800430e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004312:	d81e      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800431c:	d010      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800431e:	e018      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004320:	4b62      	ldr	r3, [pc, #392]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a61      	ldr	r2, [pc, #388]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800432c:	e015      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fa95 	bl	8004864 <RCCEx_PLLSAI1_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800433e:	e00c      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3320      	adds	r3, #32
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fb7e 	bl	8004a48 <RCCEx_PLLSAI2_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004350:	e003      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	74fb      	strb	r3, [r7, #19]
      break;
 8004356:	e000      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004360:	4b52      	ldr	r3, [pc, #328]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436e:	494f      	ldr	r1, [pc, #316]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004376:	e001      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a0 	beq.w	80044ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00d      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	4b41      	ldr	r3, [pc, #260]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	4a40      	ldr	r2, [pc, #256]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6593      	str	r3, [r2, #88]	; 0x58
 80043b0:	4b3e      	ldr	r3, [pc, #248]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043bc:	2301      	movs	r3, #1
 80043be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c0:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a3a      	ldr	r2, [pc, #232]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043cc:	f7fd fdfc 	bl	8001fc8 <HAL_GetTick>
 80043d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043d2:	e009      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d4:	f7fd fdf8 	bl	8001fc8 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d902      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	74fb      	strb	r3, [r7, #19]
        break;
 80043e6:	e005      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e8:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ef      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d15c      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043fa:	4b2c      	ldr	r3, [pc, #176]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004404:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	429a      	cmp	r2, r3
 8004416:	d019      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004418:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442a:	4a20      	ldr	r2, [pc, #128]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004434:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fd fdb7 	bl	8001fc8 <HAL_GetTick>
 800445a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445c:	e00b      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fd fdb3 	bl	8001fc8 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d902      	bls.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	74fb      	strb	r3, [r7, #19]
            break;
 8004474:	e006      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004476:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ec      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10c      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	4904      	ldr	r1, [pc, #16]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044a2:	e009      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	74bb      	strb	r3, [r7, #18]
 80044a8:	e006      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044b8:	7c7b      	ldrb	r3, [r7, #17]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d105      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044be:	4ba6      	ldr	r3, [pc, #664]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	4aa5      	ldr	r2, [pc, #660]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044d6:	4ba0      	ldr	r3, [pc, #640]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	f023 0203 	bic.w	r2, r3, #3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	499c      	ldr	r1, [pc, #624]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044f8:	4b97      	ldr	r3, [pc, #604]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f023 020c 	bic.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	4994      	ldr	r1, [pc, #592]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800451a:	4b8f      	ldr	r3, [pc, #572]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800451c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004520:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	498b      	ldr	r1, [pc, #556]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800453c:	4b86      	ldr	r3, [pc, #536]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	4983      	ldr	r1, [pc, #524]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800455e:	4b7e      	ldr	r3, [pc, #504]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456c:	497a      	ldr	r1, [pc, #488]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004580:	4b75      	ldr	r3, [pc, #468]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	4972      	ldr	r1, [pc, #456]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045a2:	4b6d      	ldr	r3, [pc, #436]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b0:	4969      	ldr	r1, [pc, #420]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045c4:	4b64      	ldr	r3, [pc, #400]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d2:	4961      	ldr	r1, [pc, #388]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045e6:	4b5c      	ldr	r3, [pc, #368]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	4958      	ldr	r1, [pc, #352]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004608:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	4950      	ldr	r1, [pc, #320]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800462a:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	4947      	ldr	r1, [pc, #284]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800464c:	4b42      	ldr	r3, [pc, #264]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800464e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465a:	493f      	ldr	r1, [pc, #252]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d028      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800466e:	4b3a      	ldr	r3, [pc, #232]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004674:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4936      	ldr	r1, [pc, #216]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800468c:	d106      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468e:	4b32      	ldr	r3, [pc, #200]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	4a31      	ldr	r2, [pc, #196]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004698:	60d3      	str	r3, [r2, #12]
 800469a:	e011      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3304      	adds	r3, #4
 80046aa:	2101      	movs	r1, #1
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 f8d9 	bl	8004864 <RCCEx_PLLSAI1_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80046bc:	7cfb      	ldrb	r3, [r7, #19]
 80046be:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d028      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046cc:	4b22      	ldr	r3, [pc, #136]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046da:	491f      	ldr	r1, [pc, #124]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ea:	d106      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046f6:	60d3      	str	r3, [r2, #12]
 80046f8:	e011      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004702:	d10c      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	2101      	movs	r1, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f8aa 	bl	8004864 <RCCEx_PLLSAI1_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800471a:	7cfb      	ldrb	r3, [r7, #19]
 800471c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d02a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004738:	4907      	ldr	r1, [pc, #28]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004748:	d108      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800474a:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	4a02      	ldr	r2, [pc, #8]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004754:	60d3      	str	r3, [r2, #12]
 8004756:	e013      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004758:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004764:	d10c      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f879 	bl	8004864 <RCCEx_PLLSAI1_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d02f      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800478c:	4b2c      	ldr	r3, [pc, #176]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479a:	4929      	ldr	r1, [pc, #164]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047aa:	d10d      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	2102      	movs	r1, #2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f856 	bl	8004864 <RCCEx_PLLSAI1_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d014      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	74bb      	strb	r3, [r7, #18]
 80047c6:	e011      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d0:	d10c      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3320      	adds	r3, #32
 80047d6:	2102      	movs	r1, #2
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f935 	bl	8004a48 <RCCEx_PLLSAI2_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047e2:	7cfb      	ldrb	r3, [r7, #19]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004808:	490d      	ldr	r1, [pc, #52]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800481c:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482c:	4904      	ldr	r1, [pc, #16]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004834:	7cbb      	ldrb	r3, [r7, #18]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a04      	ldr	r2, [pc, #16]	; (8004860 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800484e:	f043 0304 	orr.w	r3, r3, #4
 8004852:	6013      	str	r3, [r2, #0]
}
 8004854:	bf00      	nop
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000

08004864 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004872:	4b74      	ldr	r3, [pc, #464]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800487e:	4b71      	ldr	r3, [pc, #452]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0203 	and.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d10d      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
       ||
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004896:	4b6b      	ldr	r3, [pc, #428]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
       ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d047      	beq.n	800493a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	e044      	b.n	800493a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d018      	beq.n	80048ea <RCCEx_PLLSAI1_Config+0x86>
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d825      	bhi.n	8004908 <RCCEx_PLLSAI1_Config+0xa4>
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d002      	beq.n	80048c6 <RCCEx_PLLSAI1_Config+0x62>
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d009      	beq.n	80048d8 <RCCEx_PLLSAI1_Config+0x74>
 80048c4:	e020      	b.n	8004908 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048c6:	4b5f      	ldr	r3, [pc, #380]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d11d      	bne.n	800490e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d6:	e01a      	b.n	800490e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048d8:	4b5a      	ldr	r3, [pc, #360]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d116      	bne.n	8004912 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e8:	e013      	b.n	8004912 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048ea:	4b56      	ldr	r3, [pc, #344]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048f6:	4b53      	ldr	r3, [pc, #332]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004906:	e006      	b.n	8004916 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
      break;
 800490c:	e004      	b.n	8004918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800490e:	bf00      	nop
 8004910:	e002      	b.n	8004918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004912:	bf00      	nop
 8004914:	e000      	b.n	8004918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004916:	bf00      	nop
    }

    if(status == HAL_OK)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10d      	bne.n	800493a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800491e:	4b49      	ldr	r3, [pc, #292]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6819      	ldr	r1, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	430b      	orrs	r3, r1
 8004934:	4943      	ldr	r1, [pc, #268]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004936:	4313      	orrs	r3, r2
 8004938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d17c      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004940:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a3f      	ldr	r2, [pc, #252]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fd fb3c 	bl	8001fc8 <HAL_GetTick>
 8004950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004952:	e009      	b.n	8004968 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004954:	f7fd fb38 	bl	8001fc8 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d902      	bls.n	8004968 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	73fb      	strb	r3, [r7, #15]
        break;
 8004966:	e005      	b.n	8004974 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004968:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ef      	bne.n	8004954 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d15f      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d110      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004980:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
 8004990:	0211      	lsls	r1, r2, #8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	06d2      	lsls	r2, r2, #27
 8004998:	430a      	orrs	r2, r1
 800499a:	492a      	ldr	r1, [pc, #168]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	4313      	orrs	r3, r2
 800499e:	610b      	str	r3, [r1, #16]
 80049a0:	e027      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d112      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a8:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6892      	ldr	r2, [r2, #8]
 80049b8:	0211      	lsls	r1, r2, #8
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6912      	ldr	r2, [r2, #16]
 80049be:	0852      	lsrs	r2, r2, #1
 80049c0:	3a01      	subs	r2, #1
 80049c2:	0552      	lsls	r2, r2, #21
 80049c4:	430a      	orrs	r2, r1
 80049c6:	491f      	ldr	r1, [pc, #124]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]
 80049cc:	e011      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049ce:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6892      	ldr	r2, [r2, #8]
 80049de:	0211      	lsls	r1, r2, #8
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6952      	ldr	r2, [r2, #20]
 80049e4:	0852      	lsrs	r2, r2, #1
 80049e6:	3a01      	subs	r2, #1
 80049e8:	0652      	lsls	r2, r2, #25
 80049ea:	430a      	orrs	r2, r1
 80049ec:	4915      	ldr	r1, [pc, #84]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fd fae3 	bl	8001fc8 <HAL_GetTick>
 8004a02:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a04:	e009      	b.n	8004a1a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a06:	f7fd fadf 	bl	8001fc8 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d902      	bls.n	8004a1a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	73fb      	strb	r3, [r7, #15]
          break;
 8004a18:	e005      	b.n	8004a26 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a1a:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ef      	beq.n	8004a06 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40021000 	.word	0x40021000

08004a48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a56:	4b69      	ldr	r3, [pc, #420]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d018      	beq.n	8004a94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a62:	4b66      	ldr	r3, [pc, #408]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0203 	and.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d10d      	bne.n	8004a8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
       ||
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a7a:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	091b      	lsrs	r3, r3, #4
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
       ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d047      	beq.n	8004b1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	e044      	b.n	8004b1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d018      	beq.n	8004ace <RCCEx_PLLSAI2_Config+0x86>
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d825      	bhi.n	8004aec <RCCEx_PLLSAI2_Config+0xa4>
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d002      	beq.n	8004aaa <RCCEx_PLLSAI2_Config+0x62>
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d009      	beq.n	8004abc <RCCEx_PLLSAI2_Config+0x74>
 8004aa8:	e020      	b.n	8004aec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004aaa:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d11d      	bne.n	8004af2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aba:	e01a      	b.n	8004af2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004abc:	4b4f      	ldr	r3, [pc, #316]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d116      	bne.n	8004af6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004acc:	e013      	b.n	8004af6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ace:	4b4b      	ldr	r3, [pc, #300]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ada:	4b48      	ldr	r3, [pc, #288]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aea:	e006      	b.n	8004afa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      break;
 8004af0:	e004      	b.n	8004afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004af2:	bf00      	nop
 8004af4:	e002      	b.n	8004afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004afa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10d      	bne.n	8004b1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b02:	4b3e      	ldr	r3, [pc, #248]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6819      	ldr	r1, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	430b      	orrs	r3, r1
 8004b18:	4938      	ldr	r1, [pc, #224]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d166      	bne.n	8004bf2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b24:	4b35      	ldr	r3, [pc, #212]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a34      	ldr	r2, [pc, #208]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b30:	f7fd fa4a 	bl	8001fc8 <HAL_GetTick>
 8004b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b36:	e009      	b.n	8004b4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b38:	f7fd fa46 	bl	8001fc8 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d902      	bls.n	8004b4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	73fb      	strb	r3, [r7, #15]
        break;
 8004b4a:	e005      	b.n	8004b58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b4c:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1ef      	bne.n	8004b38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d149      	bne.n	8004bf2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d110      	bne.n	8004b86 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6892      	ldr	r2, [r2, #8]
 8004b74:	0211      	lsls	r1, r2, #8
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68d2      	ldr	r2, [r2, #12]
 8004b7a:	06d2      	lsls	r2, r2, #27
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	491f      	ldr	r1, [pc, #124]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	614b      	str	r3, [r1, #20]
 8004b84:	e011      	b.n	8004baa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6892      	ldr	r2, [r2, #8]
 8004b96:	0211      	lsls	r1, r2, #8
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6912      	ldr	r2, [r2, #16]
 8004b9c:	0852      	lsrs	r2, r2, #1
 8004b9e:	3a01      	subs	r2, #1
 8004ba0:	0652      	lsls	r2, r2, #25
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	4915      	ldr	r1, [pc, #84]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb6:	f7fd fa07 	bl	8001fc8 <HAL_GetTick>
 8004bba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bbc:	e009      	b.n	8004bd2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bbe:	f7fd fa03 	bl	8001fc8 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d902      	bls.n	8004bd2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	73fb      	strb	r3, [r7, #15]
          break;
 8004bd0:	e005      	b.n	8004bde <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0ef      	beq.n	8004bbe <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004be6:	695a      	ldr	r2, [r3, #20]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	4903      	ldr	r1, [pc, #12]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000

08004c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e040      	b.n	8004c94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fc ff62 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2224      	movs	r2, #36	; 0x24
 8004c2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fbc2 	bl	80053c8 <UART_SetConfig>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e022      	b.n	8004c94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fe6e 	bl	8005938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fef5 	bl	8005a7c <UART_CheckIdleState>
 8004c92:	4603      	mov	r3, r0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	f040 8082 	bne.w	8004dba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_UART_Transmit+0x26>
 8004cbc:	88fb      	ldrh	r3, [r7, #6]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e07a      	b.n	8004dbc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_UART_Transmit+0x38>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e073      	b.n	8004dbc <HAL_UART_Transmit+0x120>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2221      	movs	r2, #33	; 0x21
 8004ce8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cea:	f7fd f96d 	bl	8001fc8 <HAL_GetTick>
 8004cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	88fa      	ldrh	r2, [r7, #6]
 8004cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d08:	d108      	bne.n	8004d1c <HAL_UART_Transmit+0x80>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e003      	b.n	8004d24 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d2c:	e02d      	b.n	8004d8a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2200      	movs	r2, #0
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 fee8 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e039      	b.n	8004dbc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	881a      	ldrh	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	3302      	adds	r3, #2
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	e008      	b.n	8004d78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	3301      	adds	r3, #1
 8004d76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1cb      	bne.n	8004d2e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2140      	movs	r1, #64	; 0x40
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 feb4 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e005      	b.n	8004dbc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
  }
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b0ba      	sub	sp, #232	; 0xe8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004dee:	f640 030f 	movw	r3, #2063	; 0x80f
 8004df2:	4013      	ands	r3, r2
 8004df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d115      	bne.n	8004e2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00f      	beq.n	8004e2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 82a6 	beq.w	800536e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
      }
      return;
 8004e2a:	e2a0      	b.n	800536e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8117 	beq.w	8005064 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e46:	4b85      	ldr	r3, [pc, #532]	; (800505c <HAL_UART_IRQHandler+0x298>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 810a 	beq.w	8005064 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d011      	beq.n	8004e80 <HAL_UART_IRQHandler+0xbc>
 8004e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e76:	f043 0201 	orr.w	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d011      	beq.n	8004eb0 <HAL_UART_IRQHandler+0xec>
 8004e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00b      	beq.n	8004eb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea6:	f043 0204 	orr.w	r2, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d011      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x11c>
 8004ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed6:	f043 0202 	orr.w	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d017      	beq.n	8004f1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004efc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00b      	beq.n	8004f1c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2208      	movs	r2, #8
 8004f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f12:	f043 0208 	orr.w	r2, r3, #8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d012      	beq.n	8004f4e <HAL_UART_IRQHandler+0x18a>
 8004f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00c      	beq.n	8004f4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f44:	f043 0220 	orr.w	r2, r3, #32
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 820c 	beq.w	8005372 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d005      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d04f      	beq.n	8005046 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fe75 	bl	8005c96 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d141      	bne.n	800503e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1d9      	bne.n	8004fba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	2b00      	cmp	r3, #0
 800500c:	d013      	beq.n	8005036 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	4a13      	ldr	r2, [pc, #76]	; (8005060 <HAL_UART_IRQHandler+0x29c>)
 8005014:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	4618      	mov	r0, r3
 800501c:	f7fd f953 	bl	80022c6 <HAL_DMA_Abort_IT>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d017      	beq.n	8005056 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005030:	4610      	mov	r0, r2
 8005032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	e00f      	b.n	8005056 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f9b0 	bl	800539c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	e00b      	b.n	8005056 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9ac 	bl	800539c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	e007      	b.n	8005056 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9a8 	bl	800539c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005054:	e18d      	b.n	8005372 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005056:	bf00      	nop
    return;
 8005058:	e18b      	b.n	8005372 <HAL_UART_IRQHandler+0x5ae>
 800505a:	bf00      	nop
 800505c:	04000120 	.word	0x04000120
 8005060:	08005d5d 	.word	0x08005d5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005068:	2b01      	cmp	r3, #1
 800506a:	f040 8146 	bne.w	80052fa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800506e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 813f 	beq.w	80052fa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8138 	beq.w	80052fa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2210      	movs	r2, #16
 8005090:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	f040 80b4 	bne.w	800520a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 815f 	beq.w	8005376 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050c2:	429a      	cmp	r2, r3
 80050c4:	f080 8157 	bcs.w	8005376 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 8085 	bne.w	80051ee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800510e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005112:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800511a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1da      	bne.n	80050e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3308      	adds	r3, #8
 8005134:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800513e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3308      	adds	r3, #8
 800514e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005152:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005156:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800515a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e1      	bne.n	800512e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3308      	adds	r3, #8
 8005170:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800517a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3308      	adds	r3, #8
 800518a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800518e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005190:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800519c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e3      	bne.n	800516a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051be:	f023 0310 	bic.w	r3, r3, #16
 80051c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80051d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e4      	bne.n	80051ae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fd f82e 	bl	800224a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8d4 	bl	80053b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005208:	e0b5      	b.n	8005376 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005216:	b29b      	uxth	r3, r3
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80a7 	beq.w	800537a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800522c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80a2 	beq.w	800537a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
 800525a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800525e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e4      	bne.n	8005236 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	623b      	str	r3, [r7, #32]
   return(result);
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3308      	adds	r3, #8
 800528c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005290:	633a      	str	r2, [r7, #48]	; 0x30
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e3      	bne.n	800526c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0310 	bic.w	r3, r3, #16
 80052ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	69b9      	ldr	r1, [r7, #24]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	617b      	str	r3, [r7, #20]
   return(result);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e4      	bne.n	80052b6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f85c 	bl	80053b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052f8:	e03f      	b.n	800537a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00e      	beq.n	8005324 <HAL_UART_IRQHandler+0x560>
 8005306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800531a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fd5d 	bl	8005ddc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005322:	e02d      	b.n	8005380 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00e      	beq.n	800534e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01c      	beq.n	800537e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
    }
    return;
 800534c:	e017      	b.n	800537e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d012      	beq.n	8005380 <HAL_UART_IRQHandler+0x5bc>
 800535a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fd0e 	bl	8005d88 <UART_EndTransmit_IT>
    return;
 800536c:	e008      	b.n	8005380 <HAL_UART_IRQHandler+0x5bc>
      return;
 800536e:	bf00      	nop
 8005370:	e006      	b.n	8005380 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005372:	bf00      	nop
 8005374:	e004      	b.n	8005380 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005376:	bf00      	nop
 8005378:	e002      	b.n	8005380 <HAL_UART_IRQHandler+0x5bc>
      return;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_UART_IRQHandler+0x5bc>
    return;
 800537e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005380:	37e8      	adds	r7, #232	; 0xe8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop

08005388 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053cc:	b08a      	sub	sp, #40	; 0x28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4ba4      	ldr	r3, [pc, #656]	; (8005688 <UART_SetConfig+0x2c0>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	6812      	ldr	r2, [r2, #0]
 80053fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005400:	430b      	orrs	r3, r1
 8005402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a99      	ldr	r2, [pc, #612]	; (800568c <UART_SetConfig+0x2c4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005430:	4313      	orrs	r3, r2
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	430a      	orrs	r2, r1
 8005446:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a90      	ldr	r2, [pc, #576]	; (8005690 <UART_SetConfig+0x2c8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d126      	bne.n	80054a0 <UART_SetConfig+0xd8>
 8005452:	4b90      	ldr	r3, [pc, #576]	; (8005694 <UART_SetConfig+0x2cc>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	2b03      	cmp	r3, #3
 800545e:	d81b      	bhi.n	8005498 <UART_SetConfig+0xd0>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0xa0>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	08005479 	.word	0x08005479
 800546c:	08005489 	.word	0x08005489
 8005470:	08005481 	.word	0x08005481
 8005474:	08005491 	.word	0x08005491
 8005478:	2301      	movs	r3, #1
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	e116      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005480:	2302      	movs	r3, #2
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005486:	e112      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005488:	2304      	movs	r3, #4
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548e:	e10e      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005490:	2308      	movs	r3, #8
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005496:	e10a      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005498:	2310      	movs	r3, #16
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549e:	e106      	b.n	80056ae <UART_SetConfig+0x2e6>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a7c      	ldr	r2, [pc, #496]	; (8005698 <UART_SetConfig+0x2d0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d138      	bne.n	800551c <UART_SetConfig+0x154>
 80054aa:	4b7a      	ldr	r3, [pc, #488]	; (8005694 <UART_SetConfig+0x2cc>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	d82d      	bhi.n	8005514 <UART_SetConfig+0x14c>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <UART_SetConfig+0xf8>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	08005515 	.word	0x08005515
 80054c8:	08005515 	.word	0x08005515
 80054cc:	08005515 	.word	0x08005515
 80054d0:	08005505 	.word	0x08005505
 80054d4:	08005515 	.word	0x08005515
 80054d8:	08005515 	.word	0x08005515
 80054dc:	08005515 	.word	0x08005515
 80054e0:	080054fd 	.word	0x080054fd
 80054e4:	08005515 	.word	0x08005515
 80054e8:	08005515 	.word	0x08005515
 80054ec:	08005515 	.word	0x08005515
 80054f0:	0800550d 	.word	0x0800550d
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fa:	e0d8      	b.n	80056ae <UART_SetConfig+0x2e6>
 80054fc:	2302      	movs	r3, #2
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005502:	e0d4      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005504:	2304      	movs	r3, #4
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550a:	e0d0      	b.n	80056ae <UART_SetConfig+0x2e6>
 800550c:	2308      	movs	r3, #8
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005512:	e0cc      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005514:	2310      	movs	r3, #16
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551a:	e0c8      	b.n	80056ae <UART_SetConfig+0x2e6>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a5e      	ldr	r2, [pc, #376]	; (800569c <UART_SetConfig+0x2d4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d125      	bne.n	8005572 <UART_SetConfig+0x1aa>
 8005526:	4b5b      	ldr	r3, [pc, #364]	; (8005694 <UART_SetConfig+0x2cc>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005530:	2b30      	cmp	r3, #48	; 0x30
 8005532:	d016      	beq.n	8005562 <UART_SetConfig+0x19a>
 8005534:	2b30      	cmp	r3, #48	; 0x30
 8005536:	d818      	bhi.n	800556a <UART_SetConfig+0x1a2>
 8005538:	2b20      	cmp	r3, #32
 800553a:	d00a      	beq.n	8005552 <UART_SetConfig+0x18a>
 800553c:	2b20      	cmp	r3, #32
 800553e:	d814      	bhi.n	800556a <UART_SetConfig+0x1a2>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <UART_SetConfig+0x182>
 8005544:	2b10      	cmp	r3, #16
 8005546:	d008      	beq.n	800555a <UART_SetConfig+0x192>
 8005548:	e00f      	b.n	800556a <UART_SetConfig+0x1a2>
 800554a:	2300      	movs	r3, #0
 800554c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005550:	e0ad      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005552:	2302      	movs	r3, #2
 8005554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005558:	e0a9      	b.n	80056ae <UART_SetConfig+0x2e6>
 800555a:	2304      	movs	r3, #4
 800555c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005560:	e0a5      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005562:	2308      	movs	r3, #8
 8005564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005568:	e0a1      	b.n	80056ae <UART_SetConfig+0x2e6>
 800556a:	2310      	movs	r3, #16
 800556c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005570:	e09d      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a4a      	ldr	r2, [pc, #296]	; (80056a0 <UART_SetConfig+0x2d8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d125      	bne.n	80055c8 <UART_SetConfig+0x200>
 800557c:	4b45      	ldr	r3, [pc, #276]	; (8005694 <UART_SetConfig+0x2cc>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005582:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005586:	2bc0      	cmp	r3, #192	; 0xc0
 8005588:	d016      	beq.n	80055b8 <UART_SetConfig+0x1f0>
 800558a:	2bc0      	cmp	r3, #192	; 0xc0
 800558c:	d818      	bhi.n	80055c0 <UART_SetConfig+0x1f8>
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d00a      	beq.n	80055a8 <UART_SetConfig+0x1e0>
 8005592:	2b80      	cmp	r3, #128	; 0x80
 8005594:	d814      	bhi.n	80055c0 <UART_SetConfig+0x1f8>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <UART_SetConfig+0x1d8>
 800559a:	2b40      	cmp	r3, #64	; 0x40
 800559c:	d008      	beq.n	80055b0 <UART_SetConfig+0x1e8>
 800559e:	e00f      	b.n	80055c0 <UART_SetConfig+0x1f8>
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a6:	e082      	b.n	80056ae <UART_SetConfig+0x2e6>
 80055a8:	2302      	movs	r3, #2
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ae:	e07e      	b.n	80056ae <UART_SetConfig+0x2e6>
 80055b0:	2304      	movs	r3, #4
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e07a      	b.n	80056ae <UART_SetConfig+0x2e6>
 80055b8:	2308      	movs	r3, #8
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e076      	b.n	80056ae <UART_SetConfig+0x2e6>
 80055c0:	2310      	movs	r3, #16
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e072      	b.n	80056ae <UART_SetConfig+0x2e6>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a35      	ldr	r2, [pc, #212]	; (80056a4 <UART_SetConfig+0x2dc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d12a      	bne.n	8005628 <UART_SetConfig+0x260>
 80055d2:	4b30      	ldr	r3, [pc, #192]	; (8005694 <UART_SetConfig+0x2cc>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e0:	d01a      	beq.n	8005618 <UART_SetConfig+0x250>
 80055e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e6:	d81b      	bhi.n	8005620 <UART_SetConfig+0x258>
 80055e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ec:	d00c      	beq.n	8005608 <UART_SetConfig+0x240>
 80055ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f2:	d815      	bhi.n	8005620 <UART_SetConfig+0x258>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <UART_SetConfig+0x238>
 80055f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fc:	d008      	beq.n	8005610 <UART_SetConfig+0x248>
 80055fe:	e00f      	b.n	8005620 <UART_SetConfig+0x258>
 8005600:	2300      	movs	r3, #0
 8005602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005606:	e052      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005608:	2302      	movs	r3, #2
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560e:	e04e      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005610:	2304      	movs	r3, #4
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005616:	e04a      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005618:	2308      	movs	r3, #8
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561e:	e046      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005620:	2310      	movs	r3, #16
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005626:	e042      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a17      	ldr	r2, [pc, #92]	; (800568c <UART_SetConfig+0x2c4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d13a      	bne.n	80056a8 <UART_SetConfig+0x2e0>
 8005632:	4b18      	ldr	r3, [pc, #96]	; (8005694 <UART_SetConfig+0x2cc>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800563c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005640:	d01a      	beq.n	8005678 <UART_SetConfig+0x2b0>
 8005642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005646:	d81b      	bhi.n	8005680 <UART_SetConfig+0x2b8>
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564c:	d00c      	beq.n	8005668 <UART_SetConfig+0x2a0>
 800564e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005652:	d815      	bhi.n	8005680 <UART_SetConfig+0x2b8>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <UART_SetConfig+0x298>
 8005658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565c:	d008      	beq.n	8005670 <UART_SetConfig+0x2a8>
 800565e:	e00f      	b.n	8005680 <UART_SetConfig+0x2b8>
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e022      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005668:	2302      	movs	r3, #2
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e01e      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e01a      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e016      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e012      	b.n	80056ae <UART_SetConfig+0x2e6>
 8005688:	efff69f3 	.word	0xefff69f3
 800568c:	40008000 	.word	0x40008000
 8005690:	40013800 	.word	0x40013800
 8005694:	40021000 	.word	0x40021000
 8005698:	40004400 	.word	0x40004400
 800569c:	40004800 	.word	0x40004800
 80056a0:	40004c00 	.word	0x40004c00
 80056a4:	40005000 	.word	0x40005000
 80056a8:	2310      	movs	r3, #16
 80056aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a9f      	ldr	r2, [pc, #636]	; (8005930 <UART_SetConfig+0x568>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d17a      	bne.n	80057ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d824      	bhi.n	800570a <UART_SetConfig+0x342>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <UART_SetConfig+0x300>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	0800570b 	.word	0x0800570b
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	0800570b 	.word	0x0800570b
 80056d8:	080056fb 	.word	0x080056fb
 80056dc:	0800570b 	.word	0x0800570b
 80056e0:	0800570b 	.word	0x0800570b
 80056e4:	0800570b 	.word	0x0800570b
 80056e8:	08005703 	.word	0x08005703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ec:	f7fe fd22 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 80056f0:	61f8      	str	r0, [r7, #28]
        break;
 80056f2:	e010      	b.n	8005716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f4:	4b8f      	ldr	r3, [pc, #572]	; (8005934 <UART_SetConfig+0x56c>)
 80056f6:	61fb      	str	r3, [r7, #28]
        break;
 80056f8:	e00d      	b.n	8005716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fa:	f7fe fc83 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 80056fe:	61f8      	str	r0, [r7, #28]
        break;
 8005700:	e009      	b.n	8005716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005706:	61fb      	str	r3, [r7, #28]
        break;
 8005708:	e005      	b.n	8005716 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005714:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80fb 	beq.w	8005914 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	4413      	add	r3, r2
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	429a      	cmp	r2, r3
 800572c:	d305      	bcc.n	800573a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	429a      	cmp	r2, r3
 8005738:	d903      	bls.n	8005742 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005740:	e0e8      	b.n	8005914 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	2200      	movs	r2, #0
 8005746:	461c      	mov	r4, r3
 8005748:	4615      	mov	r5, r2
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	022b      	lsls	r3, r5, #8
 8005754:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005758:	0222      	lsls	r2, r4, #8
 800575a:	68f9      	ldr	r1, [r7, #12]
 800575c:	6849      	ldr	r1, [r1, #4]
 800575e:	0849      	lsrs	r1, r1, #1
 8005760:	2000      	movs	r0, #0
 8005762:	4688      	mov	r8, r1
 8005764:	4681      	mov	r9, r0
 8005766:	eb12 0a08 	adds.w	sl, r2, r8
 800576a:	eb43 0b09 	adc.w	fp, r3, r9
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800577c:	4650      	mov	r0, sl
 800577e:	4659      	mov	r1, fp
 8005780:	f7fb f97c 	bl	8000a7c <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4613      	mov	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005792:	d308      	bcc.n	80057a6 <UART_SetConfig+0x3de>
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800579a:	d204      	bcs.n	80057a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	e0b6      	b.n	8005914 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057ac:	e0b2      	b.n	8005914 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b6:	d15e      	bne.n	8005876 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d828      	bhi.n	8005812 <UART_SetConfig+0x44a>
 80057c0:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <UART_SetConfig+0x400>)
 80057c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c6:	bf00      	nop
 80057c8:	080057ed 	.word	0x080057ed
 80057cc:	080057f5 	.word	0x080057f5
 80057d0:	080057fd 	.word	0x080057fd
 80057d4:	08005813 	.word	0x08005813
 80057d8:	08005803 	.word	0x08005803
 80057dc:	08005813 	.word	0x08005813
 80057e0:	08005813 	.word	0x08005813
 80057e4:	08005813 	.word	0x08005813
 80057e8:	0800580b 	.word	0x0800580b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ec:	f7fe fca2 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 80057f0:	61f8      	str	r0, [r7, #28]
        break;
 80057f2:	e014      	b.n	800581e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f4:	f7fe fcb4 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 80057f8:	61f8      	str	r0, [r7, #28]
        break;
 80057fa:	e010      	b.n	800581e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057fc:	4b4d      	ldr	r3, [pc, #308]	; (8005934 <UART_SetConfig+0x56c>)
 80057fe:	61fb      	str	r3, [r7, #28]
        break;
 8005800:	e00d      	b.n	800581e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005802:	f7fe fbff 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8005806:	61f8      	str	r0, [r7, #28]
        break;
 8005808:	e009      	b.n	800581e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580e:	61fb      	str	r3, [r7, #28]
        break;
 8005810:	e005      	b.n	800581e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800581c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d077      	beq.n	8005914 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005a      	lsls	r2, r3, #1
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	441a      	add	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d916      	bls.n	800586e <UART_SetConfig+0x4a6>
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005846:	d212      	bcs.n	800586e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f023 030f 	bic.w	r3, r3, #15
 8005850:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	b29b      	uxth	r3, r3
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	b29a      	uxth	r2, r3
 800585e:	8afb      	ldrh	r3, [r7, #22]
 8005860:	4313      	orrs	r3, r2
 8005862:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	8afa      	ldrh	r2, [r7, #22]
 800586a:	60da      	str	r2, [r3, #12]
 800586c:	e052      	b.n	8005914 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005874:	e04e      	b.n	8005914 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800587a:	2b08      	cmp	r3, #8
 800587c:	d827      	bhi.n	80058ce <UART_SetConfig+0x506>
 800587e:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0x4bc>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	080058a9 	.word	0x080058a9
 8005888:	080058b1 	.word	0x080058b1
 800588c:	080058b9 	.word	0x080058b9
 8005890:	080058cf 	.word	0x080058cf
 8005894:	080058bf 	.word	0x080058bf
 8005898:	080058cf 	.word	0x080058cf
 800589c:	080058cf 	.word	0x080058cf
 80058a0:	080058cf 	.word	0x080058cf
 80058a4:	080058c7 	.word	0x080058c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a8:	f7fe fc44 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 80058ac:	61f8      	str	r0, [r7, #28]
        break;
 80058ae:	e014      	b.n	80058da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058b0:	f7fe fc56 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 80058b4:	61f8      	str	r0, [r7, #28]
        break;
 80058b6:	e010      	b.n	80058da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b8:	4b1e      	ldr	r3, [pc, #120]	; (8005934 <UART_SetConfig+0x56c>)
 80058ba:	61fb      	str	r3, [r7, #28]
        break;
 80058bc:	e00d      	b.n	80058da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058be:	f7fe fba1 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 80058c2:	61f8      	str	r0, [r7, #28]
        break;
 80058c4:	e009      	b.n	80058da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ca:	61fb      	str	r3, [r7, #28]
        break;
 80058cc:	e005      	b.n	80058da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058d8:	bf00      	nop
    }

    if (pclk != 0U)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d019      	beq.n	8005914 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	085a      	lsrs	r2, r3, #1
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	441a      	add	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b0f      	cmp	r3, #15
 80058f8:	d909      	bls.n	800590e <UART_SetConfig+0x546>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005900:	d205      	bcs.n	800590e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60da      	str	r2, [r3, #12]
 800590c:	e002      	b.n	8005914 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005920:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005924:	4618      	mov	r0, r3
 8005926:	3728      	adds	r7, #40	; 0x28
 8005928:	46bd      	mov	sp, r7
 800592a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800592e:	bf00      	nop
 8005930:	40008000 	.word	0x40008000
 8005934:	00f42400 	.word	0x00f42400

08005938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01a      	beq.n	8005a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a36:	d10a      	bne.n	8005a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	605a      	str	r2, [r3, #4]
  }
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a8c:	f7fc fa9c 	bl	8001fc8 <HAL_GetTick>
 8005a90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d10e      	bne.n	8005abe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f82d 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e023      	b.n	8005b06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d10e      	bne.n	8005aea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f817 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e00d      	b.n	8005b06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b09c      	sub	sp, #112	; 0x70
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1e:	e0a5      	b.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b26:	f000 80a1 	beq.w	8005c6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fc fa4d 	bl	8001fc8 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d13e      	bne.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b54:	667b      	str	r3, [r7, #100]	; 0x64
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e6      	bne.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	663b      	str	r3, [r7, #96]	; 0x60
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3308      	adds	r3, #8
 8005b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e5      	bne.n	8005b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e067      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d04f      	beq.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bda:	d147      	bne.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005be4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
 8005c06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e6      	bne.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	613b      	str	r3, [r7, #16]
   return(result);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3308      	adds	r3, #8
 8005c36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c38:	623a      	str	r2, [r7, #32]
 8005c3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	69f9      	ldr	r1, [r7, #28]
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e5      	bne.n	8005c18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2220      	movs	r2, #32
 8005c56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e010      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69da      	ldr	r2, [r3, #28]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4013      	ands	r3, r2
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	bf0c      	ite	eq
 8005c7c:	2301      	moveq	r3, #1
 8005c7e:	2300      	movne	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	f43f af4a 	beq.w	8005b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3770      	adds	r7, #112	; 0x70
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b095      	sub	sp, #84	; 0x54
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e6      	bne.n	8005c9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d118      	bne.n	8005d3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f023 0310 	bic.w	r3, r3, #16
 8005d20:	647b      	str	r3, [r7, #68]	; 0x44
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	6979      	ldr	r1, [r7, #20]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	613b      	str	r3, [r7, #16]
   return(result);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e6      	bne.n	8005d0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005d50:	bf00      	nop
 8005d52:	3754      	adds	r7, #84	; 0x54
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f7ff fb0e 	bl	800539c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	61bb      	str	r3, [r7, #24]
 8005db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e6      	bne.n	8005d90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff fada 	bl	8005388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dd4:	bf00      	nop
 8005dd6:	3720      	adds	r7, #32
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005df0:	b084      	sub	sp, #16
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	f107 001c 	add.w	r0, r7, #28
 8005dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa70 	bl	80062f4 <USB_CoreReset>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
 8005e2a:	e005      	b.n	8005e38 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e44:	b004      	add	sp, #16
 8005e46:	4770      	bx	lr

08005e48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f023 0201 	bic.w	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d115      	bne.n	8005eb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e98:	2001      	movs	r0, #1
 8005e9a:	f7fc f8a1 	bl	8001fe0 <HAL_Delay>
      ms++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fa17 	bl	80062d8 <USB_GetMode>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d01e      	beq.n	8005eee <USB_SetCurrentMode+0x84>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b31      	cmp	r3, #49	; 0x31
 8005eb4:	d9f0      	bls.n	8005e98 <USB_SetCurrentMode+0x2e>
 8005eb6:	e01a      	b.n	8005eee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d115      	bne.n	8005eea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005eca:	2001      	movs	r0, #1
 8005ecc:	f7fc f888 	bl	8001fe0 <HAL_Delay>
      ms++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9fe 	bl	80062d8 <USB_GetMode>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <USB_SetCurrentMode+0x84>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b31      	cmp	r3, #49	; 0x31
 8005ee6:	d9f0      	bls.n	8005eca <USB_SetCurrentMode+0x60>
 8005ee8:	e001      	b.n	8005eee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e005      	b.n	8005efa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b32      	cmp	r3, #50	; 0x32
 8005ef2:	d101      	bne.n	8005ef8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f04:	b084      	sub	sp, #16
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	e009      	b.n	8005f38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3340      	adds	r3, #64	; 0x40
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	3301      	adds	r3, #1
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b0e      	cmp	r3, #14
 8005f3c:	d9f2      	bls.n	8005f24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d11c      	bne.n	8005f7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f52:	f043 0302 	orr.w	r3, r3, #2
 8005f56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e005      	b.n	8005f8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f90:	461a      	mov	r2, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	680b      	ldr	r3, [r1, #0]
 8005fa8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005faa:	2103      	movs	r1, #3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f959 	bl	8006264 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fb2:	2110      	movs	r1, #16
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8f1 	bl	800619c <USB_FlushTxFifo>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f91d 	bl	8006204 <USB_FlushRxFifo>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	e043      	b.n	8006086 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006014:	d118      	bne.n	8006048 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	461a      	mov	r2, r3
 800602a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e013      	b.n	800605a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	461a      	mov	r2, r3
 8006040:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e008      	b.n	800605a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	461a      	mov	r2, r3
 8006056:	2300      	movs	r3, #0
 8006058:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	461a      	mov	r2, r3
 8006068:	2300      	movs	r3, #0
 800606a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	461a      	mov	r2, r3
 800607a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800607e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3301      	adds	r3, #1
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	429a      	cmp	r2, r3
 800608c:	d3b7      	bcc.n	8005ffe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	e043      	b.n	800611c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060aa:	d118      	bne.n	80060de <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	461a      	mov	r2, r3
 80060c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	e013      	b.n	80060f0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	461a      	mov	r2, r3
 80060d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	e008      	b.n	80060f0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	461a      	mov	r2, r3
 80060ec:	2300      	movs	r3, #0
 80060ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	461a      	mov	r2, r3
 80060fe:	2300      	movs	r3, #0
 8006100:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	461a      	mov	r2, r3
 8006110:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006114:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3301      	adds	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	429a      	cmp	r2, r3
 8006122:	d3b7      	bcc.n	8006094 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006136:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006144:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f043 0210 	orr.w	r2, r3, #16
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	4b10      	ldr	r3, [pc, #64]	; (8006198 <USB_DevInit+0x294>)
 8006158:	4313      	orrs	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800615e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f043 0208 	orr.w	r2, r3, #8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d107      	bne.n	8006186 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800617e:	f043 0304 	orr.w	r3, r3, #4
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006186:	7dfb      	ldrb	r3, [r7, #23]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006192:	b004      	add	sp, #16
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	803c3800 	.word	0x803c3800

0800619c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4a13      	ldr	r2, [pc, #76]	; (8006200 <USB_FlushTxFifo+0x64>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d901      	bls.n	80061bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e01b      	b.n	80061f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	daf2      	bge.n	80061aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	019b      	lsls	r3, r3, #6
 80061cc:	f043 0220 	orr.w	r2, r3, #32
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3301      	adds	r3, #1
 80061d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a08      	ldr	r2, [pc, #32]	; (8006200 <USB_FlushTxFifo+0x64>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d901      	bls.n	80061e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e006      	b.n	80061f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d0f0      	beq.n	80061d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	00030d40 	.word	0x00030d40

08006204 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a11      	ldr	r2, [pc, #68]	; (8006260 <USB_FlushRxFifo+0x5c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e018      	b.n	8006254 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	daf2      	bge.n	8006210 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2210      	movs	r2, #16
 8006232:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a08      	ldr	r2, [pc, #32]	; (8006260 <USB_FlushRxFifo+0x5c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e006      	b.n	8006254 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b10      	cmp	r3, #16
 8006250:	d0f0      	beq.n	8006234 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	00030d40 	.word	0x00030d40

08006264 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006284:	4313      	orrs	r3, r2
 8006286:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062b0:	f023 0303 	bic.w	r3, r3, #3
 80062b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c4:	f043 0302 	orr.w	r3, r3, #2
 80062c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f003 0301 	and.w	r3, r3, #1
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a13      	ldr	r2, [pc, #76]	; (8006358 <USB_CoreReset+0x64>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d901      	bls.n	8006312 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e01b      	b.n	800634a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	daf2      	bge.n	8006300 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f043 0201 	orr.w	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3301      	adds	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4a09      	ldr	r2, [pc, #36]	; (8006358 <USB_CoreReset+0x64>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d901      	bls.n	800633c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e006      	b.n	800634a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b01      	cmp	r3, #1
 8006346:	d0f0      	beq.n	800632a <USB_CoreReset+0x36>

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	00030d40 	.word	0x00030d40

0800635c <__errno>:
 800635c:	4b01      	ldr	r3, [pc, #4]	; (8006364 <__errno+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000018 	.word	0x20000018

08006368 <__libc_init_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4d0d      	ldr	r5, [pc, #52]	; (80063a0 <__libc_init_array+0x38>)
 800636c:	4c0d      	ldr	r4, [pc, #52]	; (80063a4 <__libc_init_array+0x3c>)
 800636e:	1b64      	subs	r4, r4, r5
 8006370:	10a4      	asrs	r4, r4, #2
 8006372:	2600      	movs	r6, #0
 8006374:	42a6      	cmp	r6, r4
 8006376:	d109      	bne.n	800638c <__libc_init_array+0x24>
 8006378:	4d0b      	ldr	r5, [pc, #44]	; (80063a8 <__libc_init_array+0x40>)
 800637a:	4c0c      	ldr	r4, [pc, #48]	; (80063ac <__libc_init_array+0x44>)
 800637c:	f001 fa1a 	bl	80077b4 <_init>
 8006380:	1b64      	subs	r4, r4, r5
 8006382:	10a4      	asrs	r4, r4, #2
 8006384:	2600      	movs	r6, #0
 8006386:	42a6      	cmp	r6, r4
 8006388:	d105      	bne.n	8006396 <__libc_init_array+0x2e>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006390:	4798      	blx	r3
 8006392:	3601      	adds	r6, #1
 8006394:	e7ee      	b.n	8006374 <__libc_init_array+0xc>
 8006396:	f855 3b04 	ldr.w	r3, [r5], #4
 800639a:	4798      	blx	r3
 800639c:	3601      	adds	r6, #1
 800639e:	e7f2      	b.n	8006386 <__libc_init_array+0x1e>
 80063a0:	08007b38 	.word	0x08007b38
 80063a4:	08007b38 	.word	0x08007b38
 80063a8:	08007b38 	.word	0x08007b38
 80063ac:	08007b3c 	.word	0x08007b3c

080063b0 <memcpy>:
 80063b0:	440a      	add	r2, r1
 80063b2:	4291      	cmp	r1, r2
 80063b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063b8:	d100      	bne.n	80063bc <memcpy+0xc>
 80063ba:	4770      	bx	lr
 80063bc:	b510      	push	{r4, lr}
 80063be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c6:	4291      	cmp	r1, r2
 80063c8:	d1f9      	bne.n	80063be <memcpy+0xe>
 80063ca:	bd10      	pop	{r4, pc}

080063cc <memset>:
 80063cc:	4402      	add	r2, r0
 80063ce:	4603      	mov	r3, r0
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d100      	bne.n	80063d6 <memset+0xa>
 80063d4:	4770      	bx	lr
 80063d6:	f803 1b01 	strb.w	r1, [r3], #1
 80063da:	e7f9      	b.n	80063d0 <memset+0x4>

080063dc <iprintf>:
 80063dc:	b40f      	push	{r0, r1, r2, r3}
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <iprintf+0x2c>)
 80063e0:	b513      	push	{r0, r1, r4, lr}
 80063e2:	681c      	ldr	r4, [r3, #0]
 80063e4:	b124      	cbz	r4, 80063f0 <iprintf+0x14>
 80063e6:	69a3      	ldr	r3, [r4, #24]
 80063e8:	b913      	cbnz	r3, 80063f0 <iprintf+0x14>
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 fa98 	bl	8006920 <__sinit>
 80063f0:	ab05      	add	r3, sp, #20
 80063f2:	9a04      	ldr	r2, [sp, #16]
 80063f4:	68a1      	ldr	r1, [r4, #8]
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 fdfd 	bl	8006ff8 <_vfiprintf_r>
 80063fe:	b002      	add	sp, #8
 8006400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006404:	b004      	add	sp, #16
 8006406:	4770      	bx	lr
 8006408:	20000018 	.word	0x20000018

0800640c <_puts_r>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	460e      	mov	r6, r1
 8006410:	4605      	mov	r5, r0
 8006412:	b118      	cbz	r0, 800641c <_puts_r+0x10>
 8006414:	6983      	ldr	r3, [r0, #24]
 8006416:	b90b      	cbnz	r3, 800641c <_puts_r+0x10>
 8006418:	f000 fa82 	bl	8006920 <__sinit>
 800641c:	69ab      	ldr	r3, [r5, #24]
 800641e:	68ac      	ldr	r4, [r5, #8]
 8006420:	b913      	cbnz	r3, 8006428 <_puts_r+0x1c>
 8006422:	4628      	mov	r0, r5
 8006424:	f000 fa7c 	bl	8006920 <__sinit>
 8006428:	4b2c      	ldr	r3, [pc, #176]	; (80064dc <_puts_r+0xd0>)
 800642a:	429c      	cmp	r4, r3
 800642c:	d120      	bne.n	8006470 <_puts_r+0x64>
 800642e:	686c      	ldr	r4, [r5, #4]
 8006430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006432:	07db      	lsls	r3, r3, #31
 8006434:	d405      	bmi.n	8006442 <_puts_r+0x36>
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	0598      	lsls	r0, r3, #22
 800643a:	d402      	bmi.n	8006442 <_puts_r+0x36>
 800643c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800643e:	f000 fb0d 	bl	8006a5c <__retarget_lock_acquire_recursive>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	0719      	lsls	r1, r3, #28
 8006446:	d51d      	bpl.n	8006484 <_puts_r+0x78>
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	b1db      	cbz	r3, 8006484 <_puts_r+0x78>
 800644c:	3e01      	subs	r6, #1
 800644e:	68a3      	ldr	r3, [r4, #8]
 8006450:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006454:	3b01      	subs	r3, #1
 8006456:	60a3      	str	r3, [r4, #8]
 8006458:	bb39      	cbnz	r1, 80064aa <_puts_r+0x9e>
 800645a:	2b00      	cmp	r3, #0
 800645c:	da38      	bge.n	80064d0 <_puts_r+0xc4>
 800645e:	4622      	mov	r2, r4
 8006460:	210a      	movs	r1, #10
 8006462:	4628      	mov	r0, r5
 8006464:	f000 f882 	bl	800656c <__swbuf_r>
 8006468:	3001      	adds	r0, #1
 800646a:	d011      	beq.n	8006490 <_puts_r+0x84>
 800646c:	250a      	movs	r5, #10
 800646e:	e011      	b.n	8006494 <_puts_r+0x88>
 8006470:	4b1b      	ldr	r3, [pc, #108]	; (80064e0 <_puts_r+0xd4>)
 8006472:	429c      	cmp	r4, r3
 8006474:	d101      	bne.n	800647a <_puts_r+0x6e>
 8006476:	68ac      	ldr	r4, [r5, #8]
 8006478:	e7da      	b.n	8006430 <_puts_r+0x24>
 800647a:	4b1a      	ldr	r3, [pc, #104]	; (80064e4 <_puts_r+0xd8>)
 800647c:	429c      	cmp	r4, r3
 800647e:	bf08      	it	eq
 8006480:	68ec      	ldreq	r4, [r5, #12]
 8006482:	e7d5      	b.n	8006430 <_puts_r+0x24>
 8006484:	4621      	mov	r1, r4
 8006486:	4628      	mov	r0, r5
 8006488:	f000 f8c2 	bl	8006610 <__swsetup_r>
 800648c:	2800      	cmp	r0, #0
 800648e:	d0dd      	beq.n	800644c <_puts_r+0x40>
 8006490:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006496:	07da      	lsls	r2, r3, #31
 8006498:	d405      	bmi.n	80064a6 <_puts_r+0x9a>
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	059b      	lsls	r3, r3, #22
 800649e:	d402      	bmi.n	80064a6 <_puts_r+0x9a>
 80064a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064a2:	f000 fadc 	bl	8006a5e <__retarget_lock_release_recursive>
 80064a6:	4628      	mov	r0, r5
 80064a8:	bd70      	pop	{r4, r5, r6, pc}
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da04      	bge.n	80064b8 <_puts_r+0xac>
 80064ae:	69a2      	ldr	r2, [r4, #24]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	dc06      	bgt.n	80064c2 <_puts_r+0xb6>
 80064b4:	290a      	cmp	r1, #10
 80064b6:	d004      	beq.n	80064c2 <_puts_r+0xb6>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	6022      	str	r2, [r4, #0]
 80064be:	7019      	strb	r1, [r3, #0]
 80064c0:	e7c5      	b.n	800644e <_puts_r+0x42>
 80064c2:	4622      	mov	r2, r4
 80064c4:	4628      	mov	r0, r5
 80064c6:	f000 f851 	bl	800656c <__swbuf_r>
 80064ca:	3001      	adds	r0, #1
 80064cc:	d1bf      	bne.n	800644e <_puts_r+0x42>
 80064ce:	e7df      	b.n	8006490 <_puts_r+0x84>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	250a      	movs	r5, #10
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	6022      	str	r2, [r4, #0]
 80064d8:	701d      	strb	r5, [r3, #0]
 80064da:	e7db      	b.n	8006494 <_puts_r+0x88>
 80064dc:	08007abc 	.word	0x08007abc
 80064e0:	08007adc 	.word	0x08007adc
 80064e4:	08007a9c 	.word	0x08007a9c

080064e8 <puts>:
 80064e8:	4b02      	ldr	r3, [pc, #8]	; (80064f4 <puts+0xc>)
 80064ea:	4601      	mov	r1, r0
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	f7ff bf8d 	b.w	800640c <_puts_r>
 80064f2:	bf00      	nop
 80064f4:	20000018 	.word	0x20000018

080064f8 <_vsniprintf_r>:
 80064f8:	b530      	push	{r4, r5, lr}
 80064fa:	4614      	mov	r4, r2
 80064fc:	2c00      	cmp	r4, #0
 80064fe:	b09b      	sub	sp, #108	; 0x6c
 8006500:	4605      	mov	r5, r0
 8006502:	461a      	mov	r2, r3
 8006504:	da05      	bge.n	8006512 <_vsniprintf_r+0x1a>
 8006506:	238b      	movs	r3, #139	; 0x8b
 8006508:	6003      	str	r3, [r0, #0]
 800650a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800650e:	b01b      	add	sp, #108	; 0x6c
 8006510:	bd30      	pop	{r4, r5, pc}
 8006512:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006516:	f8ad 300c 	strh.w	r3, [sp, #12]
 800651a:	bf14      	ite	ne
 800651c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006520:	4623      	moveq	r3, r4
 8006522:	9302      	str	r3, [sp, #8]
 8006524:	9305      	str	r3, [sp, #20]
 8006526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800652a:	9100      	str	r1, [sp, #0]
 800652c:	9104      	str	r1, [sp, #16]
 800652e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006532:	4669      	mov	r1, sp
 8006534:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006536:	f000 fc35 	bl	8006da4 <_svfiprintf_r>
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	bfbc      	itt	lt
 800653e:	238b      	movlt	r3, #139	; 0x8b
 8006540:	602b      	strlt	r3, [r5, #0]
 8006542:	2c00      	cmp	r4, #0
 8006544:	d0e3      	beq.n	800650e <_vsniprintf_r+0x16>
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	e7df      	b.n	800650e <_vsniprintf_r+0x16>
	...

08006550 <vsniprintf>:
 8006550:	b507      	push	{r0, r1, r2, lr}
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	460a      	mov	r2, r1
 8006558:	4601      	mov	r1, r0
 800655a:	4803      	ldr	r0, [pc, #12]	; (8006568 <vsniprintf+0x18>)
 800655c:	6800      	ldr	r0, [r0, #0]
 800655e:	f7ff ffcb 	bl	80064f8 <_vsniprintf_r>
 8006562:	b003      	add	sp, #12
 8006564:	f85d fb04 	ldr.w	pc, [sp], #4
 8006568:	20000018 	.word	0x20000018

0800656c <__swbuf_r>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	460e      	mov	r6, r1
 8006570:	4614      	mov	r4, r2
 8006572:	4605      	mov	r5, r0
 8006574:	b118      	cbz	r0, 800657e <__swbuf_r+0x12>
 8006576:	6983      	ldr	r3, [r0, #24]
 8006578:	b90b      	cbnz	r3, 800657e <__swbuf_r+0x12>
 800657a:	f000 f9d1 	bl	8006920 <__sinit>
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <__swbuf_r+0x98>)
 8006580:	429c      	cmp	r4, r3
 8006582:	d12b      	bne.n	80065dc <__swbuf_r+0x70>
 8006584:	686c      	ldr	r4, [r5, #4]
 8006586:	69a3      	ldr	r3, [r4, #24]
 8006588:	60a3      	str	r3, [r4, #8]
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	071a      	lsls	r2, r3, #28
 800658e:	d52f      	bpl.n	80065f0 <__swbuf_r+0x84>
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	b36b      	cbz	r3, 80065f0 <__swbuf_r+0x84>
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	1ac0      	subs	r0, r0, r3
 800659a:	6963      	ldr	r3, [r4, #20]
 800659c:	b2f6      	uxtb	r6, r6
 800659e:	4283      	cmp	r3, r0
 80065a0:	4637      	mov	r7, r6
 80065a2:	dc04      	bgt.n	80065ae <__swbuf_r+0x42>
 80065a4:	4621      	mov	r1, r4
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 f926 	bl	80067f8 <_fflush_r>
 80065ac:	bb30      	cbnz	r0, 80065fc <__swbuf_r+0x90>
 80065ae:	68a3      	ldr	r3, [r4, #8]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	60a3      	str	r3, [r4, #8]
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	6022      	str	r2, [r4, #0]
 80065ba:	701e      	strb	r6, [r3, #0]
 80065bc:	6963      	ldr	r3, [r4, #20]
 80065be:	3001      	adds	r0, #1
 80065c0:	4283      	cmp	r3, r0
 80065c2:	d004      	beq.n	80065ce <__swbuf_r+0x62>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	07db      	lsls	r3, r3, #31
 80065c8:	d506      	bpl.n	80065d8 <__swbuf_r+0x6c>
 80065ca:	2e0a      	cmp	r6, #10
 80065cc:	d104      	bne.n	80065d8 <__swbuf_r+0x6c>
 80065ce:	4621      	mov	r1, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 f911 	bl	80067f8 <_fflush_r>
 80065d6:	b988      	cbnz	r0, 80065fc <__swbuf_r+0x90>
 80065d8:	4638      	mov	r0, r7
 80065da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <__swbuf_r+0x9c>)
 80065de:	429c      	cmp	r4, r3
 80065e0:	d101      	bne.n	80065e6 <__swbuf_r+0x7a>
 80065e2:	68ac      	ldr	r4, [r5, #8]
 80065e4:	e7cf      	b.n	8006586 <__swbuf_r+0x1a>
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <__swbuf_r+0xa0>)
 80065e8:	429c      	cmp	r4, r3
 80065ea:	bf08      	it	eq
 80065ec:	68ec      	ldreq	r4, [r5, #12]
 80065ee:	e7ca      	b.n	8006586 <__swbuf_r+0x1a>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f80c 	bl	8006610 <__swsetup_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d0cb      	beq.n	8006594 <__swbuf_r+0x28>
 80065fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006600:	e7ea      	b.n	80065d8 <__swbuf_r+0x6c>
 8006602:	bf00      	nop
 8006604:	08007abc 	.word	0x08007abc
 8006608:	08007adc 	.word	0x08007adc
 800660c:	08007a9c 	.word	0x08007a9c

08006610 <__swsetup_r>:
 8006610:	4b32      	ldr	r3, [pc, #200]	; (80066dc <__swsetup_r+0xcc>)
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	681d      	ldr	r5, [r3, #0]
 8006616:	4606      	mov	r6, r0
 8006618:	460c      	mov	r4, r1
 800661a:	b125      	cbz	r5, 8006626 <__swsetup_r+0x16>
 800661c:	69ab      	ldr	r3, [r5, #24]
 800661e:	b913      	cbnz	r3, 8006626 <__swsetup_r+0x16>
 8006620:	4628      	mov	r0, r5
 8006622:	f000 f97d 	bl	8006920 <__sinit>
 8006626:	4b2e      	ldr	r3, [pc, #184]	; (80066e0 <__swsetup_r+0xd0>)
 8006628:	429c      	cmp	r4, r3
 800662a:	d10f      	bne.n	800664c <__swsetup_r+0x3c>
 800662c:	686c      	ldr	r4, [r5, #4]
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006634:	0719      	lsls	r1, r3, #28
 8006636:	d42c      	bmi.n	8006692 <__swsetup_r+0x82>
 8006638:	06dd      	lsls	r5, r3, #27
 800663a:	d411      	bmi.n	8006660 <__swsetup_r+0x50>
 800663c:	2309      	movs	r3, #9
 800663e:	6033      	str	r3, [r6, #0]
 8006640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800664a:	e03e      	b.n	80066ca <__swsetup_r+0xba>
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <__swsetup_r+0xd4>)
 800664e:	429c      	cmp	r4, r3
 8006650:	d101      	bne.n	8006656 <__swsetup_r+0x46>
 8006652:	68ac      	ldr	r4, [r5, #8]
 8006654:	e7eb      	b.n	800662e <__swsetup_r+0x1e>
 8006656:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <__swsetup_r+0xd8>)
 8006658:	429c      	cmp	r4, r3
 800665a:	bf08      	it	eq
 800665c:	68ec      	ldreq	r4, [r5, #12]
 800665e:	e7e6      	b.n	800662e <__swsetup_r+0x1e>
 8006660:	0758      	lsls	r0, r3, #29
 8006662:	d512      	bpl.n	800668a <__swsetup_r+0x7a>
 8006664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006666:	b141      	cbz	r1, 800667a <__swsetup_r+0x6a>
 8006668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800666c:	4299      	cmp	r1, r3
 800666e:	d002      	beq.n	8006676 <__swsetup_r+0x66>
 8006670:	4630      	mov	r0, r6
 8006672:	f000 fa5b 	bl	8006b2c <_free_r>
 8006676:	2300      	movs	r3, #0
 8006678:	6363      	str	r3, [r4, #52]	; 0x34
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	2300      	movs	r3, #0
 8006684:	6063      	str	r3, [r4, #4]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f043 0308 	orr.w	r3, r3, #8
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	b94b      	cbnz	r3, 80066aa <__swsetup_r+0x9a>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	d003      	beq.n	80066aa <__swsetup_r+0x9a>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4630      	mov	r0, r6
 80066a6:	f000 fa01 	bl	8006aac <__smakebuf_r>
 80066aa:	89a0      	ldrh	r0, [r4, #12]
 80066ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066b0:	f010 0301 	ands.w	r3, r0, #1
 80066b4:	d00a      	beq.n	80066cc <__swsetup_r+0xbc>
 80066b6:	2300      	movs	r3, #0
 80066b8:	60a3      	str	r3, [r4, #8]
 80066ba:	6963      	ldr	r3, [r4, #20]
 80066bc:	425b      	negs	r3, r3
 80066be:	61a3      	str	r3, [r4, #24]
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	b943      	cbnz	r3, 80066d6 <__swsetup_r+0xc6>
 80066c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066c8:	d1ba      	bne.n	8006640 <__swsetup_r+0x30>
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	0781      	lsls	r1, r0, #30
 80066ce:	bf58      	it	pl
 80066d0:	6963      	ldrpl	r3, [r4, #20]
 80066d2:	60a3      	str	r3, [r4, #8]
 80066d4:	e7f4      	b.n	80066c0 <__swsetup_r+0xb0>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e7f7      	b.n	80066ca <__swsetup_r+0xba>
 80066da:	bf00      	nop
 80066dc:	20000018 	.word	0x20000018
 80066e0:	08007abc 	.word	0x08007abc
 80066e4:	08007adc 	.word	0x08007adc
 80066e8:	08007a9c 	.word	0x08007a9c

080066ec <__sflush_r>:
 80066ec:	898a      	ldrh	r2, [r1, #12]
 80066ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f2:	4605      	mov	r5, r0
 80066f4:	0710      	lsls	r0, r2, #28
 80066f6:	460c      	mov	r4, r1
 80066f8:	d458      	bmi.n	80067ac <__sflush_r+0xc0>
 80066fa:	684b      	ldr	r3, [r1, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dc05      	bgt.n	800670c <__sflush_r+0x20>
 8006700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	dc02      	bgt.n	800670c <__sflush_r+0x20>
 8006706:	2000      	movs	r0, #0
 8006708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800670c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800670e:	2e00      	cmp	r6, #0
 8006710:	d0f9      	beq.n	8006706 <__sflush_r+0x1a>
 8006712:	2300      	movs	r3, #0
 8006714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006718:	682f      	ldr	r7, [r5, #0]
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	d032      	beq.n	8006784 <__sflush_r+0x98>
 800671e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	075a      	lsls	r2, r3, #29
 8006724:	d505      	bpl.n	8006732 <__sflush_r+0x46>
 8006726:	6863      	ldr	r3, [r4, #4]
 8006728:	1ac0      	subs	r0, r0, r3
 800672a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800672c:	b10b      	cbz	r3, 8006732 <__sflush_r+0x46>
 800672e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006730:	1ac0      	subs	r0, r0, r3
 8006732:	2300      	movs	r3, #0
 8006734:	4602      	mov	r2, r0
 8006736:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006738:	6a21      	ldr	r1, [r4, #32]
 800673a:	4628      	mov	r0, r5
 800673c:	47b0      	blx	r6
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	d106      	bne.n	8006752 <__sflush_r+0x66>
 8006744:	6829      	ldr	r1, [r5, #0]
 8006746:	291d      	cmp	r1, #29
 8006748:	d82c      	bhi.n	80067a4 <__sflush_r+0xb8>
 800674a:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <__sflush_r+0x108>)
 800674c:	40ca      	lsrs	r2, r1
 800674e:	07d6      	lsls	r6, r2, #31
 8006750:	d528      	bpl.n	80067a4 <__sflush_r+0xb8>
 8006752:	2200      	movs	r2, #0
 8006754:	6062      	str	r2, [r4, #4]
 8006756:	04d9      	lsls	r1, r3, #19
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	6022      	str	r2, [r4, #0]
 800675c:	d504      	bpl.n	8006768 <__sflush_r+0x7c>
 800675e:	1c42      	adds	r2, r0, #1
 8006760:	d101      	bne.n	8006766 <__sflush_r+0x7a>
 8006762:	682b      	ldr	r3, [r5, #0]
 8006764:	b903      	cbnz	r3, 8006768 <__sflush_r+0x7c>
 8006766:	6560      	str	r0, [r4, #84]	; 0x54
 8006768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800676a:	602f      	str	r7, [r5, #0]
 800676c:	2900      	cmp	r1, #0
 800676e:	d0ca      	beq.n	8006706 <__sflush_r+0x1a>
 8006770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006774:	4299      	cmp	r1, r3
 8006776:	d002      	beq.n	800677e <__sflush_r+0x92>
 8006778:	4628      	mov	r0, r5
 800677a:	f000 f9d7 	bl	8006b2c <_free_r>
 800677e:	2000      	movs	r0, #0
 8006780:	6360      	str	r0, [r4, #52]	; 0x34
 8006782:	e7c1      	b.n	8006708 <__sflush_r+0x1c>
 8006784:	6a21      	ldr	r1, [r4, #32]
 8006786:	2301      	movs	r3, #1
 8006788:	4628      	mov	r0, r5
 800678a:	47b0      	blx	r6
 800678c:	1c41      	adds	r1, r0, #1
 800678e:	d1c7      	bne.n	8006720 <__sflush_r+0x34>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0c4      	beq.n	8006720 <__sflush_r+0x34>
 8006796:	2b1d      	cmp	r3, #29
 8006798:	d001      	beq.n	800679e <__sflush_r+0xb2>
 800679a:	2b16      	cmp	r3, #22
 800679c:	d101      	bne.n	80067a2 <__sflush_r+0xb6>
 800679e:	602f      	str	r7, [r5, #0]
 80067a0:	e7b1      	b.n	8006706 <__sflush_r+0x1a>
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	e7ad      	b.n	8006708 <__sflush_r+0x1c>
 80067ac:	690f      	ldr	r7, [r1, #16]
 80067ae:	2f00      	cmp	r7, #0
 80067b0:	d0a9      	beq.n	8006706 <__sflush_r+0x1a>
 80067b2:	0793      	lsls	r3, r2, #30
 80067b4:	680e      	ldr	r6, [r1, #0]
 80067b6:	bf08      	it	eq
 80067b8:	694b      	ldreq	r3, [r1, #20]
 80067ba:	600f      	str	r7, [r1, #0]
 80067bc:	bf18      	it	ne
 80067be:	2300      	movne	r3, #0
 80067c0:	eba6 0807 	sub.w	r8, r6, r7
 80067c4:	608b      	str	r3, [r1, #8]
 80067c6:	f1b8 0f00 	cmp.w	r8, #0
 80067ca:	dd9c      	ble.n	8006706 <__sflush_r+0x1a>
 80067cc:	6a21      	ldr	r1, [r4, #32]
 80067ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067d0:	4643      	mov	r3, r8
 80067d2:	463a      	mov	r2, r7
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b0      	blx	r6
 80067d8:	2800      	cmp	r0, #0
 80067da:	dc06      	bgt.n	80067ea <__sflush_r+0xfe>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067e8:	e78e      	b.n	8006708 <__sflush_r+0x1c>
 80067ea:	4407      	add	r7, r0
 80067ec:	eba8 0800 	sub.w	r8, r8, r0
 80067f0:	e7e9      	b.n	80067c6 <__sflush_r+0xda>
 80067f2:	bf00      	nop
 80067f4:	20400001 	.word	0x20400001

080067f8 <_fflush_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	690b      	ldr	r3, [r1, #16]
 80067fc:	4605      	mov	r5, r0
 80067fe:	460c      	mov	r4, r1
 8006800:	b913      	cbnz	r3, 8006808 <_fflush_r+0x10>
 8006802:	2500      	movs	r5, #0
 8006804:	4628      	mov	r0, r5
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	b118      	cbz	r0, 8006812 <_fflush_r+0x1a>
 800680a:	6983      	ldr	r3, [r0, #24]
 800680c:	b90b      	cbnz	r3, 8006812 <_fflush_r+0x1a>
 800680e:	f000 f887 	bl	8006920 <__sinit>
 8006812:	4b14      	ldr	r3, [pc, #80]	; (8006864 <_fflush_r+0x6c>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d11b      	bne.n	8006850 <_fflush_r+0x58>
 8006818:	686c      	ldr	r4, [r5, #4]
 800681a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0ef      	beq.n	8006802 <_fflush_r+0xa>
 8006822:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006824:	07d0      	lsls	r0, r2, #31
 8006826:	d404      	bmi.n	8006832 <_fflush_r+0x3a>
 8006828:	0599      	lsls	r1, r3, #22
 800682a:	d402      	bmi.n	8006832 <_fflush_r+0x3a>
 800682c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800682e:	f000 f915 	bl	8006a5c <__retarget_lock_acquire_recursive>
 8006832:	4628      	mov	r0, r5
 8006834:	4621      	mov	r1, r4
 8006836:	f7ff ff59 	bl	80066ec <__sflush_r>
 800683a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800683c:	07da      	lsls	r2, r3, #31
 800683e:	4605      	mov	r5, r0
 8006840:	d4e0      	bmi.n	8006804 <_fflush_r+0xc>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	059b      	lsls	r3, r3, #22
 8006846:	d4dd      	bmi.n	8006804 <_fflush_r+0xc>
 8006848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800684a:	f000 f908 	bl	8006a5e <__retarget_lock_release_recursive>
 800684e:	e7d9      	b.n	8006804 <_fflush_r+0xc>
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <_fflush_r+0x70>)
 8006852:	429c      	cmp	r4, r3
 8006854:	d101      	bne.n	800685a <_fflush_r+0x62>
 8006856:	68ac      	ldr	r4, [r5, #8]
 8006858:	e7df      	b.n	800681a <_fflush_r+0x22>
 800685a:	4b04      	ldr	r3, [pc, #16]	; (800686c <_fflush_r+0x74>)
 800685c:	429c      	cmp	r4, r3
 800685e:	bf08      	it	eq
 8006860:	68ec      	ldreq	r4, [r5, #12]
 8006862:	e7da      	b.n	800681a <_fflush_r+0x22>
 8006864:	08007abc 	.word	0x08007abc
 8006868:	08007adc 	.word	0x08007adc
 800686c:	08007a9c 	.word	0x08007a9c

08006870 <std>:
 8006870:	2300      	movs	r3, #0
 8006872:	b510      	push	{r4, lr}
 8006874:	4604      	mov	r4, r0
 8006876:	e9c0 3300 	strd	r3, r3, [r0]
 800687a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800687e:	6083      	str	r3, [r0, #8]
 8006880:	8181      	strh	r1, [r0, #12]
 8006882:	6643      	str	r3, [r0, #100]	; 0x64
 8006884:	81c2      	strh	r2, [r0, #14]
 8006886:	6183      	str	r3, [r0, #24]
 8006888:	4619      	mov	r1, r3
 800688a:	2208      	movs	r2, #8
 800688c:	305c      	adds	r0, #92	; 0x5c
 800688e:	f7ff fd9d 	bl	80063cc <memset>
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <std+0x38>)
 8006894:	6263      	str	r3, [r4, #36]	; 0x24
 8006896:	4b05      	ldr	r3, [pc, #20]	; (80068ac <std+0x3c>)
 8006898:	62a3      	str	r3, [r4, #40]	; 0x28
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <std+0x40>)
 800689c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <std+0x44>)
 80068a0:	6224      	str	r4, [r4, #32]
 80068a2:	6323      	str	r3, [r4, #48]	; 0x30
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	bf00      	nop
 80068a8:	080075a1 	.word	0x080075a1
 80068ac:	080075c3 	.word	0x080075c3
 80068b0:	080075fb 	.word	0x080075fb
 80068b4:	0800761f 	.word	0x0800761f

080068b8 <_cleanup_r>:
 80068b8:	4901      	ldr	r1, [pc, #4]	; (80068c0 <_cleanup_r+0x8>)
 80068ba:	f000 b8af 	b.w	8006a1c <_fwalk_reent>
 80068be:	bf00      	nop
 80068c0:	080067f9 	.word	0x080067f9

080068c4 <__sfmoreglue>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	2268      	movs	r2, #104	; 0x68
 80068c8:	1e4d      	subs	r5, r1, #1
 80068ca:	4355      	muls	r5, r2
 80068cc:	460e      	mov	r6, r1
 80068ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068d2:	f000 f997 	bl	8006c04 <_malloc_r>
 80068d6:	4604      	mov	r4, r0
 80068d8:	b140      	cbz	r0, 80068ec <__sfmoreglue+0x28>
 80068da:	2100      	movs	r1, #0
 80068dc:	e9c0 1600 	strd	r1, r6, [r0]
 80068e0:	300c      	adds	r0, #12
 80068e2:	60a0      	str	r0, [r4, #8]
 80068e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068e8:	f7ff fd70 	bl	80063cc <memset>
 80068ec:	4620      	mov	r0, r4
 80068ee:	bd70      	pop	{r4, r5, r6, pc}

080068f0 <__sfp_lock_acquire>:
 80068f0:	4801      	ldr	r0, [pc, #4]	; (80068f8 <__sfp_lock_acquire+0x8>)
 80068f2:	f000 b8b3 	b.w	8006a5c <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	20000751 	.word	0x20000751

080068fc <__sfp_lock_release>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__sfp_lock_release+0x8>)
 80068fe:	f000 b8ae 	b.w	8006a5e <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	20000751 	.word	0x20000751

08006908 <__sinit_lock_acquire>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__sinit_lock_acquire+0x8>)
 800690a:	f000 b8a7 	b.w	8006a5c <__retarget_lock_acquire_recursive>
 800690e:	bf00      	nop
 8006910:	20000752 	.word	0x20000752

08006914 <__sinit_lock_release>:
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <__sinit_lock_release+0x8>)
 8006916:	f000 b8a2 	b.w	8006a5e <__retarget_lock_release_recursive>
 800691a:	bf00      	nop
 800691c:	20000752 	.word	0x20000752

08006920 <__sinit>:
 8006920:	b510      	push	{r4, lr}
 8006922:	4604      	mov	r4, r0
 8006924:	f7ff fff0 	bl	8006908 <__sinit_lock_acquire>
 8006928:	69a3      	ldr	r3, [r4, #24]
 800692a:	b11b      	cbz	r3, 8006934 <__sinit+0x14>
 800692c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006930:	f7ff bff0 	b.w	8006914 <__sinit_lock_release>
 8006934:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006938:	6523      	str	r3, [r4, #80]	; 0x50
 800693a:	4b13      	ldr	r3, [pc, #76]	; (8006988 <__sinit+0x68>)
 800693c:	4a13      	ldr	r2, [pc, #76]	; (800698c <__sinit+0x6c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	62a2      	str	r2, [r4, #40]	; 0x28
 8006942:	42a3      	cmp	r3, r4
 8006944:	bf04      	itt	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	61a3      	streq	r3, [r4, #24]
 800694a:	4620      	mov	r0, r4
 800694c:	f000 f820 	bl	8006990 <__sfp>
 8006950:	6060      	str	r0, [r4, #4]
 8006952:	4620      	mov	r0, r4
 8006954:	f000 f81c 	bl	8006990 <__sfp>
 8006958:	60a0      	str	r0, [r4, #8]
 800695a:	4620      	mov	r0, r4
 800695c:	f000 f818 	bl	8006990 <__sfp>
 8006960:	2200      	movs	r2, #0
 8006962:	60e0      	str	r0, [r4, #12]
 8006964:	2104      	movs	r1, #4
 8006966:	6860      	ldr	r0, [r4, #4]
 8006968:	f7ff ff82 	bl	8006870 <std>
 800696c:	68a0      	ldr	r0, [r4, #8]
 800696e:	2201      	movs	r2, #1
 8006970:	2109      	movs	r1, #9
 8006972:	f7ff ff7d 	bl	8006870 <std>
 8006976:	68e0      	ldr	r0, [r4, #12]
 8006978:	2202      	movs	r2, #2
 800697a:	2112      	movs	r1, #18
 800697c:	f7ff ff78 	bl	8006870 <std>
 8006980:	2301      	movs	r3, #1
 8006982:	61a3      	str	r3, [r4, #24]
 8006984:	e7d2      	b.n	800692c <__sinit+0xc>
 8006986:	bf00      	nop
 8006988:	08007a98 	.word	0x08007a98
 800698c:	080068b9 	.word	0x080068b9

08006990 <__sfp>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	4607      	mov	r7, r0
 8006994:	f7ff ffac 	bl	80068f0 <__sfp_lock_acquire>
 8006998:	4b1e      	ldr	r3, [pc, #120]	; (8006a14 <__sfp+0x84>)
 800699a:	681e      	ldr	r6, [r3, #0]
 800699c:	69b3      	ldr	r3, [r6, #24]
 800699e:	b913      	cbnz	r3, 80069a6 <__sfp+0x16>
 80069a0:	4630      	mov	r0, r6
 80069a2:	f7ff ffbd 	bl	8006920 <__sinit>
 80069a6:	3648      	adds	r6, #72	; 0x48
 80069a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	d503      	bpl.n	80069b8 <__sfp+0x28>
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	b30b      	cbz	r3, 80069f8 <__sfp+0x68>
 80069b4:	6836      	ldr	r6, [r6, #0]
 80069b6:	e7f7      	b.n	80069a8 <__sfp+0x18>
 80069b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069bc:	b9d5      	cbnz	r5, 80069f4 <__sfp+0x64>
 80069be:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <__sfp+0x88>)
 80069c0:	60e3      	str	r3, [r4, #12]
 80069c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069c6:	6665      	str	r5, [r4, #100]	; 0x64
 80069c8:	f000 f847 	bl	8006a5a <__retarget_lock_init_recursive>
 80069cc:	f7ff ff96 	bl	80068fc <__sfp_lock_release>
 80069d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069d8:	6025      	str	r5, [r4, #0]
 80069da:	61a5      	str	r5, [r4, #24]
 80069dc:	2208      	movs	r2, #8
 80069de:	4629      	mov	r1, r5
 80069e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069e4:	f7ff fcf2 	bl	80063cc <memset>
 80069e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069f0:	4620      	mov	r0, r4
 80069f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f4:	3468      	adds	r4, #104	; 0x68
 80069f6:	e7d9      	b.n	80069ac <__sfp+0x1c>
 80069f8:	2104      	movs	r1, #4
 80069fa:	4638      	mov	r0, r7
 80069fc:	f7ff ff62 	bl	80068c4 <__sfmoreglue>
 8006a00:	4604      	mov	r4, r0
 8006a02:	6030      	str	r0, [r6, #0]
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d1d5      	bne.n	80069b4 <__sfp+0x24>
 8006a08:	f7ff ff78 	bl	80068fc <__sfp_lock_release>
 8006a0c:	230c      	movs	r3, #12
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	e7ee      	b.n	80069f0 <__sfp+0x60>
 8006a12:	bf00      	nop
 8006a14:	08007a98 	.word	0x08007a98
 8006a18:	ffff0001 	.word	0xffff0001

08006a1c <_fwalk_reent>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	4606      	mov	r6, r0
 8006a22:	4688      	mov	r8, r1
 8006a24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a28:	2700      	movs	r7, #0
 8006a2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a2e:	f1b9 0901 	subs.w	r9, r9, #1
 8006a32:	d505      	bpl.n	8006a40 <_fwalk_reent+0x24>
 8006a34:	6824      	ldr	r4, [r4, #0]
 8006a36:	2c00      	cmp	r4, #0
 8006a38:	d1f7      	bne.n	8006a2a <_fwalk_reent+0xe>
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a40:	89ab      	ldrh	r3, [r5, #12]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d907      	bls.n	8006a56 <_fwalk_reent+0x3a>
 8006a46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	d003      	beq.n	8006a56 <_fwalk_reent+0x3a>
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4630      	mov	r0, r6
 8006a52:	47c0      	blx	r8
 8006a54:	4307      	orrs	r7, r0
 8006a56:	3568      	adds	r5, #104	; 0x68
 8006a58:	e7e9      	b.n	8006a2e <_fwalk_reent+0x12>

08006a5a <__retarget_lock_init_recursive>:
 8006a5a:	4770      	bx	lr

08006a5c <__retarget_lock_acquire_recursive>:
 8006a5c:	4770      	bx	lr

08006a5e <__retarget_lock_release_recursive>:
 8006a5e:	4770      	bx	lr

08006a60 <__swhatbuf_r>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	460e      	mov	r6, r1
 8006a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	b096      	sub	sp, #88	; 0x58
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	da08      	bge.n	8006a84 <__swhatbuf_r+0x24>
 8006a72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	602a      	str	r2, [r5, #0]
 8006a7a:	061a      	lsls	r2, r3, #24
 8006a7c:	d410      	bmi.n	8006aa0 <__swhatbuf_r+0x40>
 8006a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a82:	e00e      	b.n	8006aa2 <__swhatbuf_r+0x42>
 8006a84:	466a      	mov	r2, sp
 8006a86:	f000 fdf1 	bl	800766c <_fstat_r>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	dbf1      	blt.n	8006a72 <__swhatbuf_r+0x12>
 8006a8e:	9a01      	ldr	r2, [sp, #4]
 8006a90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a98:	425a      	negs	r2, r3
 8006a9a:	415a      	adcs	r2, r3
 8006a9c:	602a      	str	r2, [r5, #0]
 8006a9e:	e7ee      	b.n	8006a7e <__swhatbuf_r+0x1e>
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	b016      	add	sp, #88	; 0x58
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006aac <__smakebuf_r>:
 8006aac:	898b      	ldrh	r3, [r1, #12]
 8006aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ab0:	079d      	lsls	r5, r3, #30
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	d507      	bpl.n	8006ac8 <__smakebuf_r+0x1c>
 8006ab8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	6123      	str	r3, [r4, #16]
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	6163      	str	r3, [r4, #20]
 8006ac4:	b002      	add	sp, #8
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	ab01      	add	r3, sp, #4
 8006aca:	466a      	mov	r2, sp
 8006acc:	f7ff ffc8 	bl	8006a60 <__swhatbuf_r>
 8006ad0:	9900      	ldr	r1, [sp, #0]
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f000 f895 	bl	8006c04 <_malloc_r>
 8006ada:	b948      	cbnz	r0, 8006af0 <__smakebuf_r+0x44>
 8006adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae0:	059a      	lsls	r2, r3, #22
 8006ae2:	d4ef      	bmi.n	8006ac4 <__smakebuf_r+0x18>
 8006ae4:	f023 0303 	bic.w	r3, r3, #3
 8006ae8:	f043 0302 	orr.w	r3, r3, #2
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	e7e3      	b.n	8006ab8 <__smakebuf_r+0xc>
 8006af0:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <__smakebuf_r+0x7c>)
 8006af2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	6020      	str	r0, [r4, #0]
 8006af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	9b00      	ldr	r3, [sp, #0]
 8006b00:	6163      	str	r3, [r4, #20]
 8006b02:	9b01      	ldr	r3, [sp, #4]
 8006b04:	6120      	str	r0, [r4, #16]
 8006b06:	b15b      	cbz	r3, 8006b20 <__smakebuf_r+0x74>
 8006b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f000 fdbf 	bl	8007690 <_isatty_r>
 8006b12:	b128      	cbz	r0, 8006b20 <__smakebuf_r+0x74>
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	89a0      	ldrh	r0, [r4, #12]
 8006b22:	4305      	orrs	r5, r0
 8006b24:	81a5      	strh	r5, [r4, #12]
 8006b26:	e7cd      	b.n	8006ac4 <__smakebuf_r+0x18>
 8006b28:	080068b9 	.word	0x080068b9

08006b2c <_free_r>:
 8006b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d044      	beq.n	8006bbc <_free_r+0x90>
 8006b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b36:	9001      	str	r0, [sp, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b3e:	bfb8      	it	lt
 8006b40:	18e4      	addlt	r4, r4, r3
 8006b42:	f000 fde1 	bl	8007708 <__malloc_lock>
 8006b46:	4a1e      	ldr	r2, [pc, #120]	; (8006bc0 <_free_r+0x94>)
 8006b48:	9801      	ldr	r0, [sp, #4]
 8006b4a:	6813      	ldr	r3, [r2, #0]
 8006b4c:	b933      	cbnz	r3, 8006b5c <_free_r+0x30>
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	6014      	str	r4, [r2, #0]
 8006b52:	b003      	add	sp, #12
 8006b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b58:	f000 bddc 	b.w	8007714 <__malloc_unlock>
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	d908      	bls.n	8006b72 <_free_r+0x46>
 8006b60:	6825      	ldr	r5, [r4, #0]
 8006b62:	1961      	adds	r1, r4, r5
 8006b64:	428b      	cmp	r3, r1
 8006b66:	bf01      	itttt	eq
 8006b68:	6819      	ldreq	r1, [r3, #0]
 8006b6a:	685b      	ldreq	r3, [r3, #4]
 8006b6c:	1949      	addeq	r1, r1, r5
 8006b6e:	6021      	streq	r1, [r4, #0]
 8006b70:	e7ed      	b.n	8006b4e <_free_r+0x22>
 8006b72:	461a      	mov	r2, r3
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	b10b      	cbz	r3, 8006b7c <_free_r+0x50>
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	d9fa      	bls.n	8006b72 <_free_r+0x46>
 8006b7c:	6811      	ldr	r1, [r2, #0]
 8006b7e:	1855      	adds	r5, r2, r1
 8006b80:	42a5      	cmp	r5, r4
 8006b82:	d10b      	bne.n	8006b9c <_free_r+0x70>
 8006b84:	6824      	ldr	r4, [r4, #0]
 8006b86:	4421      	add	r1, r4
 8006b88:	1854      	adds	r4, r2, r1
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	6011      	str	r1, [r2, #0]
 8006b8e:	d1e0      	bne.n	8006b52 <_free_r+0x26>
 8006b90:	681c      	ldr	r4, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	6053      	str	r3, [r2, #4]
 8006b96:	4421      	add	r1, r4
 8006b98:	6011      	str	r1, [r2, #0]
 8006b9a:	e7da      	b.n	8006b52 <_free_r+0x26>
 8006b9c:	d902      	bls.n	8006ba4 <_free_r+0x78>
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	6003      	str	r3, [r0, #0]
 8006ba2:	e7d6      	b.n	8006b52 <_free_r+0x26>
 8006ba4:	6825      	ldr	r5, [r4, #0]
 8006ba6:	1961      	adds	r1, r4, r5
 8006ba8:	428b      	cmp	r3, r1
 8006baa:	bf04      	itt	eq
 8006bac:	6819      	ldreq	r1, [r3, #0]
 8006bae:	685b      	ldreq	r3, [r3, #4]
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	bf04      	itt	eq
 8006bb4:	1949      	addeq	r1, r1, r5
 8006bb6:	6021      	streq	r1, [r4, #0]
 8006bb8:	6054      	str	r4, [r2, #4]
 8006bba:	e7ca      	b.n	8006b52 <_free_r+0x26>
 8006bbc:	b003      	add	sp, #12
 8006bbe:	bd30      	pop	{r4, r5, pc}
 8006bc0:	20000754 	.word	0x20000754

08006bc4 <sbrk_aligned>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	4e0e      	ldr	r6, [pc, #56]	; (8006c00 <sbrk_aligned+0x3c>)
 8006bc8:	460c      	mov	r4, r1
 8006bca:	6831      	ldr	r1, [r6, #0]
 8006bcc:	4605      	mov	r5, r0
 8006bce:	b911      	cbnz	r1, 8006bd6 <sbrk_aligned+0x12>
 8006bd0:	f000 fcd6 	bl	8007580 <_sbrk_r>
 8006bd4:	6030      	str	r0, [r6, #0]
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f000 fcd1 	bl	8007580 <_sbrk_r>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d00a      	beq.n	8006bf8 <sbrk_aligned+0x34>
 8006be2:	1cc4      	adds	r4, r0, #3
 8006be4:	f024 0403 	bic.w	r4, r4, #3
 8006be8:	42a0      	cmp	r0, r4
 8006bea:	d007      	beq.n	8006bfc <sbrk_aligned+0x38>
 8006bec:	1a21      	subs	r1, r4, r0
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 fcc6 	bl	8007580 <_sbrk_r>
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d101      	bne.n	8006bfc <sbrk_aligned+0x38>
 8006bf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}
 8006c00:	20000758 	.word	0x20000758

08006c04 <_malloc_r>:
 8006c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c08:	1ccd      	adds	r5, r1, #3
 8006c0a:	f025 0503 	bic.w	r5, r5, #3
 8006c0e:	3508      	adds	r5, #8
 8006c10:	2d0c      	cmp	r5, #12
 8006c12:	bf38      	it	cc
 8006c14:	250c      	movcc	r5, #12
 8006c16:	2d00      	cmp	r5, #0
 8006c18:	4607      	mov	r7, r0
 8006c1a:	db01      	blt.n	8006c20 <_malloc_r+0x1c>
 8006c1c:	42a9      	cmp	r1, r5
 8006c1e:	d905      	bls.n	8006c2c <_malloc_r+0x28>
 8006c20:	230c      	movs	r3, #12
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	2600      	movs	r6, #0
 8006c26:	4630      	mov	r0, r6
 8006c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c2c:	4e2e      	ldr	r6, [pc, #184]	; (8006ce8 <_malloc_r+0xe4>)
 8006c2e:	f000 fd6b 	bl	8007708 <__malloc_lock>
 8006c32:	6833      	ldr	r3, [r6, #0]
 8006c34:	461c      	mov	r4, r3
 8006c36:	bb34      	cbnz	r4, 8006c86 <_malloc_r+0x82>
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f7ff ffc2 	bl	8006bc4 <sbrk_aligned>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	4604      	mov	r4, r0
 8006c44:	d14d      	bne.n	8006ce2 <_malloc_r+0xde>
 8006c46:	6834      	ldr	r4, [r6, #0]
 8006c48:	4626      	mov	r6, r4
 8006c4a:	2e00      	cmp	r6, #0
 8006c4c:	d140      	bne.n	8006cd0 <_malloc_r+0xcc>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	4631      	mov	r1, r6
 8006c52:	4638      	mov	r0, r7
 8006c54:	eb04 0803 	add.w	r8, r4, r3
 8006c58:	f000 fc92 	bl	8007580 <_sbrk_r>
 8006c5c:	4580      	cmp	r8, r0
 8006c5e:	d13a      	bne.n	8006cd6 <_malloc_r+0xd2>
 8006c60:	6821      	ldr	r1, [r4, #0]
 8006c62:	3503      	adds	r5, #3
 8006c64:	1a6d      	subs	r5, r5, r1
 8006c66:	f025 0503 	bic.w	r5, r5, #3
 8006c6a:	3508      	adds	r5, #8
 8006c6c:	2d0c      	cmp	r5, #12
 8006c6e:	bf38      	it	cc
 8006c70:	250c      	movcc	r5, #12
 8006c72:	4629      	mov	r1, r5
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff ffa5 	bl	8006bc4 <sbrk_aligned>
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d02b      	beq.n	8006cd6 <_malloc_r+0xd2>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	442b      	add	r3, r5
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	e00e      	b.n	8006ca4 <_malloc_r+0xa0>
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	1b52      	subs	r2, r2, r5
 8006c8a:	d41e      	bmi.n	8006cca <_malloc_r+0xc6>
 8006c8c:	2a0b      	cmp	r2, #11
 8006c8e:	d916      	bls.n	8006cbe <_malloc_r+0xba>
 8006c90:	1961      	adds	r1, r4, r5
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	6025      	str	r5, [r4, #0]
 8006c96:	bf18      	it	ne
 8006c98:	6059      	strne	r1, [r3, #4]
 8006c9a:	6863      	ldr	r3, [r4, #4]
 8006c9c:	bf08      	it	eq
 8006c9e:	6031      	streq	r1, [r6, #0]
 8006ca0:	5162      	str	r2, [r4, r5]
 8006ca2:	604b      	str	r3, [r1, #4]
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f104 060b 	add.w	r6, r4, #11
 8006caa:	f000 fd33 	bl	8007714 <__malloc_unlock>
 8006cae:	f026 0607 	bic.w	r6, r6, #7
 8006cb2:	1d23      	adds	r3, r4, #4
 8006cb4:	1af2      	subs	r2, r6, r3
 8006cb6:	d0b6      	beq.n	8006c26 <_malloc_r+0x22>
 8006cb8:	1b9b      	subs	r3, r3, r6
 8006cba:	50a3      	str	r3, [r4, r2]
 8006cbc:	e7b3      	b.n	8006c26 <_malloc_r+0x22>
 8006cbe:	6862      	ldr	r2, [r4, #4]
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	bf0c      	ite	eq
 8006cc4:	6032      	streq	r2, [r6, #0]
 8006cc6:	605a      	strne	r2, [r3, #4]
 8006cc8:	e7ec      	b.n	8006ca4 <_malloc_r+0xa0>
 8006cca:	4623      	mov	r3, r4
 8006ccc:	6864      	ldr	r4, [r4, #4]
 8006cce:	e7b2      	b.n	8006c36 <_malloc_r+0x32>
 8006cd0:	4634      	mov	r4, r6
 8006cd2:	6876      	ldr	r6, [r6, #4]
 8006cd4:	e7b9      	b.n	8006c4a <_malloc_r+0x46>
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f000 fd1a 	bl	8007714 <__malloc_unlock>
 8006ce0:	e7a1      	b.n	8006c26 <_malloc_r+0x22>
 8006ce2:	6025      	str	r5, [r4, #0]
 8006ce4:	e7de      	b.n	8006ca4 <_malloc_r+0xa0>
 8006ce6:	bf00      	nop
 8006ce8:	20000754 	.word	0x20000754

08006cec <__ssputs_r>:
 8006cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	688e      	ldr	r6, [r1, #8]
 8006cf2:	429e      	cmp	r6, r3
 8006cf4:	4682      	mov	sl, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	4690      	mov	r8, r2
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	d838      	bhi.n	8006d70 <__ssputs_r+0x84>
 8006cfe:	898a      	ldrh	r2, [r1, #12]
 8006d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d04:	d032      	beq.n	8006d6c <__ssputs_r+0x80>
 8006d06:	6825      	ldr	r5, [r4, #0]
 8006d08:	6909      	ldr	r1, [r1, #16]
 8006d0a:	eba5 0901 	sub.w	r9, r5, r1
 8006d0e:	6965      	ldr	r5, [r4, #20]
 8006d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d18:	3301      	adds	r3, #1
 8006d1a:	444b      	add	r3, r9
 8006d1c:	106d      	asrs	r5, r5, #1
 8006d1e:	429d      	cmp	r5, r3
 8006d20:	bf38      	it	cc
 8006d22:	461d      	movcc	r5, r3
 8006d24:	0553      	lsls	r3, r2, #21
 8006d26:	d531      	bpl.n	8006d8c <__ssputs_r+0xa0>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	f7ff ff6b 	bl	8006c04 <_malloc_r>
 8006d2e:	4606      	mov	r6, r0
 8006d30:	b950      	cbnz	r0, 8006d48 <__ssputs_r+0x5c>
 8006d32:	230c      	movs	r3, #12
 8006d34:	f8ca 3000 	str.w	r3, [sl]
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3e:	81a3      	strh	r3, [r4, #12]
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d48:	6921      	ldr	r1, [r4, #16]
 8006d4a:	464a      	mov	r2, r9
 8006d4c:	f7ff fb30 	bl	80063b0 <memcpy>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	81a3      	strh	r3, [r4, #12]
 8006d5c:	6126      	str	r6, [r4, #16]
 8006d5e:	6165      	str	r5, [r4, #20]
 8006d60:	444e      	add	r6, r9
 8006d62:	eba5 0509 	sub.w	r5, r5, r9
 8006d66:	6026      	str	r6, [r4, #0]
 8006d68:	60a5      	str	r5, [r4, #8]
 8006d6a:	463e      	mov	r6, r7
 8006d6c:	42be      	cmp	r6, r7
 8006d6e:	d900      	bls.n	8006d72 <__ssputs_r+0x86>
 8006d70:	463e      	mov	r6, r7
 8006d72:	6820      	ldr	r0, [r4, #0]
 8006d74:	4632      	mov	r2, r6
 8006d76:	4641      	mov	r1, r8
 8006d78:	f000 fcac 	bl	80076d4 <memmove>
 8006d7c:	68a3      	ldr	r3, [r4, #8]
 8006d7e:	1b9b      	subs	r3, r3, r6
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	4433      	add	r3, r6
 8006d86:	6023      	str	r3, [r4, #0]
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e7db      	b.n	8006d44 <__ssputs_r+0x58>
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	f000 fcc7 	bl	8007720 <_realloc_r>
 8006d92:	4606      	mov	r6, r0
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d1e1      	bne.n	8006d5c <__ssputs_r+0x70>
 8006d98:	6921      	ldr	r1, [r4, #16]
 8006d9a:	4650      	mov	r0, sl
 8006d9c:	f7ff fec6 	bl	8006b2c <_free_r>
 8006da0:	e7c7      	b.n	8006d32 <__ssputs_r+0x46>
	...

08006da4 <_svfiprintf_r>:
 8006da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	4698      	mov	r8, r3
 8006daa:	898b      	ldrh	r3, [r1, #12]
 8006dac:	061b      	lsls	r3, r3, #24
 8006dae:	b09d      	sub	sp, #116	; 0x74
 8006db0:	4607      	mov	r7, r0
 8006db2:	460d      	mov	r5, r1
 8006db4:	4614      	mov	r4, r2
 8006db6:	d50e      	bpl.n	8006dd6 <_svfiprintf_r+0x32>
 8006db8:	690b      	ldr	r3, [r1, #16]
 8006dba:	b963      	cbnz	r3, 8006dd6 <_svfiprintf_r+0x32>
 8006dbc:	2140      	movs	r1, #64	; 0x40
 8006dbe:	f7ff ff21 	bl	8006c04 <_malloc_r>
 8006dc2:	6028      	str	r0, [r5, #0]
 8006dc4:	6128      	str	r0, [r5, #16]
 8006dc6:	b920      	cbnz	r0, 8006dd2 <_svfiprintf_r+0x2e>
 8006dc8:	230c      	movs	r3, #12
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd0:	e0d1      	b.n	8006f76 <_svfiprintf_r+0x1d2>
 8006dd2:	2340      	movs	r3, #64	; 0x40
 8006dd4:	616b      	str	r3, [r5, #20]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dda:	2320      	movs	r3, #32
 8006ddc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de4:	2330      	movs	r3, #48	; 0x30
 8006de6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f90 <_svfiprintf_r+0x1ec>
 8006dea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dee:	f04f 0901 	mov.w	r9, #1
 8006df2:	4623      	mov	r3, r4
 8006df4:	469a      	mov	sl, r3
 8006df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dfa:	b10a      	cbz	r2, 8006e00 <_svfiprintf_r+0x5c>
 8006dfc:	2a25      	cmp	r2, #37	; 0x25
 8006dfe:	d1f9      	bne.n	8006df4 <_svfiprintf_r+0x50>
 8006e00:	ebba 0b04 	subs.w	fp, sl, r4
 8006e04:	d00b      	beq.n	8006e1e <_svfiprintf_r+0x7a>
 8006e06:	465b      	mov	r3, fp
 8006e08:	4622      	mov	r2, r4
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff ff6d 	bl	8006cec <__ssputs_r>
 8006e12:	3001      	adds	r0, #1
 8006e14:	f000 80aa 	beq.w	8006f6c <_svfiprintf_r+0x1c8>
 8006e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e1a:	445a      	add	r2, fp
 8006e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 80a2 	beq.w	8006f6c <_svfiprintf_r+0x1c8>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e32:	f10a 0a01 	add.w	sl, sl, #1
 8006e36:	9304      	str	r3, [sp, #16]
 8006e38:	9307      	str	r3, [sp, #28]
 8006e3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006e40:	4654      	mov	r4, sl
 8006e42:	2205      	movs	r2, #5
 8006e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e48:	4851      	ldr	r0, [pc, #324]	; (8006f90 <_svfiprintf_r+0x1ec>)
 8006e4a:	f7f9 f9d1 	bl	80001f0 <memchr>
 8006e4e:	9a04      	ldr	r2, [sp, #16]
 8006e50:	b9d8      	cbnz	r0, 8006e8a <_svfiprintf_r+0xe6>
 8006e52:	06d0      	lsls	r0, r2, #27
 8006e54:	bf44      	itt	mi
 8006e56:	2320      	movmi	r3, #32
 8006e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e5c:	0711      	lsls	r1, r2, #28
 8006e5e:	bf44      	itt	mi
 8006e60:	232b      	movmi	r3, #43	; 0x2b
 8006e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e66:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e6c:	d015      	beq.n	8006e9a <_svfiprintf_r+0xf6>
 8006e6e:	9a07      	ldr	r2, [sp, #28]
 8006e70:	4654      	mov	r4, sl
 8006e72:	2000      	movs	r0, #0
 8006e74:	f04f 0c0a 	mov.w	ip, #10
 8006e78:	4621      	mov	r1, r4
 8006e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e7e:	3b30      	subs	r3, #48	; 0x30
 8006e80:	2b09      	cmp	r3, #9
 8006e82:	d94e      	bls.n	8006f22 <_svfiprintf_r+0x17e>
 8006e84:	b1b0      	cbz	r0, 8006eb4 <_svfiprintf_r+0x110>
 8006e86:	9207      	str	r2, [sp, #28]
 8006e88:	e014      	b.n	8006eb4 <_svfiprintf_r+0x110>
 8006e8a:	eba0 0308 	sub.w	r3, r0, r8
 8006e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e92:	4313      	orrs	r3, r2
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	46a2      	mov	sl, r4
 8006e98:	e7d2      	b.n	8006e40 <_svfiprintf_r+0x9c>
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	1d19      	adds	r1, r3, #4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	9103      	str	r1, [sp, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bfbb      	ittet	lt
 8006ea6:	425b      	neglt	r3, r3
 8006ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8006eac:	9307      	strge	r3, [sp, #28]
 8006eae:	9307      	strlt	r3, [sp, #28]
 8006eb0:	bfb8      	it	lt
 8006eb2:	9204      	strlt	r2, [sp, #16]
 8006eb4:	7823      	ldrb	r3, [r4, #0]
 8006eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8006eb8:	d10c      	bne.n	8006ed4 <_svfiprintf_r+0x130>
 8006eba:	7863      	ldrb	r3, [r4, #1]
 8006ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ebe:	d135      	bne.n	8006f2c <_svfiprintf_r+0x188>
 8006ec0:	9b03      	ldr	r3, [sp, #12]
 8006ec2:	1d1a      	adds	r2, r3, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	9203      	str	r2, [sp, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bfb8      	it	lt
 8006ecc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ed0:	3402      	adds	r4, #2
 8006ed2:	9305      	str	r3, [sp, #20]
 8006ed4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fa0 <_svfiprintf_r+0x1fc>
 8006ed8:	7821      	ldrb	r1, [r4, #0]
 8006eda:	2203      	movs	r2, #3
 8006edc:	4650      	mov	r0, sl
 8006ede:	f7f9 f987 	bl	80001f0 <memchr>
 8006ee2:	b140      	cbz	r0, 8006ef6 <_svfiprintf_r+0x152>
 8006ee4:	2340      	movs	r3, #64	; 0x40
 8006ee6:	eba0 000a 	sub.w	r0, r0, sl
 8006eea:	fa03 f000 	lsl.w	r0, r3, r0
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	4303      	orrs	r3, r0
 8006ef2:	3401      	adds	r4, #1
 8006ef4:	9304      	str	r3, [sp, #16]
 8006ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006efa:	4826      	ldr	r0, [pc, #152]	; (8006f94 <_svfiprintf_r+0x1f0>)
 8006efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f00:	2206      	movs	r2, #6
 8006f02:	f7f9 f975 	bl	80001f0 <memchr>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d038      	beq.n	8006f7c <_svfiprintf_r+0x1d8>
 8006f0a:	4b23      	ldr	r3, [pc, #140]	; (8006f98 <_svfiprintf_r+0x1f4>)
 8006f0c:	bb1b      	cbnz	r3, 8006f56 <_svfiprintf_r+0x1b2>
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	3307      	adds	r3, #7
 8006f12:	f023 0307 	bic.w	r3, r3, #7
 8006f16:	3308      	adds	r3, #8
 8006f18:	9303      	str	r3, [sp, #12]
 8006f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1c:	4433      	add	r3, r6
 8006f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f20:	e767      	b.n	8006df2 <_svfiprintf_r+0x4e>
 8006f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f26:	460c      	mov	r4, r1
 8006f28:	2001      	movs	r0, #1
 8006f2a:	e7a5      	b.n	8006e78 <_svfiprintf_r+0xd4>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	3401      	adds	r4, #1
 8006f30:	9305      	str	r3, [sp, #20]
 8006f32:	4619      	mov	r1, r3
 8006f34:	f04f 0c0a 	mov.w	ip, #10
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f3e:	3a30      	subs	r2, #48	; 0x30
 8006f40:	2a09      	cmp	r2, #9
 8006f42:	d903      	bls.n	8006f4c <_svfiprintf_r+0x1a8>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0c5      	beq.n	8006ed4 <_svfiprintf_r+0x130>
 8006f48:	9105      	str	r1, [sp, #20]
 8006f4a:	e7c3      	b.n	8006ed4 <_svfiprintf_r+0x130>
 8006f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f50:	4604      	mov	r4, r0
 8006f52:	2301      	movs	r3, #1
 8006f54:	e7f0      	b.n	8006f38 <_svfiprintf_r+0x194>
 8006f56:	ab03      	add	r3, sp, #12
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	462a      	mov	r2, r5
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <_svfiprintf_r+0x1f8>)
 8006f5e:	a904      	add	r1, sp, #16
 8006f60:	4638      	mov	r0, r7
 8006f62:	f3af 8000 	nop.w
 8006f66:	1c42      	adds	r2, r0, #1
 8006f68:	4606      	mov	r6, r0
 8006f6a:	d1d6      	bne.n	8006f1a <_svfiprintf_r+0x176>
 8006f6c:	89ab      	ldrh	r3, [r5, #12]
 8006f6e:	065b      	lsls	r3, r3, #25
 8006f70:	f53f af2c 	bmi.w	8006dcc <_svfiprintf_r+0x28>
 8006f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f76:	b01d      	add	sp, #116	; 0x74
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	ab03      	add	r3, sp, #12
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <_svfiprintf_r+0x1f8>)
 8006f84:	a904      	add	r1, sp, #16
 8006f86:	4638      	mov	r0, r7
 8006f88:	f000 f9d4 	bl	8007334 <_printf_i>
 8006f8c:	e7eb      	b.n	8006f66 <_svfiprintf_r+0x1c2>
 8006f8e:	bf00      	nop
 8006f90:	08007afc 	.word	0x08007afc
 8006f94:	08007b06 	.word	0x08007b06
 8006f98:	00000000 	.word	0x00000000
 8006f9c:	08006ced 	.word	0x08006ced
 8006fa0:	08007b02 	.word	0x08007b02

08006fa4 <__sfputc_r>:
 8006fa4:	6893      	ldr	r3, [r2, #8]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	b410      	push	{r4}
 8006fac:	6093      	str	r3, [r2, #8]
 8006fae:	da08      	bge.n	8006fc2 <__sfputc_r+0x1e>
 8006fb0:	6994      	ldr	r4, [r2, #24]
 8006fb2:	42a3      	cmp	r3, r4
 8006fb4:	db01      	blt.n	8006fba <__sfputc_r+0x16>
 8006fb6:	290a      	cmp	r1, #10
 8006fb8:	d103      	bne.n	8006fc2 <__sfputc_r+0x1e>
 8006fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fbe:	f7ff bad5 	b.w	800656c <__swbuf_r>
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	1c58      	adds	r0, r3, #1
 8006fc6:	6010      	str	r0, [r2, #0]
 8006fc8:	7019      	strb	r1, [r3, #0]
 8006fca:	4608      	mov	r0, r1
 8006fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <__sfputs_r>:
 8006fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	460f      	mov	r7, r1
 8006fd8:	4614      	mov	r4, r2
 8006fda:	18d5      	adds	r5, r2, r3
 8006fdc:	42ac      	cmp	r4, r5
 8006fde:	d101      	bne.n	8006fe4 <__sfputs_r+0x12>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	e007      	b.n	8006ff4 <__sfputs_r+0x22>
 8006fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fe8:	463a      	mov	r2, r7
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7ff ffda 	bl	8006fa4 <__sfputc_r>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d1f3      	bne.n	8006fdc <__sfputs_r+0xa>
 8006ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ff8 <_vfiprintf_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	460d      	mov	r5, r1
 8006ffe:	b09d      	sub	sp, #116	; 0x74
 8007000:	4614      	mov	r4, r2
 8007002:	4698      	mov	r8, r3
 8007004:	4606      	mov	r6, r0
 8007006:	b118      	cbz	r0, 8007010 <_vfiprintf_r+0x18>
 8007008:	6983      	ldr	r3, [r0, #24]
 800700a:	b90b      	cbnz	r3, 8007010 <_vfiprintf_r+0x18>
 800700c:	f7ff fc88 	bl	8006920 <__sinit>
 8007010:	4b89      	ldr	r3, [pc, #548]	; (8007238 <_vfiprintf_r+0x240>)
 8007012:	429d      	cmp	r5, r3
 8007014:	d11b      	bne.n	800704e <_vfiprintf_r+0x56>
 8007016:	6875      	ldr	r5, [r6, #4]
 8007018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800701a:	07d9      	lsls	r1, r3, #31
 800701c:	d405      	bmi.n	800702a <_vfiprintf_r+0x32>
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	059a      	lsls	r2, r3, #22
 8007022:	d402      	bmi.n	800702a <_vfiprintf_r+0x32>
 8007024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007026:	f7ff fd19 	bl	8006a5c <__retarget_lock_acquire_recursive>
 800702a:	89ab      	ldrh	r3, [r5, #12]
 800702c:	071b      	lsls	r3, r3, #28
 800702e:	d501      	bpl.n	8007034 <_vfiprintf_r+0x3c>
 8007030:	692b      	ldr	r3, [r5, #16]
 8007032:	b9eb      	cbnz	r3, 8007070 <_vfiprintf_r+0x78>
 8007034:	4629      	mov	r1, r5
 8007036:	4630      	mov	r0, r6
 8007038:	f7ff faea 	bl	8006610 <__swsetup_r>
 800703c:	b1c0      	cbz	r0, 8007070 <_vfiprintf_r+0x78>
 800703e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007040:	07dc      	lsls	r4, r3, #31
 8007042:	d50e      	bpl.n	8007062 <_vfiprintf_r+0x6a>
 8007044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007048:	b01d      	add	sp, #116	; 0x74
 800704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704e:	4b7b      	ldr	r3, [pc, #492]	; (800723c <_vfiprintf_r+0x244>)
 8007050:	429d      	cmp	r5, r3
 8007052:	d101      	bne.n	8007058 <_vfiprintf_r+0x60>
 8007054:	68b5      	ldr	r5, [r6, #8]
 8007056:	e7df      	b.n	8007018 <_vfiprintf_r+0x20>
 8007058:	4b79      	ldr	r3, [pc, #484]	; (8007240 <_vfiprintf_r+0x248>)
 800705a:	429d      	cmp	r5, r3
 800705c:	bf08      	it	eq
 800705e:	68f5      	ldreq	r5, [r6, #12]
 8007060:	e7da      	b.n	8007018 <_vfiprintf_r+0x20>
 8007062:	89ab      	ldrh	r3, [r5, #12]
 8007064:	0598      	lsls	r0, r3, #22
 8007066:	d4ed      	bmi.n	8007044 <_vfiprintf_r+0x4c>
 8007068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800706a:	f7ff fcf8 	bl	8006a5e <__retarget_lock_release_recursive>
 800706e:	e7e9      	b.n	8007044 <_vfiprintf_r+0x4c>
 8007070:	2300      	movs	r3, #0
 8007072:	9309      	str	r3, [sp, #36]	; 0x24
 8007074:	2320      	movs	r3, #32
 8007076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800707a:	f8cd 800c 	str.w	r8, [sp, #12]
 800707e:	2330      	movs	r3, #48	; 0x30
 8007080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007244 <_vfiprintf_r+0x24c>
 8007084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007088:	f04f 0901 	mov.w	r9, #1
 800708c:	4623      	mov	r3, r4
 800708e:	469a      	mov	sl, r3
 8007090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007094:	b10a      	cbz	r2, 800709a <_vfiprintf_r+0xa2>
 8007096:	2a25      	cmp	r2, #37	; 0x25
 8007098:	d1f9      	bne.n	800708e <_vfiprintf_r+0x96>
 800709a:	ebba 0b04 	subs.w	fp, sl, r4
 800709e:	d00b      	beq.n	80070b8 <_vfiprintf_r+0xc0>
 80070a0:	465b      	mov	r3, fp
 80070a2:	4622      	mov	r2, r4
 80070a4:	4629      	mov	r1, r5
 80070a6:	4630      	mov	r0, r6
 80070a8:	f7ff ff93 	bl	8006fd2 <__sfputs_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	f000 80aa 	beq.w	8007206 <_vfiprintf_r+0x20e>
 80070b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b4:	445a      	add	r2, fp
 80070b6:	9209      	str	r2, [sp, #36]	; 0x24
 80070b8:	f89a 3000 	ldrb.w	r3, [sl]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80a2 	beq.w	8007206 <_vfiprintf_r+0x20e>
 80070c2:	2300      	movs	r3, #0
 80070c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070cc:	f10a 0a01 	add.w	sl, sl, #1
 80070d0:	9304      	str	r3, [sp, #16]
 80070d2:	9307      	str	r3, [sp, #28]
 80070d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d8:	931a      	str	r3, [sp, #104]	; 0x68
 80070da:	4654      	mov	r4, sl
 80070dc:	2205      	movs	r2, #5
 80070de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e2:	4858      	ldr	r0, [pc, #352]	; (8007244 <_vfiprintf_r+0x24c>)
 80070e4:	f7f9 f884 	bl	80001f0 <memchr>
 80070e8:	9a04      	ldr	r2, [sp, #16]
 80070ea:	b9d8      	cbnz	r0, 8007124 <_vfiprintf_r+0x12c>
 80070ec:	06d1      	lsls	r1, r2, #27
 80070ee:	bf44      	itt	mi
 80070f0:	2320      	movmi	r3, #32
 80070f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f6:	0713      	lsls	r3, r2, #28
 80070f8:	bf44      	itt	mi
 80070fa:	232b      	movmi	r3, #43	; 0x2b
 80070fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007100:	f89a 3000 	ldrb.w	r3, [sl]
 8007104:	2b2a      	cmp	r3, #42	; 0x2a
 8007106:	d015      	beq.n	8007134 <_vfiprintf_r+0x13c>
 8007108:	9a07      	ldr	r2, [sp, #28]
 800710a:	4654      	mov	r4, sl
 800710c:	2000      	movs	r0, #0
 800710e:	f04f 0c0a 	mov.w	ip, #10
 8007112:	4621      	mov	r1, r4
 8007114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007118:	3b30      	subs	r3, #48	; 0x30
 800711a:	2b09      	cmp	r3, #9
 800711c:	d94e      	bls.n	80071bc <_vfiprintf_r+0x1c4>
 800711e:	b1b0      	cbz	r0, 800714e <_vfiprintf_r+0x156>
 8007120:	9207      	str	r2, [sp, #28]
 8007122:	e014      	b.n	800714e <_vfiprintf_r+0x156>
 8007124:	eba0 0308 	sub.w	r3, r0, r8
 8007128:	fa09 f303 	lsl.w	r3, r9, r3
 800712c:	4313      	orrs	r3, r2
 800712e:	9304      	str	r3, [sp, #16]
 8007130:	46a2      	mov	sl, r4
 8007132:	e7d2      	b.n	80070da <_vfiprintf_r+0xe2>
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	1d19      	adds	r1, r3, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	9103      	str	r1, [sp, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	bfbb      	ittet	lt
 8007140:	425b      	neglt	r3, r3
 8007142:	f042 0202 	orrlt.w	r2, r2, #2
 8007146:	9307      	strge	r3, [sp, #28]
 8007148:	9307      	strlt	r3, [sp, #28]
 800714a:	bfb8      	it	lt
 800714c:	9204      	strlt	r2, [sp, #16]
 800714e:	7823      	ldrb	r3, [r4, #0]
 8007150:	2b2e      	cmp	r3, #46	; 0x2e
 8007152:	d10c      	bne.n	800716e <_vfiprintf_r+0x176>
 8007154:	7863      	ldrb	r3, [r4, #1]
 8007156:	2b2a      	cmp	r3, #42	; 0x2a
 8007158:	d135      	bne.n	80071c6 <_vfiprintf_r+0x1ce>
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	1d1a      	adds	r2, r3, #4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	9203      	str	r2, [sp, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	bfb8      	it	lt
 8007166:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800716a:	3402      	adds	r4, #2
 800716c:	9305      	str	r3, [sp, #20]
 800716e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007254 <_vfiprintf_r+0x25c>
 8007172:	7821      	ldrb	r1, [r4, #0]
 8007174:	2203      	movs	r2, #3
 8007176:	4650      	mov	r0, sl
 8007178:	f7f9 f83a 	bl	80001f0 <memchr>
 800717c:	b140      	cbz	r0, 8007190 <_vfiprintf_r+0x198>
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	eba0 000a 	sub.w	r0, r0, sl
 8007184:	fa03 f000 	lsl.w	r0, r3, r0
 8007188:	9b04      	ldr	r3, [sp, #16]
 800718a:	4303      	orrs	r3, r0
 800718c:	3401      	adds	r4, #1
 800718e:	9304      	str	r3, [sp, #16]
 8007190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007194:	482c      	ldr	r0, [pc, #176]	; (8007248 <_vfiprintf_r+0x250>)
 8007196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800719a:	2206      	movs	r2, #6
 800719c:	f7f9 f828 	bl	80001f0 <memchr>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d03f      	beq.n	8007224 <_vfiprintf_r+0x22c>
 80071a4:	4b29      	ldr	r3, [pc, #164]	; (800724c <_vfiprintf_r+0x254>)
 80071a6:	bb1b      	cbnz	r3, 80071f0 <_vfiprintf_r+0x1f8>
 80071a8:	9b03      	ldr	r3, [sp, #12]
 80071aa:	3307      	adds	r3, #7
 80071ac:	f023 0307 	bic.w	r3, r3, #7
 80071b0:	3308      	adds	r3, #8
 80071b2:	9303      	str	r3, [sp, #12]
 80071b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b6:	443b      	add	r3, r7
 80071b8:	9309      	str	r3, [sp, #36]	; 0x24
 80071ba:	e767      	b.n	800708c <_vfiprintf_r+0x94>
 80071bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80071c0:	460c      	mov	r4, r1
 80071c2:	2001      	movs	r0, #1
 80071c4:	e7a5      	b.n	8007112 <_vfiprintf_r+0x11a>
 80071c6:	2300      	movs	r3, #0
 80071c8:	3401      	adds	r4, #1
 80071ca:	9305      	str	r3, [sp, #20]
 80071cc:	4619      	mov	r1, r3
 80071ce:	f04f 0c0a 	mov.w	ip, #10
 80071d2:	4620      	mov	r0, r4
 80071d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d8:	3a30      	subs	r2, #48	; 0x30
 80071da:	2a09      	cmp	r2, #9
 80071dc:	d903      	bls.n	80071e6 <_vfiprintf_r+0x1ee>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0c5      	beq.n	800716e <_vfiprintf_r+0x176>
 80071e2:	9105      	str	r1, [sp, #20]
 80071e4:	e7c3      	b.n	800716e <_vfiprintf_r+0x176>
 80071e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ea:	4604      	mov	r4, r0
 80071ec:	2301      	movs	r3, #1
 80071ee:	e7f0      	b.n	80071d2 <_vfiprintf_r+0x1da>
 80071f0:	ab03      	add	r3, sp, #12
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	462a      	mov	r2, r5
 80071f6:	4b16      	ldr	r3, [pc, #88]	; (8007250 <_vfiprintf_r+0x258>)
 80071f8:	a904      	add	r1, sp, #16
 80071fa:	4630      	mov	r0, r6
 80071fc:	f3af 8000 	nop.w
 8007200:	4607      	mov	r7, r0
 8007202:	1c78      	adds	r0, r7, #1
 8007204:	d1d6      	bne.n	80071b4 <_vfiprintf_r+0x1bc>
 8007206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007208:	07d9      	lsls	r1, r3, #31
 800720a:	d405      	bmi.n	8007218 <_vfiprintf_r+0x220>
 800720c:	89ab      	ldrh	r3, [r5, #12]
 800720e:	059a      	lsls	r2, r3, #22
 8007210:	d402      	bmi.n	8007218 <_vfiprintf_r+0x220>
 8007212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007214:	f7ff fc23 	bl	8006a5e <__retarget_lock_release_recursive>
 8007218:	89ab      	ldrh	r3, [r5, #12]
 800721a:	065b      	lsls	r3, r3, #25
 800721c:	f53f af12 	bmi.w	8007044 <_vfiprintf_r+0x4c>
 8007220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007222:	e711      	b.n	8007048 <_vfiprintf_r+0x50>
 8007224:	ab03      	add	r3, sp, #12
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	462a      	mov	r2, r5
 800722a:	4b09      	ldr	r3, [pc, #36]	; (8007250 <_vfiprintf_r+0x258>)
 800722c:	a904      	add	r1, sp, #16
 800722e:	4630      	mov	r0, r6
 8007230:	f000 f880 	bl	8007334 <_printf_i>
 8007234:	e7e4      	b.n	8007200 <_vfiprintf_r+0x208>
 8007236:	bf00      	nop
 8007238:	08007abc 	.word	0x08007abc
 800723c:	08007adc 	.word	0x08007adc
 8007240:	08007a9c 	.word	0x08007a9c
 8007244:	08007afc 	.word	0x08007afc
 8007248:	08007b06 	.word	0x08007b06
 800724c:	00000000 	.word	0x00000000
 8007250:	08006fd3 	.word	0x08006fd3
 8007254:	08007b02 	.word	0x08007b02

08007258 <_printf_common>:
 8007258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800725c:	4616      	mov	r6, r2
 800725e:	4699      	mov	r9, r3
 8007260:	688a      	ldr	r2, [r1, #8]
 8007262:	690b      	ldr	r3, [r1, #16]
 8007264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007268:	4293      	cmp	r3, r2
 800726a:	bfb8      	it	lt
 800726c:	4613      	movlt	r3, r2
 800726e:	6033      	str	r3, [r6, #0]
 8007270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007274:	4607      	mov	r7, r0
 8007276:	460c      	mov	r4, r1
 8007278:	b10a      	cbz	r2, 800727e <_printf_common+0x26>
 800727a:	3301      	adds	r3, #1
 800727c:	6033      	str	r3, [r6, #0]
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	0699      	lsls	r1, r3, #26
 8007282:	bf42      	ittt	mi
 8007284:	6833      	ldrmi	r3, [r6, #0]
 8007286:	3302      	addmi	r3, #2
 8007288:	6033      	strmi	r3, [r6, #0]
 800728a:	6825      	ldr	r5, [r4, #0]
 800728c:	f015 0506 	ands.w	r5, r5, #6
 8007290:	d106      	bne.n	80072a0 <_printf_common+0x48>
 8007292:	f104 0a19 	add.w	sl, r4, #25
 8007296:	68e3      	ldr	r3, [r4, #12]
 8007298:	6832      	ldr	r2, [r6, #0]
 800729a:	1a9b      	subs	r3, r3, r2
 800729c:	42ab      	cmp	r3, r5
 800729e:	dc26      	bgt.n	80072ee <_printf_common+0x96>
 80072a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072a4:	1e13      	subs	r3, r2, #0
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	bf18      	it	ne
 80072aa:	2301      	movne	r3, #1
 80072ac:	0692      	lsls	r2, r2, #26
 80072ae:	d42b      	bmi.n	8007308 <_printf_common+0xb0>
 80072b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072b4:	4649      	mov	r1, r9
 80072b6:	4638      	mov	r0, r7
 80072b8:	47c0      	blx	r8
 80072ba:	3001      	adds	r0, #1
 80072bc:	d01e      	beq.n	80072fc <_printf_common+0xa4>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	68e5      	ldr	r5, [r4, #12]
 80072c2:	6832      	ldr	r2, [r6, #0]
 80072c4:	f003 0306 	and.w	r3, r3, #6
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	bf08      	it	eq
 80072cc:	1aad      	subeq	r5, r5, r2
 80072ce:	68a3      	ldr	r3, [r4, #8]
 80072d0:	6922      	ldr	r2, [r4, #16]
 80072d2:	bf0c      	ite	eq
 80072d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d8:	2500      	movne	r5, #0
 80072da:	4293      	cmp	r3, r2
 80072dc:	bfc4      	itt	gt
 80072de:	1a9b      	subgt	r3, r3, r2
 80072e0:	18ed      	addgt	r5, r5, r3
 80072e2:	2600      	movs	r6, #0
 80072e4:	341a      	adds	r4, #26
 80072e6:	42b5      	cmp	r5, r6
 80072e8:	d11a      	bne.n	8007320 <_printf_common+0xc8>
 80072ea:	2000      	movs	r0, #0
 80072ec:	e008      	b.n	8007300 <_printf_common+0xa8>
 80072ee:	2301      	movs	r3, #1
 80072f0:	4652      	mov	r2, sl
 80072f2:	4649      	mov	r1, r9
 80072f4:	4638      	mov	r0, r7
 80072f6:	47c0      	blx	r8
 80072f8:	3001      	adds	r0, #1
 80072fa:	d103      	bne.n	8007304 <_printf_common+0xac>
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007304:	3501      	adds	r5, #1
 8007306:	e7c6      	b.n	8007296 <_printf_common+0x3e>
 8007308:	18e1      	adds	r1, r4, r3
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	2030      	movs	r0, #48	; 0x30
 800730e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007312:	4422      	add	r2, r4
 8007314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800731c:	3302      	adds	r3, #2
 800731e:	e7c7      	b.n	80072b0 <_printf_common+0x58>
 8007320:	2301      	movs	r3, #1
 8007322:	4622      	mov	r2, r4
 8007324:	4649      	mov	r1, r9
 8007326:	4638      	mov	r0, r7
 8007328:	47c0      	blx	r8
 800732a:	3001      	adds	r0, #1
 800732c:	d0e6      	beq.n	80072fc <_printf_common+0xa4>
 800732e:	3601      	adds	r6, #1
 8007330:	e7d9      	b.n	80072e6 <_printf_common+0x8e>
	...

08007334 <_printf_i>:
 8007334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007338:	7e0f      	ldrb	r7, [r1, #24]
 800733a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800733c:	2f78      	cmp	r7, #120	; 0x78
 800733e:	4691      	mov	r9, r2
 8007340:	4680      	mov	r8, r0
 8007342:	460c      	mov	r4, r1
 8007344:	469a      	mov	sl, r3
 8007346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800734a:	d807      	bhi.n	800735c <_printf_i+0x28>
 800734c:	2f62      	cmp	r7, #98	; 0x62
 800734e:	d80a      	bhi.n	8007366 <_printf_i+0x32>
 8007350:	2f00      	cmp	r7, #0
 8007352:	f000 80d8 	beq.w	8007506 <_printf_i+0x1d2>
 8007356:	2f58      	cmp	r7, #88	; 0x58
 8007358:	f000 80a3 	beq.w	80074a2 <_printf_i+0x16e>
 800735c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007364:	e03a      	b.n	80073dc <_printf_i+0xa8>
 8007366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800736a:	2b15      	cmp	r3, #21
 800736c:	d8f6      	bhi.n	800735c <_printf_i+0x28>
 800736e:	a101      	add	r1, pc, #4	; (adr r1, 8007374 <_printf_i+0x40>)
 8007370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007374:	080073cd 	.word	0x080073cd
 8007378:	080073e1 	.word	0x080073e1
 800737c:	0800735d 	.word	0x0800735d
 8007380:	0800735d 	.word	0x0800735d
 8007384:	0800735d 	.word	0x0800735d
 8007388:	0800735d 	.word	0x0800735d
 800738c:	080073e1 	.word	0x080073e1
 8007390:	0800735d 	.word	0x0800735d
 8007394:	0800735d 	.word	0x0800735d
 8007398:	0800735d 	.word	0x0800735d
 800739c:	0800735d 	.word	0x0800735d
 80073a0:	080074ed 	.word	0x080074ed
 80073a4:	08007411 	.word	0x08007411
 80073a8:	080074cf 	.word	0x080074cf
 80073ac:	0800735d 	.word	0x0800735d
 80073b0:	0800735d 	.word	0x0800735d
 80073b4:	0800750f 	.word	0x0800750f
 80073b8:	0800735d 	.word	0x0800735d
 80073bc:	08007411 	.word	0x08007411
 80073c0:	0800735d 	.word	0x0800735d
 80073c4:	0800735d 	.word	0x0800735d
 80073c8:	080074d7 	.word	0x080074d7
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	1d1a      	adds	r2, r3, #4
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	602a      	str	r2, [r5, #0]
 80073d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073dc:	2301      	movs	r3, #1
 80073de:	e0a3      	b.n	8007528 <_printf_i+0x1f4>
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	6829      	ldr	r1, [r5, #0]
 80073e4:	0606      	lsls	r6, r0, #24
 80073e6:	f101 0304 	add.w	r3, r1, #4
 80073ea:	d50a      	bpl.n	8007402 <_printf_i+0xce>
 80073ec:	680e      	ldr	r6, [r1, #0]
 80073ee:	602b      	str	r3, [r5, #0]
 80073f0:	2e00      	cmp	r6, #0
 80073f2:	da03      	bge.n	80073fc <_printf_i+0xc8>
 80073f4:	232d      	movs	r3, #45	; 0x2d
 80073f6:	4276      	negs	r6, r6
 80073f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073fc:	485e      	ldr	r0, [pc, #376]	; (8007578 <_printf_i+0x244>)
 80073fe:	230a      	movs	r3, #10
 8007400:	e019      	b.n	8007436 <_printf_i+0x102>
 8007402:	680e      	ldr	r6, [r1, #0]
 8007404:	602b      	str	r3, [r5, #0]
 8007406:	f010 0f40 	tst.w	r0, #64	; 0x40
 800740a:	bf18      	it	ne
 800740c:	b236      	sxthne	r6, r6
 800740e:	e7ef      	b.n	80073f0 <_printf_i+0xbc>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	6820      	ldr	r0, [r4, #0]
 8007414:	1d19      	adds	r1, r3, #4
 8007416:	6029      	str	r1, [r5, #0]
 8007418:	0601      	lsls	r1, r0, #24
 800741a:	d501      	bpl.n	8007420 <_printf_i+0xec>
 800741c:	681e      	ldr	r6, [r3, #0]
 800741e:	e002      	b.n	8007426 <_printf_i+0xf2>
 8007420:	0646      	lsls	r6, r0, #25
 8007422:	d5fb      	bpl.n	800741c <_printf_i+0xe8>
 8007424:	881e      	ldrh	r6, [r3, #0]
 8007426:	4854      	ldr	r0, [pc, #336]	; (8007578 <_printf_i+0x244>)
 8007428:	2f6f      	cmp	r7, #111	; 0x6f
 800742a:	bf0c      	ite	eq
 800742c:	2308      	moveq	r3, #8
 800742e:	230a      	movne	r3, #10
 8007430:	2100      	movs	r1, #0
 8007432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007436:	6865      	ldr	r5, [r4, #4]
 8007438:	60a5      	str	r5, [r4, #8]
 800743a:	2d00      	cmp	r5, #0
 800743c:	bfa2      	ittt	ge
 800743e:	6821      	ldrge	r1, [r4, #0]
 8007440:	f021 0104 	bicge.w	r1, r1, #4
 8007444:	6021      	strge	r1, [r4, #0]
 8007446:	b90e      	cbnz	r6, 800744c <_printf_i+0x118>
 8007448:	2d00      	cmp	r5, #0
 800744a:	d04d      	beq.n	80074e8 <_printf_i+0x1b4>
 800744c:	4615      	mov	r5, r2
 800744e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007452:	fb03 6711 	mls	r7, r3, r1, r6
 8007456:	5dc7      	ldrb	r7, [r0, r7]
 8007458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800745c:	4637      	mov	r7, r6
 800745e:	42bb      	cmp	r3, r7
 8007460:	460e      	mov	r6, r1
 8007462:	d9f4      	bls.n	800744e <_printf_i+0x11a>
 8007464:	2b08      	cmp	r3, #8
 8007466:	d10b      	bne.n	8007480 <_printf_i+0x14c>
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	07de      	lsls	r6, r3, #31
 800746c:	d508      	bpl.n	8007480 <_printf_i+0x14c>
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	6861      	ldr	r1, [r4, #4]
 8007472:	4299      	cmp	r1, r3
 8007474:	bfde      	ittt	le
 8007476:	2330      	movle	r3, #48	; 0x30
 8007478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800747c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007480:	1b52      	subs	r2, r2, r5
 8007482:	6122      	str	r2, [r4, #16]
 8007484:	f8cd a000 	str.w	sl, [sp]
 8007488:	464b      	mov	r3, r9
 800748a:	aa03      	add	r2, sp, #12
 800748c:	4621      	mov	r1, r4
 800748e:	4640      	mov	r0, r8
 8007490:	f7ff fee2 	bl	8007258 <_printf_common>
 8007494:	3001      	adds	r0, #1
 8007496:	d14c      	bne.n	8007532 <_printf_i+0x1fe>
 8007498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800749c:	b004      	add	sp, #16
 800749e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a2:	4835      	ldr	r0, [pc, #212]	; (8007578 <_printf_i+0x244>)
 80074a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074a8:	6829      	ldr	r1, [r5, #0]
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80074b0:	6029      	str	r1, [r5, #0]
 80074b2:	061d      	lsls	r5, r3, #24
 80074b4:	d514      	bpl.n	80074e0 <_printf_i+0x1ac>
 80074b6:	07df      	lsls	r7, r3, #31
 80074b8:	bf44      	itt	mi
 80074ba:	f043 0320 	orrmi.w	r3, r3, #32
 80074be:	6023      	strmi	r3, [r4, #0]
 80074c0:	b91e      	cbnz	r6, 80074ca <_printf_i+0x196>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	f023 0320 	bic.w	r3, r3, #32
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	2310      	movs	r3, #16
 80074cc:	e7b0      	b.n	8007430 <_printf_i+0xfc>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	f043 0320 	orr.w	r3, r3, #32
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	2378      	movs	r3, #120	; 0x78
 80074d8:	4828      	ldr	r0, [pc, #160]	; (800757c <_printf_i+0x248>)
 80074da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074de:	e7e3      	b.n	80074a8 <_printf_i+0x174>
 80074e0:	0659      	lsls	r1, r3, #25
 80074e2:	bf48      	it	mi
 80074e4:	b2b6      	uxthmi	r6, r6
 80074e6:	e7e6      	b.n	80074b6 <_printf_i+0x182>
 80074e8:	4615      	mov	r5, r2
 80074ea:	e7bb      	b.n	8007464 <_printf_i+0x130>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	6826      	ldr	r6, [r4, #0]
 80074f0:	6961      	ldr	r1, [r4, #20]
 80074f2:	1d18      	adds	r0, r3, #4
 80074f4:	6028      	str	r0, [r5, #0]
 80074f6:	0635      	lsls	r5, r6, #24
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	d501      	bpl.n	8007500 <_printf_i+0x1cc>
 80074fc:	6019      	str	r1, [r3, #0]
 80074fe:	e002      	b.n	8007506 <_printf_i+0x1d2>
 8007500:	0670      	lsls	r0, r6, #25
 8007502:	d5fb      	bpl.n	80074fc <_printf_i+0x1c8>
 8007504:	8019      	strh	r1, [r3, #0]
 8007506:	2300      	movs	r3, #0
 8007508:	6123      	str	r3, [r4, #16]
 800750a:	4615      	mov	r5, r2
 800750c:	e7ba      	b.n	8007484 <_printf_i+0x150>
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	1d1a      	adds	r2, r3, #4
 8007512:	602a      	str	r2, [r5, #0]
 8007514:	681d      	ldr	r5, [r3, #0]
 8007516:	6862      	ldr	r2, [r4, #4]
 8007518:	2100      	movs	r1, #0
 800751a:	4628      	mov	r0, r5
 800751c:	f7f8 fe68 	bl	80001f0 <memchr>
 8007520:	b108      	cbz	r0, 8007526 <_printf_i+0x1f2>
 8007522:	1b40      	subs	r0, r0, r5
 8007524:	6060      	str	r0, [r4, #4]
 8007526:	6863      	ldr	r3, [r4, #4]
 8007528:	6123      	str	r3, [r4, #16]
 800752a:	2300      	movs	r3, #0
 800752c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007530:	e7a8      	b.n	8007484 <_printf_i+0x150>
 8007532:	6923      	ldr	r3, [r4, #16]
 8007534:	462a      	mov	r2, r5
 8007536:	4649      	mov	r1, r9
 8007538:	4640      	mov	r0, r8
 800753a:	47d0      	blx	sl
 800753c:	3001      	adds	r0, #1
 800753e:	d0ab      	beq.n	8007498 <_printf_i+0x164>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	079b      	lsls	r3, r3, #30
 8007544:	d413      	bmi.n	800756e <_printf_i+0x23a>
 8007546:	68e0      	ldr	r0, [r4, #12]
 8007548:	9b03      	ldr	r3, [sp, #12]
 800754a:	4298      	cmp	r0, r3
 800754c:	bfb8      	it	lt
 800754e:	4618      	movlt	r0, r3
 8007550:	e7a4      	b.n	800749c <_printf_i+0x168>
 8007552:	2301      	movs	r3, #1
 8007554:	4632      	mov	r2, r6
 8007556:	4649      	mov	r1, r9
 8007558:	4640      	mov	r0, r8
 800755a:	47d0      	blx	sl
 800755c:	3001      	adds	r0, #1
 800755e:	d09b      	beq.n	8007498 <_printf_i+0x164>
 8007560:	3501      	adds	r5, #1
 8007562:	68e3      	ldr	r3, [r4, #12]
 8007564:	9903      	ldr	r1, [sp, #12]
 8007566:	1a5b      	subs	r3, r3, r1
 8007568:	42ab      	cmp	r3, r5
 800756a:	dcf2      	bgt.n	8007552 <_printf_i+0x21e>
 800756c:	e7eb      	b.n	8007546 <_printf_i+0x212>
 800756e:	2500      	movs	r5, #0
 8007570:	f104 0619 	add.w	r6, r4, #25
 8007574:	e7f5      	b.n	8007562 <_printf_i+0x22e>
 8007576:	bf00      	nop
 8007578:	08007b0d 	.word	0x08007b0d
 800757c:	08007b1e 	.word	0x08007b1e

08007580 <_sbrk_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4d06      	ldr	r5, [pc, #24]	; (800759c <_sbrk_r+0x1c>)
 8007584:	2300      	movs	r3, #0
 8007586:	4604      	mov	r4, r0
 8007588:	4608      	mov	r0, r1
 800758a:	602b      	str	r3, [r5, #0]
 800758c:	f7fa fc42 	bl	8001e14 <_sbrk>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_sbrk_r+0x1a>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_sbrk_r+0x1a>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	2000075c 	.word	0x2000075c

080075a0 <__sread>:
 80075a0:	b510      	push	{r4, lr}
 80075a2:	460c      	mov	r4, r1
 80075a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a8:	f000 f8ea 	bl	8007780 <_read_r>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	bfab      	itete	ge
 80075b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075b2:	89a3      	ldrhlt	r3, [r4, #12]
 80075b4:	181b      	addge	r3, r3, r0
 80075b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075ba:	bfac      	ite	ge
 80075bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80075be:	81a3      	strhlt	r3, [r4, #12]
 80075c0:	bd10      	pop	{r4, pc}

080075c2 <__swrite>:
 80075c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c6:	461f      	mov	r7, r3
 80075c8:	898b      	ldrh	r3, [r1, #12]
 80075ca:	05db      	lsls	r3, r3, #23
 80075cc:	4605      	mov	r5, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	4616      	mov	r6, r2
 80075d2:	d505      	bpl.n	80075e0 <__swrite+0x1e>
 80075d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d8:	2302      	movs	r3, #2
 80075da:	2200      	movs	r2, #0
 80075dc:	f000 f868 	bl	80076b0 <_lseek_r>
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	4632      	mov	r2, r6
 80075ee:	463b      	mov	r3, r7
 80075f0:	4628      	mov	r0, r5
 80075f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f6:	f000 b817 	b.w	8007628 <_write_r>

080075fa <__sseek>:
 80075fa:	b510      	push	{r4, lr}
 80075fc:	460c      	mov	r4, r1
 80075fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007602:	f000 f855 	bl	80076b0 <_lseek_r>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	bf15      	itete	ne
 800760c:	6560      	strne	r0, [r4, #84]	; 0x54
 800760e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007616:	81a3      	strheq	r3, [r4, #12]
 8007618:	bf18      	it	ne
 800761a:	81a3      	strhne	r3, [r4, #12]
 800761c:	bd10      	pop	{r4, pc}

0800761e <__sclose>:
 800761e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007622:	f000 b813 	b.w	800764c <_close_r>
	...

08007628 <_write_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4d07      	ldr	r5, [pc, #28]	; (8007648 <_write_r+0x20>)
 800762c:	4604      	mov	r4, r0
 800762e:	4608      	mov	r0, r1
 8007630:	4611      	mov	r1, r2
 8007632:	2200      	movs	r2, #0
 8007634:	602a      	str	r2, [r5, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	f7fa fb9b 	bl	8001d72 <_write>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d102      	bne.n	8007646 <_write_r+0x1e>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b103      	cbz	r3, 8007646 <_write_r+0x1e>
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	2000075c 	.word	0x2000075c

0800764c <_close_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4d06      	ldr	r5, [pc, #24]	; (8007668 <_close_r+0x1c>)
 8007650:	2300      	movs	r3, #0
 8007652:	4604      	mov	r4, r0
 8007654:	4608      	mov	r0, r1
 8007656:	602b      	str	r3, [r5, #0]
 8007658:	f7fa fba7 	bl	8001daa <_close>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_close_r+0x1a>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_close_r+0x1a>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	2000075c 	.word	0x2000075c

0800766c <_fstat_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4d07      	ldr	r5, [pc, #28]	; (800768c <_fstat_r+0x20>)
 8007670:	2300      	movs	r3, #0
 8007672:	4604      	mov	r4, r0
 8007674:	4608      	mov	r0, r1
 8007676:	4611      	mov	r1, r2
 8007678:	602b      	str	r3, [r5, #0]
 800767a:	f7fa fba2 	bl	8001dc2 <_fstat>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	d102      	bne.n	8007688 <_fstat_r+0x1c>
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	b103      	cbz	r3, 8007688 <_fstat_r+0x1c>
 8007686:	6023      	str	r3, [r4, #0]
 8007688:	bd38      	pop	{r3, r4, r5, pc}
 800768a:	bf00      	nop
 800768c:	2000075c 	.word	0x2000075c

08007690 <_isatty_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4d06      	ldr	r5, [pc, #24]	; (80076ac <_isatty_r+0x1c>)
 8007694:	2300      	movs	r3, #0
 8007696:	4604      	mov	r4, r0
 8007698:	4608      	mov	r0, r1
 800769a:	602b      	str	r3, [r5, #0]
 800769c:	f7fa fba1 	bl	8001de2 <_isatty>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_isatty_r+0x1a>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_isatty_r+0x1a>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	2000075c 	.word	0x2000075c

080076b0 <_lseek_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4d07      	ldr	r5, [pc, #28]	; (80076d0 <_lseek_r+0x20>)
 80076b4:	4604      	mov	r4, r0
 80076b6:	4608      	mov	r0, r1
 80076b8:	4611      	mov	r1, r2
 80076ba:	2200      	movs	r2, #0
 80076bc:	602a      	str	r2, [r5, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	f7fa fb9a 	bl	8001df8 <_lseek>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	d102      	bne.n	80076ce <_lseek_r+0x1e>
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	b103      	cbz	r3, 80076ce <_lseek_r+0x1e>
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	2000075c 	.word	0x2000075c

080076d4 <memmove>:
 80076d4:	4288      	cmp	r0, r1
 80076d6:	b510      	push	{r4, lr}
 80076d8:	eb01 0402 	add.w	r4, r1, r2
 80076dc:	d902      	bls.n	80076e4 <memmove+0x10>
 80076de:	4284      	cmp	r4, r0
 80076e0:	4623      	mov	r3, r4
 80076e2:	d807      	bhi.n	80076f4 <memmove+0x20>
 80076e4:	1e43      	subs	r3, r0, #1
 80076e6:	42a1      	cmp	r1, r4
 80076e8:	d008      	beq.n	80076fc <memmove+0x28>
 80076ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076f2:	e7f8      	b.n	80076e6 <memmove+0x12>
 80076f4:	4402      	add	r2, r0
 80076f6:	4601      	mov	r1, r0
 80076f8:	428a      	cmp	r2, r1
 80076fa:	d100      	bne.n	80076fe <memmove+0x2a>
 80076fc:	bd10      	pop	{r4, pc}
 80076fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007706:	e7f7      	b.n	80076f8 <memmove+0x24>

08007708 <__malloc_lock>:
 8007708:	4801      	ldr	r0, [pc, #4]	; (8007710 <__malloc_lock+0x8>)
 800770a:	f7ff b9a7 	b.w	8006a5c <__retarget_lock_acquire_recursive>
 800770e:	bf00      	nop
 8007710:	20000750 	.word	0x20000750

08007714 <__malloc_unlock>:
 8007714:	4801      	ldr	r0, [pc, #4]	; (800771c <__malloc_unlock+0x8>)
 8007716:	f7ff b9a2 	b.w	8006a5e <__retarget_lock_release_recursive>
 800771a:	bf00      	nop
 800771c:	20000750 	.word	0x20000750

08007720 <_realloc_r>:
 8007720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007724:	4680      	mov	r8, r0
 8007726:	4614      	mov	r4, r2
 8007728:	460e      	mov	r6, r1
 800772a:	b921      	cbnz	r1, 8007736 <_realloc_r+0x16>
 800772c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007730:	4611      	mov	r1, r2
 8007732:	f7ff ba67 	b.w	8006c04 <_malloc_r>
 8007736:	b92a      	cbnz	r2, 8007744 <_realloc_r+0x24>
 8007738:	f7ff f9f8 	bl	8006b2c <_free_r>
 800773c:	4625      	mov	r5, r4
 800773e:	4628      	mov	r0, r5
 8007740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007744:	f000 f82e 	bl	80077a4 <_malloc_usable_size_r>
 8007748:	4284      	cmp	r4, r0
 800774a:	4607      	mov	r7, r0
 800774c:	d802      	bhi.n	8007754 <_realloc_r+0x34>
 800774e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007752:	d812      	bhi.n	800777a <_realloc_r+0x5a>
 8007754:	4621      	mov	r1, r4
 8007756:	4640      	mov	r0, r8
 8007758:	f7ff fa54 	bl	8006c04 <_malloc_r>
 800775c:	4605      	mov	r5, r0
 800775e:	2800      	cmp	r0, #0
 8007760:	d0ed      	beq.n	800773e <_realloc_r+0x1e>
 8007762:	42bc      	cmp	r4, r7
 8007764:	4622      	mov	r2, r4
 8007766:	4631      	mov	r1, r6
 8007768:	bf28      	it	cs
 800776a:	463a      	movcs	r2, r7
 800776c:	f7fe fe20 	bl	80063b0 <memcpy>
 8007770:	4631      	mov	r1, r6
 8007772:	4640      	mov	r0, r8
 8007774:	f7ff f9da 	bl	8006b2c <_free_r>
 8007778:	e7e1      	b.n	800773e <_realloc_r+0x1e>
 800777a:	4635      	mov	r5, r6
 800777c:	e7df      	b.n	800773e <_realloc_r+0x1e>
	...

08007780 <_read_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d07      	ldr	r5, [pc, #28]	; (80077a0 <_read_r+0x20>)
 8007784:	4604      	mov	r4, r0
 8007786:	4608      	mov	r0, r1
 8007788:	4611      	mov	r1, r2
 800778a:	2200      	movs	r2, #0
 800778c:	602a      	str	r2, [r5, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	f7fa fad2 	bl	8001d38 <_read>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_read_r+0x1e>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b103      	cbz	r3, 800779e <_read_r+0x1e>
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	2000075c 	.word	0x2000075c

080077a4 <_malloc_usable_size_r>:
 80077a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a8:	1f18      	subs	r0, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bfbc      	itt	lt
 80077ae:	580b      	ldrlt	r3, [r1, r0]
 80077b0:	18c0      	addlt	r0, r0, r3
 80077b2:	4770      	bx	lr

080077b4 <_init>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	bf00      	nop
 80077b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ba:	bc08      	pop	{r3}
 80077bc:	469e      	mov	lr, r3
 80077be:	4770      	bx	lr

080077c0 <_fini>:
 80077c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c2:	bf00      	nop
 80077c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c6:	bc08      	pop	{r3}
 80077c8:	469e      	mov	lr, r3
 80077ca:	4770      	bx	lr
